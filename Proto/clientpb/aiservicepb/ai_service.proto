syntax = "proto3";
package clientpb.aiservicepb;
option go_package = "git.woa.com/red/game-proto/clientpb/aiservicepb";

// 玩家的类型定义
enum PlayerType {
    // AI 模型
    model = 0;
    // 行为树
    bt = 1;
    // 人类玩家
    human = 2;
  }
  
  // 按键的定义，对应游戏中的8个按键
  enum SkillInputAction {
    // 空动作
    none = 0;
    // 技能动作，对应操作界面槽位
    // 普通攻击
    fight = 1;
    fight_stop = 2;
    // 技能1
    skill1 = 3;
    skill1_stop = 4;
    // 技能2
    skill2 = 5;
    skill2_stop = 6;
    // 技能3
    skill3 = 7;
    skill3_stop = 8;
    // 脱身
    skillEscape = 9;
    skillEscape_stop = 10;
    // 空岛贝
    dials = 11;
    dials_stop = 12;
    // 援护
    assist = 13;
    assist_stop = 14;
    // 终结技
    over = 15;
    over_stop = 16;
  
    // 子技能
    skillc = 17;
    skillc_stop = 18;
  
  }

  // 定义三维坐标点
  message Vector3 {
     float x = 1;
     float y = 2;
     float z = 3;
  }
  
  // 攻击框的定义
  message HitBox {
    // 自身第一卦限坐标
     Vector3 octant_1st = 1;
    // 自身第七卦限坐标
     Vector3 octant_7th = 2;
    // 攻击框tag
     int32 tag = 3;
  }
  
  // buff信息定义
  message BuffInfo {
    // buff对应IDshen
     int32 buff_id = 1;
    // 持续时间
     float remaining_time = 2;
    // buff类型 可选 依赖人为分类 可以先不考虑
  }

  // 交互块信息
  message InteractBlockInfo {
    // 判定框
    HitBox hit_box = 1;
    // ID
    int32 id = 2;
    // 可检测己方
    bool self_detectable = 3;
    // 可检测敌方
    bool oppo_detectable = 4;
  }
  
  // 元件信息定义
  message ElementInfo {
    // 元件ID
     int32 element_id = 1;
    // 元件位置
     Vector3 pos = 2;
    // 元件朝向,-1:左，1：右
     int32 dir = 3;
    // 元件位移速度
     Vector3 speed = 4;
    // 元件攻击范围 (攻击框)
    CurSkillInfo cur_skills = 5;
  }
  
  ////////////////////////////////////////游戏状态的定义///////////////////////////
  //玩家初始设置数据
  message PlayerStartArgs {
    // 角色id
     int32 char_id = 1;
    // 初始血量
     int32 start_hp = 2;
    // 奥义点, 当角色是华丽风格时，奥义点也填充在这个位置
     int32 start_mp = 3;
    // 怒气
     int32 start_rage = 5;
    // 华丽风格蓝条
     int32 start_magic = 6;
    // 玩家类别
     PlayerType type = 7;
    // 空岛贝
     int32 dials_id = 8;
    // 援助技列表 (最少0个，最多5个)
    repeated int32 assist_list = 9;
  }
  
  // 对局启动参数，配置信息
  message StartArgs {
    /// P1角色配置
     PlayerStartArgs p1_start_arg = 1;
    /// P2角色配置
     PlayerStartArgs p2_start_arg = 2;
    /// 标记哪边是主视角（0为P1，1为P2）
     int32 main_agent_side = 3;
  }
  ////////////////////////////////////////技能相关定义
  // 各个按键的状态,及其绑定的技能
  message SkillInfo {
    // 这个按键当前绑定的技能
     int32 skillID = 1;
    // 当前这个按键的类型
     SkillInputAction actionID = 2;
    // 坚持级别
     int32 hold_level = 3;
    // 破招级别
     int32 break_level = 4;
    // cd时间
     float cur_cd = 5;
    // 消耗能量豆
     int32 mp_cost = 6;
    // 消耗怒气百分比
     int32 rage_cost = 7;
    //消耗蓝条
     int32 magic_cost = 8;
    // 其它：0-不可用 1-可用
     int32 skill_status = 9;
  }
  
  // 当前在运行的技能
  message CurSkillInfo{
    // 技能 id, 用来识别不同角色的不同技能
     int32 skillID = 1;
    // 关联的动作 id，用来识别是来自普攻还是来自技能123的释放
     SkillInputAction actionID = 2;
    // 当前执行技能的motion
     int32 motion = 3;
    // 技能当前帧（0开始）
     int32 cur_frame = 4;
    // 技能最大释放帧数
     int32 max_left_frame = 5;
    // 坚持级别
     int32 hold_level = 6;
    // 破招级别
     int32 break_level = 7;
    // 打击类型
     int32 break_type = 8;
    // 当前阶段伤害百分比
     float cur_stage_dmg_rate = 9;
    // 攻击框
    repeated HitBox hit_boxes = 10;
    // 画框层触发器类型交互块
    repeated InteractBlockInfo triggers = 11;
    // 额外交互块信息
    repeated InteractBlockInfo extra_interact_blocks = 12;
    // 这里是否要加整个技能是否完成的攻击框
  }
  
  // 当前被对手攻击到的技能信息
  message HitSkillInfo{
    // 技能 id, 用来识别不同角色的不同技能
     int32 source_skill_id = 1;
    // 伤害百分比
     float dmg_rate = 2;
    // 伤害值
     float dmg_value = 3;
    // 攻击方向
     Vector3 rotation = 4;
    // 是否被格挡
     bool be_grid = 5;
  
  }
  
  ////////////////////////////////////////每一帧动态信息
  
  // 每个角色的动态信息
  message FighterState
  {
    // 角色ID
     int32 char_id = 1;
    // 自身坐标
     Vector3 pos = 2;
    // 自身朝向 -1:左，1：右
     int32 dir = 3;
    // 角色位移速度
     Vector3 speed = 4;
    // 自身血量
     int64 hp = 5;
    // 自身mp
     int32 mp = 6;
    // 角色相关的能量槽
     int32 special_mp = 7;
    // 怒气
     int32 rage = 8;
    //蓝条
     int32 magic = 9;
    //坚持级别
     int32 hold_level = 10;
     //玩家是否处于异常状态，僵直，浮空，被抓取，倒地
     int32 is_free = 11;
    // 保护等级，红保护和黄保护
     int32 protect_level = 12;
    //是否可被攻击
     bool can_be_hit = 13;
    // 从受击僵直恢复的时间
     int32 stun_fram = 14;
     // 受击框
    repeated HitBox be_hit_boxes = 15;
    // BuffInfo
    repeated BuffInfo buff_info = 16;
    // 自身召唤出的元件列表, 最大长度 100，可能有重复 ID，重复率较高
    repeated ElementInfo element_infos = 17;
    // 本帧内各技能状态, 只包含可按下键槽，与InputAction定义一致
    repeated SkillInfo skill_infos = 18;
    // 当前帧在执行的技能
    CurSkillInfo cur_skills = 19;
    // 当前帧收到的攻击技能
    repeated HitSkillInfo hit_infos = 20;
     // {0:勇气风格，1：热血风格，2：华丽风格}
     int32 role_type = 21;
     // 自身连击次数
     int32 hit_combo_num = 22;
     // appearance属性
     int32 appearance = 23;
  }
  
  ////////////////////////////////////////与客户端交互相关///////////////////////////
  
  
  // 1. 发起游戏的启动消息，配置游戏创建信息
  message EventRspData {
     StartArgs start_args = 1;
  }
  
  // 2.回传event配置
  message EpisodeStartData {
    /// 回传event配置，避免重连信息丢失
     StartArgs start_args = 1;
    /// [推理]配置文件目录，例如 "/data/UC/999/game_settings.json"
     string game_config_path = 2;
  }
  
  // 3. 请求agent start的时候附带的请求信息
  message AgentStartData {
    /// 回传玩家配置，避免重连信息丢失
     PlayerStartArgs start_arg = 1;
    /// 当前agent出生位置（0为P1，1为P2）
     int32 side = 2;
    /// [推理]己方状态延迟帧数
     int32 self_state_delay_frames = 3;
    /// [推理]对方状态延迟帧数
     int32 oppo_state_delay_frames = 4;
    /// [推理]己方动作延迟帧数
     int32 self_action_delay_frames = 5;
    /// [推理]对方动作延迟帧数
     int32 oppo_action_delay_frames = 6;
    /// [推理]动作成功执行概率（0~1），1表示动作一定会执行
     float fight_action_proba = 7;
    /// [推理]用于指定当前小局对应模型存储目录
     string model_path = 8;
    /// [推理]动作选择模式，True代表ArgMax，False代表Sample
     bool play_mode = 9;
    /// [推理]每N帧进行一次推理，表示AI反应速度
     int32 predict_freq = 10;
    /// [推理]当前小局AI类型
     int32 ai_type = 11;
    /// [推理]格挡动作最小持续帧数
     int32 skill_grid_min_frames = 12;
    /// [推理]移动与停止最小持续帧数
     int32 move_min_frames = 13;
    /// [推理]是否启用动态状态延迟，启用后状态延迟会以设置的state_delay_frames为均值呈正态分布
     bool normal_random_state_delay = 14;
  }
  
  // 4. Agent Infer状态数据，每一帧需要发给AI端的
  message AgentInferState {
    // 当前局剩余时间
     float time_left = 1;
    // 自己的角色状态
     FighterState self_state = 2;
    // 对手的角色状态
     FighterState oppo_state = 3;
  }
  
  
  // 一个角色的战斗统计
  message FighterBattleStats {
     int64 hp = 1;              // 主角剩余血量 (0.0 ~ 1.0)
     int64 damaged = 2;         // 主角造成的总伤害
     float time_left = 3;    //游戏剩余时间
    // 技能命中率、使用次数等，主要用于评估统计
  }
  
  message AgentEndData {
    // 是否获胜， 0=胜利,1=平局,2表示失败
     int32 battle_result = 1;
    // 自身战斗统计数据
     FighterBattleStats stats = 2;
  }
  
  message EpisodeEndData {
    /// 胜利方， 1=P1,2=P2,0表示平局
     int32 win_side = 1;
    /// 本局剩余时间
     float time_left = 2;
  }
  
  
  // AI发送给客户端的
  message SkillButton {
    // 各个技能按钮按下情况
     SkillInputAction button = 1;
    // 技能参数，轮盘技能或者，或者转盘技能方向
     Vector3 skill_arg = 2;
  }
  // 一帧的输出指令
  message FramePresses {
    // 各个技能按钮按下情况
    repeated SkillButton buttons = 1;
    // 位移方向
     Vector3 move = 2;
  }
  
  
