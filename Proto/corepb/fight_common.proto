// cs protocol
syntax = "proto3";

package corepb;
option go_package = "git.woa.com/red/game-proto/corepb";

import "corepb/common.proto";
import "corepb/platform.proto";
import "google/protobuf/any.proto";

// 战斗玩法类型
enum FightType {
  FIGHT_TYPE_NONE                     = 0;
  FIGHT_TYPE_PVP_ARENA                = 1;   // 竞技场-段位赛
  FIGHT_TYPE_PVE_PRACTICE             = 2;   // 练习场
  FIGHT_TYPE_MVE_JOINTBATTLE          = 3;   // 同盟协战
  FIGHT_TYPE_PVE_ADVENTURE            = 4;   // 主线冒险
  FIGHT_TYPE_PVE_MIRROR               = 5;   // 爬塔
  FIGHT_TYPE_PVP_CASUAL               = 6;   // 竞技场-娱乐赛
  FIGHT_TYPE_PVE_INTELFARM            = 7;   // 情报收集
  FIGHT_TYPE_PVE_SAFARI               = 8;   // 岛屿探险
  FIGHT_TYPE_PVE_SECRET_FIELD         = 9;   // 秘境
  FIGHT_TYPE_PVP_PSEUDOPVPBATTLE      = 10;  // 伪pvp战斗
  FIGHT_TYPE_PVE_SEABOSS              = 11;  // 狩猎海王类(废弃)
  FIGHT_TYPE_PVP_BOUNTYGAME           = 12;  // 赏金大赛
  FIGHT_TYPE_PVE_GUILD_DELEGATE       = 13;  // 海贼派遣会社
  FIGHT_TYPE_PVE_IMPELDOWN            = 14;  // 勇闯推进城(旧版)
  FIGHT_TYPE_PVE_VOYAGEEXPLORE        = 15;  // 海域探险
  FIGHT_TYPE_PVP_SEAWAR               = 16;  // 海战
  FIGHT_TYPE_PVP_GUILDWAR             = 17;  // 同盟争霸赛
  FIGHT_TYPE_PVE_ROUGE                = 18;  // 肉鸽
  FIGHT_TYPE_PVE_MECHANICS_TEACHING   = 19;  // 竞技场机制教学
  FIGHT_TYPE_PVE_BUDDY_TEACHING       = 20;  // 竞技场伙伴教学
  FIGHT_TYPE_PVP_INTREPID_SEAWAR      = 21;  // 活动:无畏海战
  FIGHT_TYPE_PVP_WOODEN_DUMMY         = 22;  // 活动:木头人竞速
  FIGHT_TYPE_PVP_ISLAND_SIEGE         = 23;  // 海岛争夺战
  FIGHT_TYPE_PVP_ACT_0040             = 24;  // [Deprecated] 40 活动（火爆球赛）
  FIGHT_TYPE_GVE_RAID                 = 25;  // 团本
  FIGHT_TYPE_PVE_INPERUDAUN           = 26;  // 勇闯推进城(2.0版本)
  FIGHT_TYPE_PVE_ACT_0029             = 28;  // 29 活动（鹰眼）
  FIGHT_TYPE_PVE_SEAKING              = 29;  // 狩猎海王
  FIGHT_TYPE_PVE_ACT_0023             = 30;  // 23 活动（DBF BaoLieQuanJi）
  FIGHT_TYPE_PVP_ACT_0035             = 31;  // 活动（DBF活动 火爆球赛）
  FIGHT_TYPE_PVE_VOYAGEEXPLORE_SEAWAR = 32;  // 海域探险海战 PVE
  FIGHT_TYPE_PVE_ACT_0075             = 33;  // 75 活动（挑战巴洛克）
  FIGHT_TYPE_PVE_ACT_0053             = 34;  // 53 活动 （守护vivi)
  FIGHT_TYPE_PVP_ISLAND_CLASH         = 35;  // 海岛激战
  FIGHT_TYPE_PVE_SEAWAR_ROGUE         = 36;  // 海战肉鸽
  FIGHT_TYPE_PVP_CONTEST_HEADTOHEAD   = 37;  // 赛事-对位赛
  FIGHT_TYPE_PVP_GUILD_SEAWAR         = 38;  // 同盟海战
  FIGHT_TYPE_PVP_AI_CHALLENGE         = 39;  // 87 活动 （智能挑战）
  FIGHT_TYPE_SECRETFIELD_AUTO         = 40;  // 秘境(自动战斗模式)
  FIGHT_TYPE_ELITE_DUNGEON_BUDDY      = 41;  // 精英副本人机伙伴类型
  FIGHT_TYPE_PVE_ACT_0059             = 42;  // 59 活动 （护送薇薇_海战）
  FIGHT_TYPE_PVE_ACT_0045             = 43;  // 45 活动（和平主义者）
  FIGHT_TYPE_ELITE_DUNGEON_BOSS       = 44;  // 精英副本怪物类型
  FIGHT_TYPE_PVE_ACT_0024_ISLAND      = 45;  // 24 活动（横板战斗）
  FIGHT_TYPE_PVE_ACT_0024_SEAWAR      = 46;  // 24 活动（海战）
  FIGHT_TYPE_PVE_ACT_0052             = 47;  // 52 活动（神之决战）
  FIGHT_TYPE_PVP_SWITCH_PVP           = 48;  // 换人 PVP
  FIGHT_TYPE_PVE_ACT_0061             = 49;  // 61 活动（空岛夺金）
  FIGHT_TYPE_PVP_CONTEST_SUPERROOKIE  = 50;  // 赛事-超新星赛
  FIGHT_TYPE_PVP_TREASURE_HUNT_ICESEA = 51;  // 活动:冰海夺宝
  FIGHT_TYPE_PVE_ACT_0060             = 52;  // 活动60:海兽大作战
  FIGHT_TYPE_PVE_ACT_0125             = 53;  // 125 活动（勇者试炼）
  FIGHT_TYPE_PVP_ACT_0128             = 54;  // 128 活动（新年海战）
  FIGHT_TYPE_PVP_FAST_DUEL            = 55;  // 135 活动（极速单挑1V1)
  FIGHT_TYPE_PVE_ACT_0127             = 56;  // 127 活动（胜利大逃亡）
  FIGHT_TYPE_PVE_ACT_0066             = 57;  // 66 活动 （大将的日常）
  FIGHT_TYPE_PVE_ACT_0137             = 58;  // 137 活动（航线追击）
  FIGHT_TYPE_PVE_ACT_0132_GAME_TYPE_1 = 59;  // 132 活动（乱斗竞技场 - 毒雾主题）
  FIGHT_TYPE_PVE_ACT_0132_GAME_TYPE_2 = 60;  // 132 活动（乱斗竞技场 - 次数盾主题）
  FIGHT_TYPE_PVE_ACT_0132_GAME_TYPE_3 = 61;  // 132 活动（乱斗竞技场 - 一击必杀主题）
  FIGHT_TYPE_PVE_ACT_0132_GAME_TYPE_4 = 62;  // 132 活动（乱斗竞技场 - 隐身主题）
  FIGHT_TYPE_PVE_ACT_0132_GAME_TYPE_5 = 63;  // 132 活动（乱斗竞技场 - 金刚体主题）
  FIGHT_TYPE_PVE_ACT_0132_GAME_TYPE_6 = 64;  // 132 活动（乱斗竞技场 - 影像贝主题）
  FIGHT_TYPE_PVP_ACT_0133             = 65;  // 133 活动 (羁绊单挑赛2v2)
  FIGHT_TYPE_PVE_ACT_0132_GAME_TYPE_7 = 66;  // 132 活动（乱斗竞技场 - 自爆主题）
  FIGHT_TYPE_PVE_ACT_0037             = 67;  // 37 活动（青雉剧情关）
  FIGHT_TYPE_PVE_ACT_0167             = 68;  // 167 活动（人间兵器计划）
  FIGHT_TYPE_PVE_ACT_0101_NORMAL      = 69;  // 101 活动 （冰封对决-普通模式)
  FIGHT_TYPE_PVE_ACT_0101_HARD        = 70;  // 101 活动 （冰封对决-困难模式)
  FIGHT_TYPE_PVE_ACT_0151             = 71;  // 151 活动（黄金缉盗）
  FIGHT_TYPE_PVE_ACT_0152             = 72;  // 152 活动（强者试炼）
  FIGHT_TYPE_PVP_ACT_0141             = 73;  // 141 活动（海战吃鸡）
  FIGHT_TYPE_PVP_FC_SUPPRESSION_DUEL  = 74;  // 好友切磋带战力压制
  FIGHT_TYPE_PVP_ACT_0134             = 75;  // 134 活动（古堡幽魂夜）
  FIGHT_TYPE_PVP_ACT_0149             = 76;  // 149 活动（协同激斗 2v2）
  // 这些枚举值没有合入 master 之前不得提前与客户端沟通！！！
};

// 战斗场景
enum FightSceneType {
  FIGHT_SCENE_NONE      = 0;
  FIGHT_SCENE_PVE       = 1;  // PVE
  FIGHT_SCENE_PVP       = 2;  // PVP
  FIGHT_SCENE_GVE       = 3;  // GVE
  FIGHT_SCENE_GVG       = 4;  // GVG 21 无畏海战
  FIGHT_SCENE_PVP_OTHER = 5;  // 其它PVP 比如 活动:木头人竞速 1v1v1
}

// PK type
enum PvpPkType {
  Common = 0;  // 普通
  Friend = 1;  // 游戏好友pk
  Plat   = 2;  // 平台好友pk
  Robot  = 3;  // 和机器人pk
};

// 通用战斗结果定义
enum FightResultType {
  E_FIGHT_WIN   = 0;  // 获胜
  E_FIGHT_DEUCE = 1;  // 平手
  E_FIGHT_LOSE  = 2;  // 失败
};

// 战斗结束原因
enum EGameResultReason {
  E_RESULT_REASON_NORMAL                = 0;   // 正常结束
  E_RESULT_REASON_ONELOSE               = 1;   // 有人掉线结束
  E_RESULT_REASON_ALLLOST               = 2;   // 所有都掉线了
  E_RESULT_REASON_ABNORMAL_EXIT         = 3;   // 其它异常退出
  E_RESULT_REASON_ONE_FLAG_TIMEOUT      = 4;   // 有人一直没发某个关键节点
  E_RESULT_REASON_ABNORMAL_LOAD         = 5;   // 加载异常
  E_RESULT_REASON_ABNORAML_DATA         = 6;   // 数据异常
  E_RESULT_REASON_ABNORAML_ENDLESS_LOOP = 7;   // 卡死异常
  E_RESULT_REASON_CHEAT                 = 8;   // 因系统认为作弊而判负
  E_RESULT_REASON_ONELOSE_LOAD          = 9;   // 加载中有一方掉线
  E_RESULT_REASON_BEFORE_FIGHT_BP       = 10;  // 未进战斗异常:BP时掉线或退出
  E_RESULT_REASON_HALFWAY_QUIT          = 11;  // 主动中途退出
  E_RESULT_REASON_OUTGAME_TIMEOUT       = 12;  // 外部服务控制超时，强制结束战斗
};

// 局内掉落包
message GameDropPackage {
  DungeonDrop dungeon_drop        = 1;  // 副本结算
  DungeonMonsterDrop monster_drop = 2;  // 副本中怪物掉落
}

// 副本结算
message DungeonDrop {
  repeated Item items = 1;
}

// 副本中怪物掉落
message DungeonMonsterDrop {
  repeated Item items                                    = 1;
  repeated DungeonMonsterSingleDrop normal_monster_items = 2;  // 普通怪物掉落
  repeated DungeonMonsterSingleDrop elite_monster_items  = 3;  // 精英怪物掉落
  repeated DungeonMonsterSingleDrop boss_monster_items   = 4;  // boss掉落
  repeated DungeonMonsterSingleDrop extra_drops          = 5;  // 额外掉落
}

// 单个怪物的掉落情况
message DungeonMonsterSingleDrop {
  repeated Item items = 1;
  int64 id            = 2;  // 用于业务区分的id
}

// 副本设置
message GameDungeonSetting {
  int64 dungeon_id                     = 1;   // 副本ID
  uint32 dungeon_type                  = 2;   // 副本类型
  uint32 story_id                      = 3;   // 剧情ID
  int64 max_complete_time              = 4;   // 最大通关时长，秒数
  ClientMonsterPack monster_pack       = 5;   // 怪物包信息
  int64 monster_hurt_ratio             = 6;   // 怪物伤害修正系数
  map<string, int64> params            = 7;   // deprecate:玩法相关参数
  int64 max_revive_count               = 8;   // 允许最大复活次数
  int64 curr_revive_count              = 9;   // 已经使用的复活次数
  repeated corepb.Item revive_items    = 10;  // 首次复活所需道具
  repeated DungeonParam dungeon_params = 11;  // 副本玩法相关参数，代替params
}

// 副本玩法自定义参数
message DungeonParam {
  string param_type = 1;  // 自定义参数类型
  int64 param_value = 2;  // 自定义参数值
}

// 关联战斗设置，目前供团本设置
message RelatedGamesSettings {
  int64 related_games_id         = 1;  // 关联战斗的id
  repeated uint32 keys           = 2;  // 外部服务需要关心的key
  SettleChannels settle_channels = 3;  // 结算通道
}

// 单局游戏内设置
message GameSettings {
  uint32 game_id                             = 1;   // 唯一的对局id
  string gamesvr_url                         = 2;   // 需要连接的ip/port
  int32 random_seed                          = 3;   // 对局的随机种子, 对局中所有人都相同
  FightType fight_type                       = 4;   // 战斗类型
  PvpPkType pk_type                          = 5;   // 好友pk/机器人pk等
  GameDungeonSetting dungeon_setting         = 6;   // 副本设置
  uint64 game_trace_id                       = 7;   // 全局唯一的对局id，跟踪定位问题使用
  int64 sys_id                               = 8;   // 玩法具体对应的系统ID
  int64 lose_timeout                         = 9;   // 玩家心跳掉线超时时间(秒)
  uint32 frame_ms                            = 10;  // 后台帧率(可能为0:纯前台)
  bool enable_fight_metrics_report           = 11;  // FightMetricsRequest上报开关
  string x_fight_id                          = 12;  // 对局所在fightsvr podname，直连路由用
  string x_ob_id                             = 13;  // 对局所在obsvr podname，直连路由用
  bool enable_action_identifier              = 14;  // 是否开启 action 唯一标识
  int64 act_id                               = 15;  // 活动ID，活动相关发起的战斗会填写
  int64 create_timestamp                     = 16;  // 对局创建时间(unix second)
  RelatedGamesSettings related_game_settings = 17;  // 关联战斗设置
  string x_room_id                           = 18;  // 对局所在roomid, 关联房间用
  bool enable_upload_logtrack                = 19;  // 帧不同步时客户端是否上传logtrack
  bool enable_ob                             = 20;  // 是否开启观战
  bool enable_double_channel                 = 21;  // 是否开启双通道
}

// 战斗buff
message FightBuff {
  int32 buff_id         = 2;  // buff的ID
  repeated int64 params = 3;  // buff的参数
  // buff 可能会有层数等信息，后面待用
}

// 技能属性枚举表
enum SkillAttrID {
  None        = 0;
  SkillLevel  = 16;  // 技能等级
  CDTime      = 17;  // 冷却时间
  DamageRate  = 18;  // 伤害比率
  DamageValue = 19;  // 伤害固定值
}

// 战斗属性信息
message SkillAttr {
  reserved 2;

  SkillAttrID id = 1;  // 技能属性ID
  int64 value    = 3;  // 属性最终值（为了避免使用浮点数，该值为实际值的 10000 倍，例如 1.23 实际传递为 1230）
}

// 技能阶段，对应到 GlobalSkills 中的每行配置
message FightSkillStage {
  int64 stage_index        = 1;  // 技能段 index
  repeated SkillAttr attrs = 2;  // 技能属性（本阶段的技能属性）
}

// 战斗技能
message FightSkill {
  reserved 2, 3;

  int64 skill_id                  = 1;  // 技能id
  repeated SkillAttr total_attrs  = 4;  // 总的技能属性
  repeated FightSkillStage stages = 5;  // 技能属性阶段细节
}

// AI 信息
message AiInfo {
  int32 ai_id    = 1;  // ai 的 id
  int32 ai_level = 2;  // ai的档位
}

// 通用的玩家战斗信息
message FightInfo {
  FightAttr fight_attr                         = 1;  // 战斗属性
  int64 fc                                     = 2;  // 实力值，用于破防计算
  repeated FightBuddyInfo buddy_info           = 3;  // 伙伴（和空岛贝）信息
  repeated FightSupportInfo support_buddy_info = 4;  // 援护信息
  repeated FightBuff buff                      = 5;  // buff信息（天生buff）
  repeated FightSkill skill                    = 6;  // 技能信息（全局技能）
  repeated FightWarshipInfo warship_infos      = 7;  // 战船信息
  FightConfig fight_config                     = 8;  // 战斗系统配置
  repeated int64 ship_rogue_weapons            = 9;  // 海战肉鸽携带的武器
}

// 战斗系统配置
message FightConfig {
  bool support_buddy_smart_turn     = 1;  // 是否开启援助智能转向
  repeated FightConfigParam configs = 2;  // 通用战斗系统配置（客户端设置过的才会在这里下发，未设置的默认不下发）
}

// 通用战斗设置
message FightConfigParam {
  string key            = 1;
  repeated int64 values = 2;
}

// 出战伙伴信息
message FightBuddyInfo {
  int64 buddy_id             = 1;  // 伙伴id
  FightDialInfo dial_info    = 2;  // 空岛贝信息
  repeated FightSkill skills = 3;  // 技能信息，包括空岛贝技能

  AiInfo ai_info                 = 4;  // ai 信息。ai不等同于机器人，如果玩家自动战斗，也会需要下发ai信息
  FightAttr buddy_attr           = 5;  // 单独伙伴战斗属性（一般玩法伙伴就使用上层 FightInfo 中的 FightAttr），仅用于每个伙伴属性各不相同的场景
  repeated int64 ultra_kill_pics = 6;  // 伙伴已装备的奥义图列表
  bool is_borrowing_buddy        = 7;  // 是否借用伙伴
  int64 fashion_id               = 8;  // 伙伴时装id
  repeated FightBuff buff        = 9;  // buff信息（天生buff）

}

// 出战的空岛贝信息，与伙伴绑定
message FightDialInfo {
  int64 dial_id = 1;  // 空岛贝id
  int64 level   = 2;  // 空岛贝等级
}

// 出战的援护信息
message FightSupportInfo {
  int64 support_id    = 1;  // 援护id
  bool use_friendship = 2;  // 是否使用友情技
}

// 战船 buff 定义
message FightWarshipBuff {
  int64 buff_id = 1;  // 战船 buff id
}

// 出战的战船信息
message FightWarshipInfo {
  int64 warship_id                = 1;  // 战船ID
  repeated FightWarshipBuff buffs = 2;  // 战船 buff 列表
  AiInfo ai_info                  = 3;  // ai 信息。ai不等同于机器人，如果玩家自动战斗，也会需要下发ai信息
}

// 多人PVE玩法战斗需要关注的信息
message MvePlayerInfo {
  int32 can_revive_count  = 1;  // 可以复活最大次数
  int32 used_revive_count = 2;  // 使用的复活次数
  int64 last_dungeon_id   = 3;  // 上一次副本ID
  int64 damage_value      = 4;  // 本场多人 PVE 伤害数值
}

// PVP玩法战斗需要关注的信息
message PvpPlayerInfo {}

// 战斗数据，需要pvpsvr单局内关心的数据
message FightExtInfo {
  MvePlayerInfo mve_info = 11;  // 多人PVE的相关信息
  PvpPlayerInfo pvp_info = 12;  // PVP的相关信息
}

// 玩家展示信息
message FightDisplayInfo {
  // reserved 3;
  string name                       = 1;  // 名字
  string plat_pic                   = 2;  // 头像
  DressInfo dress_info              = 3;  // 装扮信息
  PersonalDisplayInfo personal_info = 4;  // 个人显示信息
}

// 战斗成员
message FightPlayerInfo {
  uint64 gid        = 1;
  uint32 sid        = 2;
  uint32 player_idx = 3;  // 从1开始玩家编号
  uint32 secret_num = 4;
  int64 lvl         = 6;   // 等级
  int64 fc          = 7;   // 这里的战力表示玩家原始面板战力，FightInfo中的fc是玩法带入的战力，可能会被加成过
  bool is_robot     = 9;   // 是否为机器人
  bytes ext_info    = 10;  // 各个玩法自定义透传数据，请用 zonepb.FightExt 解析

  // 各个玩法的自定义数据，这里的数据都是pvpsvr局内需要关心的, FightExtInfo解析
  bytes fight_ext_info     = 12;
  FightDisplayInfo display = 13;  // 玩家显示信息
  bytes dungeon_drops      = 14;  // 单局奖励信息 GameDropPackage
  bytes enc_key            = 15;  // 加密的key
  bool is_helper           = 16;  // 是否为助战伙伴，为机器人时才有效

  FightInfo fight_info     = 17;  // 玩家战斗相关数据，替代fight_data字段
  int32 client_app_version = 18;
  int32 client_res_version = 19;
  RobotInfo robot_info     = 20;  // 机器人相关数据，为机器人时才填充
  bool is_ready            = 21;  // 是否处于准备状态（目前仅用于秘境）
  corepb.OSType os_type    = 22;  // 玩家的操作系统类型
  string openid            = 23;  // OPENID
}

// 战斗队伍（所有同步的战斗都以队伍为单位组成）
message FightTeamInfo {
  int64 team_id                    = 1;  // 队伍ID, 从1开始
  repeated FightPlayerInfo players = 2;  // 队伍的玩家列表
  bytes team_ext_info              = 3;  // 队伍自定义透传数据
}

// 怪物相关信息 ClientMonsterPack
message MonsterInfoMsg {
  int64 id                  = 1;  // 怪物ID
  FightAttr attr            = 2;  // 属性-复用玩家属性结构
  int64 fight_spirit        = 3;  // 斗志-不属于玩家属性
  repeated int64 born_buffs = 4;  // 天生Buff-不属于玩家属性
  int64 ai_id               = 5;
  int64 ai_temp             = 6;
  reserved 7;                                // 删除字段
  repeated int64 hurt_box_attack_rate = 8;   // 战斗信息.受击框伤害系数
  repeated int64 hurt_box_attr_value  = 9;   // 战斗信息.受击框耐久属性值
  int64 level                         = 10;  // 怪物等级
}

// 怪物包信息
message ClientMonsterPack {
  repeated MonsterInfoMsg monster_info = 1;
}

// 个人战斗详情-PVP
message PlayerFightDetailPvp {
  int64 buddy_index   = 1;  // 伙伴序号(空岛贝与伙伴绑定)，与startmsg里的buddy序号对应
  int64 left_hp       = 2;  // 伙伴剩余HP
  int64 support_index = 3;  // 援助序号，和startmsg里的support_buddy_info序号对应
}

// 个人战斗详情-海战
message PlayerFightDetailSeawar {
  int64 damage_to_player     = 1;  // 对敌方玩家造成的伤害
  int64 damage_to_foundation = 2;  // 对敌方基地造成的伤害
  int64 gem_value            = 3;  // 获取宝石数量(包含掉落)
  int64 pick_gem_value       = 4;  // 拾取宝石数量(只算拾取)

  int64 killed_by           = 5;  // 被谁击杀(如果是玩家击杀则是 gid，其他则是和客户端约定的特殊 id)
  int64 killed_happen_index = 6;  // 被击杀发生在第几个击杀(从1开始计数，如果为 0 表示没有被击杀)
  int64 kills               = 7;  // 击杀数
}

// 个人战斗详情-木头人竞速
message PlayerFightDetailWoodenDummy {
  int64 rank      = 1;  // 排名
  int64 cost_time = 2;  // 花费时间(秒)
  int64 score     = 3;  // 积分
}

// 个人战斗详情
message PlayerFightDetail {
  int64 gid                       = 1;
  int64 status                    = 2;  // 玩家状态(PlayerStatus)
  int64 kill_count                = 3;  // 击杀次数
  int64 dead_count                = 4;  // 死亡次数
  int64 chest_points              = 5;  // 小队协战（彩虹关）宝箱积分
  google.protobuf.Any custom_data = 6;  // 玩法自定义战斗详情
  int64 destruction_total         = 7;  // 地图破坏总数
  int64 common_value              = 8;  // 可代表任何整形的含义，比如活动35火爆斗球道具的数量等
  // 后面玩家相关内容会在此扩充
}

// 玩家状态
enum PlayerStatus {
  Normal      = 0;  // 正常
  Lost        = 1;  // 掉线
  FlagTimeout = 2;  // 关键节点超时
  HalfwayQuit = 3;  // 中途主动退出
}

// 对局详情，这里只有PVP玩法有多个对局
message RoundFightDetail {
  int32 win_team_id = 1;  // 本轮获胜队伍
  int64 duration    = 3;  // 持续时长
}

// 战斗结果
message FightResult {
  int32 team_id          = 1;  // 队伍id
  FightResultType result = 2;  // 胜负平
  int32 result_param     = 3;  // 结果参数， 完胜等。 获胜并且result_param=1为完胜
  int32 reason           = 4;  // 结算原因:EGameResultReason
  bool is_full_hp        = 5;  // 战斗结束后所有回合都是平局且满血
}

// 通用战斗开始消息
message GameStartMessage {
  repeated FightTeamInfo team_list = 1;  // 战斗成员信息
  GameSettings settings            = 2;  // 单局游戏内设置
  google.protobuf.Any custom_data  = 3;  // 各玩法自定义数据
  google.protobuf.Any pass_through = 4;  // 透传字段
}

// 战斗异常结束错误信息
message ErrorInfo {
  map<int64, int64> ret_codes = 2;  // 异常结算时，每个玩家的错误码(gid -> error code)
}

// 通用战斗结束消息
message GameOverMessage {
  repeated FightTeamInfo team_list             = 1;  // 战斗成员信息
  repeated FightResult result                  = 2;  // 战斗结果
  GameSettings settings                        = 3;  // 单局游戏内设置
  repeated RoundFightDetail round_details      = 4;  // 对局详情
  map<int64, PlayerFightDetail> player_details = 5;  // 玩家相关信息(key:gid, value: PlayerFightDetail)
  google.protobuf.Any custom_data              = 6;  // 各玩法自定义数据
  ErrorInfo error_info                         = 7;  // 对局异常结束携带的信息
  google.protobuf.Any pass_through             = 8;  // 透传字段
  ValidInfo valid_info                         = 9;  // 校验服校验结果
}

message ValidInfo {
  int64 error_code                   = 1;  // 校验服校验结果
  bool is_need_punish                = 2;  // 是否需要惩罚
  repeated CheatPlayer cheat_players = 3;  // 作弊玩家
}

message CheatPlayer {
  int64 team_id    = 1;  // 队伍id
  int64 gid        = 2;  // 玩家gid
  int64 player_idx = 3;  // 索引
}

// 通用战斗事件消息
message GameEventMessage {
  enum EventType {
    NONE          = 0;  // 无
    PLAYER_LEAVE  = 1;  // 玩家中途离开(包含掉线和主动退出)
    PLAYER_SETTLE = 2;  // 玩家主动结算
    PLAYER_KILLED = 3;  // 玩家被击杀
  }
  message PlayerLeave {
    repeated int64 gids = 2;  // 中途离开的玩家列表
  }
  message PlayerKilled {
    int64 gid                 = 1;  // 玩家gid
    int64 killed_by           = 2;  // 被谁击杀(如果是玩家击杀则是 gid，其他则是和客户端约定的特殊 id)
    int64 killed_happen_index = 3;  // 被击杀发生在第几个击杀(从1开始计数，如果为 0 表示没有被击杀)
    int64 kills               = 4;  // 该玩家击杀数
    int64 damages             = 5;  // 该玩家造成的伤害
  }

  EventType type                   = 1;  // 事件类型
  google.protobuf.Any payload      = 2;  // 事件内容(在上面定义，根据EventType类型选择)
  GameSettings settings            = 3;  // 单局游戏内设置
  google.protobuf.Any custom_data  = 4;  // 各玩法自定义数据
  google.protobuf.Any pass_through = 5;  // 透传字段
}

// 关联战斗上报内容
message RelatedGamesAction {
  int32 key   = 1;  // 内部key值
  int64 value = 2;
}

// 关联对局事件消息
message RelatedGamesEventMessage {
  repeated RelatedGamesAction info = 1;  // 同步给外部服务的内部key相关信息，目前供团本使用
  int64 related_games_id           = 2;  // 关联战斗的id
}

// 通用OB事件消息-通过SettleChannels通知
message ObserveEventMessage {
  enum EventType {
    NONE         = 0;  // 无
    PLAYER_LEAVE = 1;  // 玩家中途离开(包含掉线和主动退出)
    PLAYER_ENTER = 2;  // 玩家进入
  }
  message PlayerLeave {
    repeated int64 gids = 2;  // 中途离开的玩家列表
  }
  message PlayerEnter {
    repeated int64 gids = 2;  // 进入的玩家列表
  }
  EventType type                   = 1;  // 事件类型
  google.protobuf.Any payload      = 2;  // 事件内容
  GameSettings settings            = 3;  // 单局游戏内设置
  google.protobuf.Any custom_data  = 4;  // 各玩法自定义数据
  google.protobuf.Any pass_through = 5;  // 透传字段
}

// 结算通道定义
message SettleChannels {
  message Channel {
    string routing_type = 1;  // 路由类型(gid/room_id/guild_gid/area_id/raid_id)
    string routing_key  = 2;  // 路由key
  }
  repeated Channel channels = 1;  // 通道列表
}

// 通用战斗结束事件的消息体，用于被其他战斗结束事件引用
message CommonEventGameEnd {
  FightType type              = 1;  // 战斗类型
  FightResultType result_type = 2;  // 战斗结果
  PlayerStatus status         = 3;  // 玩家是否正常结束战局
  repeated int64 buddy_ids    = 4;  // 伙伴信息(带入战局)
}

// 机器人信息结构体
message RobotInfo {
  int64 id                           = 1;  // 机器人 id，机器人标识，真正显示的 gid 在绑定时生成
  int64 robot_gid                    = 2;  // 机器人 gid
  int64 mirror_gid                   = 3;  // 镜像玩家 gid
  int64 mirror_type                  = 4;  // 镜像类型（比如，实力相近程度）
  repeated int64 mirror_args         = 5;  // 镜像参数
  google.protobuf.Any robot_ext_info = 6;  // 根据配置获得的战斗内定制化内容，扩展 info 数据
}

// 客户端统计的战斗动作详情
message PlayerFightActDetail {
  FightType fight_type = 1;  // 战斗类型
  int64 game_trace_id  = 2;  // 游戏对局id
  int64 dungeon_id     = 3;  // 关卡id

  int64 round_fighter_role_id     = 4;  // 战斗伙伴
  int64 round_fighter_appear_time = 5;  // 累计驻场时间(秒),客户端统计
  int64 round_fighter_action_max  = 6;  // 轮盘和战斗指令响应间隔Max

  int64 round_fighter_button_click_count_atk = 7;   // 伙伴普通攻击的按键次数（只统计有效的按键次数）
  int64 round_fighter_button_click_count_1   = 8;   // 伙伴技能1按钮（1技能）的按键次数（只统计有效的按键次数）
  int64 round_fighter_button_click_count_2   = 9;   // 伙伴技能2按钮（2技能）的按键次数（只统计有效的按键次数）
  int64 round_fighter_button_click_count_3   = 10;  // 伙伴技能3按钮（3技能）的按键次数（只统计有效的按键次数）
  int64 round_fighter_button_click_count_4   = 11;  // 伙伴技能4按钮（空岛贝）的按键次数（只统计有效的按键次数）
  int64 round_fighter_button_click_count_5   = 12;  // 伙伴技能5按钮（援护）的按键次数（只统计有效的按键次数）
  int64 round_fighter_button_click_count_6   = 13;  // 伙伴技能6按钮（闪避）的按键次数（只统计有效的按键次数）

  int64 round_fighter_dps_count         = 14;  //本局伙伴造成伤害总次数
  int64 round_fighter_atk_miss_total    = 15;  // 本局伙伴伤害无效次数（无敌，免疫等）
  int64 round_fighter_player_crit_count = 16;  // 本局伙伴造成暴击总次数

  int64 round_fighter_damage1_max = 17;  // 本局伙伴单次非暴击伤害最大值
  int64 round_fighter_damage1_min = 18;  // 本局伙伴单次非暴击伤害最小值
  int64 round_fighter_damage2_max = 19;  // 本局伙伴单次暴击伤害最大值
  int64 round_fighter_damage2_min = 20;  // 本局伙伴单次暴击伤害最小值

  int64 round_fighter_dps_total    = 21;  //本局伙伴单局造成总伤害
  int64 round_fighter_atk_max      = 22;  //本局伙伴单次普通攻击对单个目标伤害最大值
  int64 round_fighter_atk_min      = 23;  //本局伙伴单次普通攻击对单个目标伤害最小值
  int64 round_fighter_crit_atk_max = 24;  //本局伙伴单次普通攻击暴击对单个目标伤害最大值
  int64 round_fighter_crit_atk_min = 25;  //本局伙伴单次普通攻击暴击对单个目标伤害最小值

  int64 round_fighter_atk_tag   = 26;  //本局伙伴单次普通攻击击中目标最大数量
  int64 round_fighter_atk_count = 27;  //本局伙伴普通攻击总次数
  int64 round_fighter_atk_total = 28;  //本局伙伴普通攻击累计总伤害

  int64 round_fighter_skill1_count     = 29;  //伙伴技能1使用次数
  int64 round_fighter_skill1_cd        = 30;  //伙伴两次使用技能1最小间隔（毫秒）
  int64 round_fighter_skill1_hit_count = 31;  //伙伴技能1使造成伤害总次数
  int64 round_fighter_skill1_max       = 32;  // 伙伴单次技能1对单个目标伤害最大值
  int64 round_fighter_skill1_min       = 33;  // 伙伴单次技能1对单个目标伤害最小值
  int64 round_fighter_crit_skill1_max  = 34;  //伙伴单次技能1暴击对单个目标伤害最大值
  int64 round_fighter_crit_skill1_min  = 35;  //伙伴单次技能1暴击对单个目标伤害最小值
  int64 round_fighter_skill1_tag       = 36;  // 伙伴单次技能1击中目标最大数量
  int64 round_fighter_skill1_dps       = 37;  //伙伴技能1伤害累计总量

  int64 round_fighter_skill2_count     = 38;
  int64 round_fighter_skill2_cd        = 39;
  int64 round_fighter_skill2_hit_count = 40;
  int64 round_fighter_skill2_max       = 41;
  int64 round_fighter_skill2_min       = 42;
  int64 round_fighter_crit_skill2_max  = 43;
  int64 round_fighter_crit_skill2_min  = 44;
  int64 round_fighter_skill2_tag       = 45;
  int64 round_fighter_skill2_dps       = 46;

  int64 round_fighter_skill3_count     = 47;
  int64 round_fighter_skill3_cd        = 48;
  int64 round_fighter_skill3_hit_count = 49;
  int64 round_fighter_skill3_max       = 50;
  int64 round_fighter_skill3_min       = 51;
  int64 round_fighter_crit_skill3_max  = 52;
  int64 round_fighter_crit_skill3_min  = 53;
  int64 round_fighter_skill3_tag       = 54;
  int64 round_fighter_skill3_dps       = 55;

  int64 round_fighter_skill4_count     = 56;
  int64 round_fighter_skill4_cd        = 57;
  int64 round_fighter_skill4_hit_count = 58;
  int64 round_fighter_skill4_max       = 59;
  int64 round_fighter_skill4_min       = 60;
  int64 round_fighter_crit_skill4_max  = 61;
  int64 round_fighter_crit_skill4_min  = 62;
  int64 round_fighter_skill4_tag       = 63;
  int64 round_fighter_skill4_dps       = 64;

  int64 round_fighter_skill5_count     = 65;
  int64 round_fighter_skill5_cd        = 66;
  int64 round_fighter_skill5_hit_count = 67;
  int64 round_fighter_skill5_max       = 68;
  int64 round_fighter_skill5_min       = 69;
  int64 round_fighter_crit_skill5_max  = 70;
  int64 round_fighter_crit_skill5_min  = 71;
  int64 round_fighter_skill5_tag       = 72;
  int64 round_fighter_skill5_dps       = 73;

  int64 round_fighter_dodge_count      = 74;  // 闪避触发次数
  int64 round_fighter_dodge_cd_min     = 75;  // 两次闪避之间最小时间间隔
  int64 round_fighter_dodge_time_max   = 76;  // 闪避后无敌效果单次持续最大时间
  int64 round_fighter_dodge_time_total = 77;  // 闪避后无敌效果累计持续总时间
  int64 round_fighter_dodge_mp_max     = 78;  // 单次回复闪避能量最大值
  int64 round_fighter_dodge_mp_total   = 79;  // 回复闪避能量累计值

  int64 round_fighter_init_hp         = 80;  // 伙伴初始血量（第一次血量发生改变前的血量）
  int64 round_fighter_heal_hp_count   = 81;  // 伙伴血量回复发生次数
  int64 round_fighter_heal_hp_max     = 82;  // 伙伴单次血量回复最大值（不包含复活回满）
  int64 round_fighter_heal_hp_min     = 83;  // 伙伴单次血量回复最小值
  int64 round_fighter_heal_hp_total   = 84;  // 伙伴血量回复累计总量
  int64 round_fighter_damage_hp_count = 85;  // 伙伴血量减少发生次数
  int64 round_fighter_damage_hp_max   = 86;  // 伙伴单次血量减少最大值
  int64 round_fighter_damage_hp_min   = 87;  // 伙伴单次血量减少最小值
  int64 round_fighter_damage_hp_total = 88;  // 伙伴血量减少累计总量
  int64 round_fighter_end_hp          = 89;  // 伙伴在副本结束时血量

  int64 round_fighter_relive_count = 90;  // 伙伴复活次数

  int64 round_fighter_be_hit_count           = 91;  // 伙伴本局受击总次数
  int64 round_fighter_be_hit_exemption_count = 92;  // 伙伴本局受击但不受伤害总次数

  int64 round_fighter_init_mp         = 93;   // 伙伴大招初始能量（第一次能量发生改变前的能量）
  int64 round_fighter_heal_mp_count   = 94;   // 伙伴大招能量回复发生次数
  int64 round_fighter_heal_mp_max     = 95;   // 伙伴大招单次能量回复最大值（不包含复活回满）
  int64 round_fighter_heal_mp_min     = 96;   // 伙伴大招单次能量回复最小值
  int64 round_fighter_heal_mp_total   = 97;   // 伙伴大招能量回复累计总量
  int64 round_fighter_damage_mp_count = 98;   // 伙伴大招能量减少发生次数
  int64 round_fighter_damage_mp_max   = 99;   // 伙伴大招单次能量减少最大值
  int64 round_fighter_damage_mp_min   = 100;  // 伙伴大招单次能量减少最小值
  int64 round_fighter_damage_mp_total = 101;  // 伙伴大招能量减少累计总量
  int64 round_fighter_end_mp          = 102;  // 伙伴大招在副本结束时能量

  string button_click_counts = 103;  // 有效的按键点击数统计  按键1，按键2，按键3
  int64 client_time          = 104;  // 客户端时间

  int64 bar_type                     = 105;  // 伙伴的战斗风格，见buddy表的showBarType属性
  int64 max_energy                   = 106;  // 伙伴设定的最大能量值，见buddy表的max_energy属性
  int64 energy_type                  = 107;  // 能量类型，见buddy表的energyType
  int64 gorgeous_energy_max          = 108;  //（仅华丽战斗风格有效）精力值单次回复最大值
  int64 gorgeous_energy_damage_count = 109;  //（仅华丽战斗风格有效）精力值减少的总次数

  int64 round_fighter_skill6_count = 110;  // 伙伴终结技使用次数
  int64 round_fighter_skill6_dps   = 111;  //伙伴终结技伤害累计总量
  int64 round_fighter_skill6_cd    = 112;  //伙伴两次使用终结技最小间隔

  int64 round_fighter_skill7_count = 113;  // 伙伴关卡道具使用次数
  int64 round_fighter_skill7_dps   = 114;  // 伙伴关卡道具伤害累计总量
  int64 round_fighter_skill7_cd    = 115;  //伙伴两次使用关卡道具最小间隔

  int64 round_valid_skill_count     = 116;  // 有效技能（造成伤害）总次数
  int64 round_valid_skill_damage    = 117;  // 有效技能（造成伤害）总伤害
  int64 advan_round_count           = 118;  // 立回优势次数-形成连击的回合数
  int64 advan_round_damage          = 119;  // 立回优势伤害（连击伤害量）
  int64 round_superamor_count       = 120;  // 获得霸体次数
  int64 round_break_superamor_count = 121;  // 打破霸体次数
  int64 round_counter_count         = 122;  // 破招次数，打断对方技能（处于前摇阶段）
  int64 round_parry_count           = 123;  // 确反/顶破次数，含技能打断，抓取打断霸体
  int64 round_skill_catch_count     = 124;  // 抓取次数，成功打断霸体
  int64 round_cut_skill_count       = 125;  // 斩杀伤害次数
  int64 round_end_state             = 126;  // 单回合结束状态，1为碾压回合，2为翻盘回合，3为焦灼回合，4为天崩回合
  int64 round_map_destroy           = 127;  // 地图破坏，1为破坏，0为无破坏

  int64 is_first_strike           = 128;  // 是否先手
  int64 counter_stike_times       = 129;  // 反手成功次数
  int64 counter_stike_evade_times = 130;  // 反手躲避成功次数
  int64 yellow_protect            = 131;  // 对方触发黄保护次数
  int64 red_protect               = 132;  // 对手触发红保护次数
  int64 be_hurt_total_frames      = 133;  // 自己处于受击状态的总帧数
  string motion                   = 134;  // motion 信息
}

// 客户端统计怪物的详情
message MonsterFightActDetail {
  int64 game_trace_id           = 1;   // 游戏对局id
  int64 dungeon_id              = 2;   // 关卡id
  string room_id                = 3;   // 对局所在roomid, 关联房间用
  int64 client_time             = 4;   // 客户端时间
  int64 monster_count           = 5;   // 本局出现怪物总数量（包含小怪和BOSS以及BOSS召唤小怪）
  int64 monster_kill_count      = 6;   // 本局怪物击杀数量
  int64 monster_damage_max      = 7;   // 单个怪物单次承受伤害最大值
  int64 monster_damage_min      = 8;   // 单个怪物单次承受伤害最小值
  int64 monster_damage_total    = 9;   // 所有怪物累计承受伤害总量
  int64 monster_init_hp_total   = 10;  // 所有怪物累计初始血量总量
  int64 monster_use_skill_count = 11;  // 所有怪物,累计攻击次数
  int64 monster_time_total      = 13;  // 所有怪物,累计存活时间,逻辑帧数，每帧33ms（从Monster出现到死亡的时间）
  int64 monster_attack_max      = 15;  // 所有怪物,单次造成的最大伤害
  int64 monster_attack_min      = 16;  // 所有怪物,单次造成的最小伤害
  int64 monster_attack_total    = 17;  // 所有怪物,累计造成的总伤害
}
