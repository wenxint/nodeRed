// cs protocol
syntax = "proto3";

package anticheatpb;

option go_package = "git.woa.com/mfcn/gateproxy/go-client/pkg/proto/anticheatpb";

service AntiCheatService {
  // 透传数据，通过该方法发送的数据，会在gateproxy拦截，然后将消息体payload透传给ace server
  // request中的payload应该为客户端通过GetReportData从tss(或者ace)获取的数据
  rpc PassThrough(PassThroughRequest) returns (PassThroughReply);

  // 记录到tlog的透传数据
  // 客户端使用tss的sdk来实现反外挂时，需要额外调用TssSdkGetReportData2来获取数据，该数据需要记录到tlog，不透传给ace server
  // gateproxy将按照正常业务请求处理：传递给gatesvr,再到zonesvr,zonesvr打印tlog
  rpc RecordTlog(RecordTlogRequest) returns (RecordTlogReply);
}

// PassThrough请求
message PassThroughRequest {
  bytes payload = 1;  // 客户端通过GetReportData接口从安全sdk接口获取的数据
}

// PassThrough回复
message PassThroughReply {}

// RecordTlogR请求
message RecordTlogRequest {
  string room_id      = 1;  //客本局房间ID，多个玩家在同一房间对局共用此ID
  int64 battle_id     = 2;  //客对局ID，用于关联单个玩家同一对局的ID
  int64 report_timing = 3;  // 0：定时上报（每分钟上报1次） 1：对局开始  2：对局结算 3：对局细节 4.回合开始 5.回合结算" />
  bytes payload       = 4;  // 客户端通过GetReportData2接口从安全sdk接口获取的数据
}

// RecordTlog回复
message RecordTlogReply {}

// 服务端也需要从ace server获取数据，然后透传给客户端，客户端再透传给tss(或者ace) client
// 下行的透传数据，服务器透传给客户端
message DownstreamPassThroughData {
  bytes payload = 1;
  int64 len     = 2;
}