// cs protocol
syntax = "proto3";

package roompb;
option go_package = "git.woa.com/red/roomsvr/pkg/proto/roompb";


import "google/protobuf/any.proto";

import "corepb/loadout_comm.proto";
import "pkg/proto/roompb/banpickpb/banpick.proto";
import "corepb/fight_common.proto";
import "corepb/platform.proto";
import "corepb/common.proto";

// 邀请ntf
message InvitationNTF {
  reserved 5;
  int64 from_gid       = 1;  // 邀请人 GID
  string from_name     = 2;  // 邀请人名字
  int64 from_level     = 3;  // 邀请人等级
  string from_plat_pic = 4;  // 邀请人头像
  // corepb.DressInfo from_dress_info              = 5;   // 邀请人装扮信息
  corepb.PersonalDisplayInfo from_personal_info = 6;   // 邀请人显示信息
  int64 act_id                                  = 7;   // 活动ID
  corepb.FightType fight_type                   = 8;   // 玩法类型
  string room_id                                = 51;  // 房间 ID
  string room_game_mode                         = 52;  // 房间的玩法
  google.protobuf.Any gameplay_info             = 53;  // 玩法信息
  //  秘境专用
  int64 secretfield_level = 101;  // 秘境等级
}

// 踢人ntf
message KickedNTF {
  string room_id = 1;  // 房间id
  bool by_me     = 2;  // 自己离开还是被T
}

// 房间通用ntf
message RoomInfoNTF {
  string room_id     = 1;  // 房间id
  RoomInfo room_info = 2;  // 房间信息
}

// 开始匹配ntf
message StartMatchNTF {
  int64 estimated_match_seconds = 1;  // 预估匹配时间
  string room_id                = 2;  // 房间id
  RoomInfo room_info            = 3;  // 房间信息
  int64 timeout_seconds         = 4;  // 超时时间
}

// 拒绝邀请ntf
message RejectInvitationNTF {
  int64 gid      = 1;  // 被邀请人gid
  string name    = 2;  // 被邀请人名字
  string room_id = 3;  // 被邀请加入的房间id
}

// 上阵援助伙伴ntf
message HelperBuddyJoinNTF {
  string room_id          = 1;
  repeated int64 buddy_id = 2;  // 上阵的伙伴id
}

// 进入房间ntf
message EnterRoomNTF {
  string room_id = 1;      // 房间id
  string operator = 2;     // user:用户 system：系统
  string event       = 3;  // create: 创建房间  invitee: 被邀请 match_success: 匹配成功 reconnect: 重连
  RoomInfo room_info = 4;  // 房间信息
  string trace_id    = 5;  // traceid
  int64 gid          = 6;  // 用户id
  int64 ret_code     = 7;  // ntf错误码
}

// 进入房间ntf
message MatchJoinRoomNTF {
  string room_id     = 1;  // 房间id
  RoomInfo room_info = 4;  // 房间信息
}

// 离开房间ntf
message LeaveRoomNTF {
  string room_id = 1;                  // 房间id
  string operator = 2;                 // user:用户 system：系统
  string event                   = 3;  // normal:主动退出  disconnect: 用户断线 match_suceess: 匹配成功退出
  string trace_id                = 4;  // traceid
  int64 gid                      = 5;  // 用户gid
  int64 ret_code                 = 6;  // ntf错误码
  ELeaveRoomEventType event_enum = 7;  // 参考ELeaveRoomEventType
}

// 玩家设置事件
enum ELeaveRoomEventType {
  LeaveRoomNormal            = 0;  // 正常退出
  LeaveRoomDeadRoom          = 1;  // 房间销毁退出，一般是异常情况
  LeaveRoomSomeoneDisconnect = 2;  // 有玩家掉线退出（指的是pvp这种有人掉线导致所有人都退出时，其他人的退出原因）
  LeaveRoomSingleMatchFailed = 3;  // 单人匹配失败退出
  LeaveRoomEnterFight        = 4;  // 目前仅适用于pvp，进入战斗退出
  LeaveRoomDisconnect        = 5;  // 掉线退出（仅针对掉线的人）
  LeaveRoomEnterNew          = 6;  // 进入其他房间退出，一般是被邀请
}

// 房间异常ntf
message RoomExceptionNtf {
  string room_id         = 1;  // 房间id
  int64 ret_code         = 2;  // 错误码
  string title           = 3;  // 标题
  string context         = 4;  // 文案
  RoomDebugMsg debug_msg = 5;  // 调试信息
}

message RoomDebugMsg {
  int64 timestamp        = 1;  // 时间戳
  string trace_id        = 2;  // traceid
  repeated int64 players = 3;  // 房间内的玩家
  string event           = 4;  // 事件
  string stack           = 5;  // 堆栈
}

// 玩家设置事件
enum ESetStatusType {
  ReadyNormal       = 0;  // 未设置任何状态
  ReadyTimeout      = 1;  // 超时自动准备
  CancelNormal      = 2;  // 取消匹配
  CancelDisconnect  = 3;  // 断开连接
  CancelNewUser     = 4;  // 新进入房间
  CancelMatchFailed = 5;  // 匹配失败
  StartFight        = 6;  // 进入战斗
}

// 玩家设置状态ntf
message SetStatusNTF {
  int64 gid      = 1;        // 用户id
  string room_id = 2;        // 房间id
  string operator = 3;       // user:用户 system：系统
  ESetStatusType event = 4;  // 事件
  RoomInfo room_info   = 5;  // 房间信息
  int64 ret_code       = 6;  // 状态码
}

// 用于客户端调用的服务接口
// 除 CreateRoom，其他方法均需要在 metadata 里带上 "x-room-id: 房间ID"
service CSService {
  rpc CreateRoom(CreateRoomRequest) returns (CreateRoomReply);                          // 创建房间
  rpc CreateRoomV2(CreateRoomV2Request) returns (CreateRoomV2Reply);                    // 创建房间v2
  rpc RoomInfo(RoomInfoRequest) returns (RoomInfoReply);                                // 获取房间信息
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatReply);                             // 发送心跳
  rpc EnterRoom(EnterRoomRequest) returns (EnterRoomReply);                             // 进入房间
  rpc LeaveRoom(LeaveRoomRequest) returns (LeaveRoomReply);                             // 离开房间
  rpc InvitePlayer(InvitePlayerRequest) returns (InvitePlayerReply);                    // 邀请玩家进入房间
  rpc KickPlayer(KickPlayerRequest) returns (KickPlayerReply);                          // 踢走某玩家
  rpc TransferLeader(TransferLeaderRequest) returns (TransferLeaderReply);              // 转移队长
  rpc SetStatus(SetStatusRequest) returns (SetStatusReply);                             // 设置准备状态
  rpc LoadoutInfo(LoadoutInfoRequest) returns (LoadoutInfoReply);                       // 当前玩家阵容信息
  rpc ApplyLoadout(ApplyLoadoutRequest) returns (ApplyLoadoutReply);                    // 设置阵容
  rpc RejectInvitation(RejectInvitationRequest) returns (RejectInvitationReply);        // 拒绝邀请
  rpc ApplyDial(ApplyDialRequest) returns (ApplyDialReply);                             // 设置空岛贝
  rpc SettlingGamePlay(SettlingGamePlayRequest) returns (SettlingGamePlayReply);        // 房间结算
  rpc ConfirmMatchResult(ConfirmMatchResultRequest) returns (ConfirmMatchResultReply);  // 确认匹配
  rpc SFNotifyReady(SFNotifyReadyRequest) returns (SFNotifyReadyReply);                 // 秘境特有功能，提醒准备
}

// 无状态服务接口
service CSStatelessService {
  rpc CreateRoomV2(CreateRoomV2Request) returns (CreateRoomV2Reply);              // 创建房间
  rpc GetCurrentRoomID(GetCurrentRoomIDRequest) returns (GetCurrentRoomIDReply);  // 获取当前房间ID
}

message GetCurrentRoomIDRequest {
  string game_mode = 1;
}

message GetCurrentRoomIDReply {
  string room_id = 1;
}

// pvp专用，bp操作
enum EBPOperatType {
  BpNormal        = 0;  // 预留字段
  BpBan           = 1;  // Ban
  BpPick          = 2;  // Pick
  BpConfirm       = 3;  // 确认
  BpCancelConfirm = 4;  // 取消确认
}

message JDCBanPickRequest {
  int64 type             = 1;  // 操作类型   // 1.ban 2.pick 3.确认 4.取消
  corepb.Loadout loadout = 2;  // 当前阵容
}

message JDCBanPickReply {}

// 玩家bp信息
message BanPickInfo {
  repeated corepb.LoadoutBuddyChoice ban_buddy_choices          = 1;  // 可ban列表
  repeated corepb.LoadoutBuddyChoice pick_buddy_choices         = 2;  // 可pick列表
  repeated corepb.LoadoutBuddyChoice already_ban_buddy_choices  = 3;  // 已ban列表
  repeated corepb.LoadoutBuddyChoice already_pick_buddy_choices = 4;  // 已pick列表
  map<int64, BuddyStatus> buddy_status                          = 5;  // buddy对应的拥有状态
  repeated int64 last_ban_buddy_ids                             = 6;  // 上次禁用的伙伴列表
}

// 伙伴类型，是否已拥有等区分
enum BuddyType {
  NotActive = 0;  // 未拥有
  Active    = 1;  // 已拥有
  LimitFree = 2;  // 限免
  LimitCard = 3;  // 限时
}

// 伙伴是否已获取等分类信息
message BuddyStatus {
  BuddyType buddy_type = 1;  // 伙伴类型
  int64 expire_at      = 2;  // 过期时间(unix second)，默认为0表示永久
}

// 小队协战ntf玩法字段
message JBRoomInfo {
  int64 rainbow_id                       = 1;  // 彩虹卡id
  int64 dungeon_ld                       = 2;  // 关卡id
  map<int64, roompb.Status> settling_map = 3;  // 结算状态
}

// 类小队玩法（守护vivi）ntf玩法字段
message ActTeamInfo {
  int64 act_id = 1;  // 活动id
  corepb.FightType fight_type = 2; // 玩法类型
}

message RainbowInfo {
  int64 rainbow_id = 1;
  int64 match_type = 2;
  string mode      = 3;
}

// 竞技场ntf玩法字段
message JDCRoomInfo {
  int64 current_status                            = 1;  // 房间状态banpickpb.BPStatus
  int64 ban_count                                 = 2;  // 总ban数量,配置项
  map<int64, BanPickInfo> ban_pick_info           = 3;
  int64 preparation_end_time_nano                 = 4;  // 当前阶段结束时间
  int64 preparation_start_time_nano               = 5;  // 当前阶段开始时间
  map<int64, int64> preparation_end_time_nano_map = 6;  // 当前阶段结束时间Map
}

message BuddyInfo {
  corepb.LoadoutBuddyChoice buddy_choice = 1;
  int64 status                           = 2;
  repeated int64 lock_by                 = 3;
}

message BuddyMap {
  map<int64, BuddyInfo> buddy_info_map              = 1;
  repeated corepb.LoadoutBuddyChoice sorted_choices = 2;
}

message JDCBanPickList {
  BuddyMap all_buddy                     = 1;
  map<int64, BuddyMap> already_ban_list  = 2;
  map<int64, BuddyMap> already_pick_list = 3;
}

// 房间信息
message RoomInfo {
  repeated PlayerInfo player_infos   = 1;  // 房间内各玩家信息
  int64 leader_gid                   = 2;  // 队长玩家 GID
  bool started_game                  = 3;  // 是否已经进入游戏/匹配
  int64 game_start_countdown_seconds = 4;  // 游戏开始倒计时，< 0 代表无倒计时
  bool enable_helper_buddy           = 5;  // 是否开启助战伙伴
  string game_mode                   = 6;  // 游戏模式
  string game_sub_mode               = 7;
  string room_id                     = 8;
  bool is_single                     = 9;    // 只允许单人存在的逻辑上的房间，不可邀请、踢人。
  bytes extras                       = 100;  // 依玩法而定的额外房间信息
}

// 玩家信息
message PlayerInfo {
  reserved 14;
  int64 gid = 1;                                 // 玩家 GID
                                                 //  bool ready = 2; // 废弃，使用status字段，是否已准备
  corepb.Loadout loadout                   = 3;  // 阵容选择
  bool loadout_valid                       = 4;  // 当前的阵容选择是否合法
  Status status                            = 5;
  string name                              = 6;   // 玩家名字
  int64 fight_capacity                     = 7;   // 战力
  int64 level                              = 8;   // 等级
  bool is_robot                            = 9;   // 是否为机器人
  string plat_pic                          = 10;  // 平台头像
  corepb.LoadoutProfile profile            = 11;
  bool is_helper                           = 12;  // 是否为助战
  corepb.RobotInfo robot_info              = 13;  // 机器人相关信息
  int64 team_id                            = 15;  // 队伍信息
  int64 set_id                             = 16;  // 座位信息
  corepb.PersonalDisplayInfo personal_info = 17;  // 个人显示信息

  map<string, google.protobuf.Any> extras = 100;  // 依玩法而定的额外玩家信息
}

// 已废弃:旧创建房间协议
message CreateRoomRequest {
  // 玩法名，目前有：
  // "joint_battle": 同盟协战
  string game_mode       = 1;
  string game_sub_mode   = 2;  // 对同盟协战：rainbow-彩虹关  对pvp: JDC竞技场，CASUAL娱乐赛
  bool single_match      = 3;
  int64 leader           = 4;
  repeated int64 players = 5;
  string event           = 6;
  string token           = 7;
  repeated int64 robots  = 8;
}

message CreateRoomReply {
  string room_id     = 1;  // 房间 ID
  RoomInfo room_info = 2;  //房间的完整信息
}

// 玩家类型
enum EPlayerType {
  NormalPlayer = 0;  // 普通玩家
  RobotPlayer  = 1;  // 机器人玩家
  HelperPlayer = 2;  // 助战玩家
}

message Player {
  int64 gid             = 1;
  EPlayerType type      = 2;
  corepb.OSType os_type = 3;
}

// 小队协战创建房间玩法数据
message JBGameplay {
  // int64 rainbow_id = 1;    // rainbow-彩虹关 被废弃
  // string token = 2;        // 客户端上传彩虹关时，需携带此token, 被废弃
  bool single_match = 3;  // 是否为单人匹配
}

// 竞技场创建房间玩法数据
message PVPGameplay {
  bool single_match                   = 1;  // 是否为单人匹配
  banpickpb.BanPickMode ban_pick_mode = 2;  // ban-pick 模式(目前用于 ssapi 发起好友切磋战斗)
}

// 秘境创建房间玩法数据
message SFGameplay {
  reserved 3;
  bool single_match     = 1;  // 是否为单人匹配
  int64 dungeon_level   = 2;  // 秘境层级
  int64 challenge_count = 4;  // 挑战次数
}

// 活动组队创建房间玩法数据
message ActTeamGameplay {
  int64 act_id      = 1;  // 活动ID
  bool single_match = 2;  // 是否为单人匹配
}

message Gameplay {
  oneof gameplay_info {
    JBGameplay joint_battle  = 100;
    PVPGameplay pvp          = 101;
    SFGameplay secret_field  = 102;
    ActTeamGameplay act_team = 103;
  }
}

message CreateRoomV2Request {
  /* 玩法名，目前有：
        "PVP"
        "JointBattle"
        "SecretField"
        "ActTeam"
  */
  string game_mode        = 1;
  int64 leader            = 2;  // 房主id
  repeated Player players = 3;
  Gameplay gameplay       = 4;
}

message CreateRoomV2Reply {
  string room_id     = 1;  // 房间 ID
  RoomInfo room_info = 2;  //房间的完整信息
}

message RoomInfoRequest {}

message RoomInfoReply {
  RoomInfo room_info = 1;  // 房间信息
}

// 建议每 3 秒一次，15 秒无心跳会被踢出房间
message HeartbeatRequest {}

// 客户端心跳不同步等待回报，需要确认房间号
message HeartbeatReply {
  string room_id = 1;
}

// 离开房间协议
message LeaveRoomRequest {
  string event = 1;  // 离开原因
}

message LeaveRoomReply {}

// 进入房间协议
message EnterRoomRequest {}

message EnterRoomReply {
  string old_room_id = 1;  // 如果之前在房间里，返回退出的老房间
  RoomInfo room_info = 2;  //房间的完整信息
}

// 邀请玩家协议
message InvitePlayerRequest {
  int64 gid = 1;  // 被邀请玩家 GID
}

message InvitePlayerReply {}

// 踢出玩家协议
message KickPlayerRequest {
  int64 gid = 1;  // 要被踢出的玩家 GID
}

message KickPlayerReply {}

// 转移队长协议
message TransferLeaderRequest {
  int64 gid = 1;  // 队长转移对象玩家 GID
}

message TransferLeaderReply {}

message RejectInvitationRequest {
  int64 gid = 1;  // 拒绝来自gid的邀请
}

message RejectInvitationReply {}

enum Status {
  Normal            = 0;  // 未准备，没有正在更换阵容状态
  Changing          = 1;  // 更换阵容状态
  Ready             = 2;  // 已准备状态
  Settling          = 3;  // 结算中
  OnShow            = 4;  // 展示动画中
  Conflict          = 5;  // 阵容冲突
  ReadyForNextFight = 6;  // 准备下一场战斗中
}

enum PlayerOperate {
  None               = 0;  //  无效数据
  CancelReady        = 1;  // 取消准备
  CancelMatch        = 2;  // 取消匹配
  SetReady           = 3;  // 准备
  SetMatch           = 4;  // 匹配
  SetFight           = 5;  // 开战
  SetChangingLoadout = 6;  // 更换阵容
  ConfirmLoadout     = 7;  // 确认阵容
}

// 设置状态协议
message SetStatusRequest {
  Status status         = 1;  // 当前状态
  PlayerOperate operate = 2;  // 操作
}

message SetStatusReply {}

// 获取阵容协议
message LoadoutInfoRequest {
  string loadout_type = 1;  // 暂时无用
}

message LoadoutInfoReply {
  corepb.LoadoutProfile profile = 1;  // 阵容配置
  corepb.Loadout loadout        = 2;  // 阵容选择
  bool valid                    = 3;  // 当前阵容是否合法
  bool adjusted                 = 4;  // 当前阵容检验时是否有过不合法的项目但已经被自动调整
}

// 设置阵容协议
message ApplyLoadoutRequest {
  string loadout_type    = 1;  // 暂时没用
  corepb.Loadout loadout = 2;  // 阵容选择
}

message ApplyLoadoutReply {}

message JBAddHelperRequest {}

message JBAddHelperReply {}

message JBKickHelperRequest {
  int64 buddy_id = 1;  // 助战伙伴id
}

message JBKickHelperReply {}

message SfRoomInfo {
  int64 game_level                      = 1;  // 房间等级
  map<int64, int64> challenge_count_map = 2;  // 每个人的挑战次数
}

// 秘境夺宝ntf玩法字段
message RaidRoomInfo {
  reserved 1, 2, 3;
}

message ApplyDialRequest {
  repeated corepb.LoadoutDialChoice dial_choices = 1;  // 所选择的空岛贝组成（注意顺序）
}

message ApplyDialReply {}

// 结算协议
message SettlingGamePlayRequest {
  int64 operate = 1;  // 1:离开队伍 2:返回队伍 3:加入下一场战斗
}

message SettlingGamePlayReply {
  string team_room_id = 1;  // 队伍房间id
  RoomInfo room_info  = 2;  // roominfo
}

// 确认匹配协议
message ConfirmMatchResultRequest {
  int64 operate = 1;  // 1:确认 2:取消
}

message ConfirmMatchResultReply {
  RoomInfo room_info = 1;  // roominfo
}

message SFNotifyReadyRequest {}

message SFNotifyReadyReply {}

message SFNotifyReadyNtf {
  string room_id = 1;
}
