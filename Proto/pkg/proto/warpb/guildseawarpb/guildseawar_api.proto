// cs protocol
syntax = "proto3";

package warpb.guildseawarpb;
option go_package = "git.woa.com/red/guildwarsvr/pkg/proto/warpb/guildseawarpb";


import "corepb/common.proto";

// 同盟海战服务 - 有状态部分，请求需要携带 x-warid 标头且值为「war_id」
service StatefulGuildSeaWarService {
  rpc EnterMain(EnterMainRequest) returns (EnterMainReply);  // 进入同盟海战主界面
  rpc EnterArea(EnterAreaRequest) returns (EnterAreaReply);  // 进入海域
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatReply);  // 心跳

  // 全员权限:
  rpc Participant(ParticipantRequest) returns (ParticipantReply);        // 玩家参与
  rpc Cheer(CheerRequest) returns (CheerReply);                          // 发送助威
  rpc Bless(BlessRequest) returns (BlessReply);                          // 发送祝福
  rpc RecentCheers(RecentCheersRequest) returns (RecentCheersReply);     // 查询最近助威
  rpc RecentBlesses(RecentBlessesRequest) returns (RecentBlessesReply);  // 查询最近祝福

  // 观战:
  rpc AreaFights(AreaFightsRequest) returns (AreaFightsReply);  // 查询海域对战信息
  rpc WarFights(WarFightsRequest) returns (WarFightsReply);     // 查询所有对战信息
  rpc Spectate(SpectateRequest) returns (SpectateReply);        // 观战

  // 团长 & 副团长权限:
  rpc DeploymentInfo(DeploymentInfoRequest) returns (DeploymentInfoReply);     // 查询部署
  rpc ApplyDeployment(ApplyDeploymentRequest) returns (ApplyDeploymentReply);  // 设置部署
}

message ProfileReply {
  string war_id = 1;  // war_id，用于后续请求有状态服务
}

message EnterMainRequest {
  int64 expected_phase = 1;  // 期望的阶段
}

message GuildProfile {
  int64 id    = 1;  // 同盟 ID
  string name = 2;  // 同盟名称
  int64 flag  = 3;  // 同盟旗帜
}

message GuildStatus {
  enum Half {
    HALF_UNKNOWN = 0;  // 未知
    UPPER        = 1;  // 上半区
    LOWER        = 2;  // 下半区
  }
  int64 id                 = 1;  // 同盟 ID
  bool eliminated          = 2;  // 是否已淘汰
  Half half                = 3;  // 所在半区
  int64 participants_count = 4;  // 参与人数
}

message EnterMainReply {
  AreaDeployment current_area         = 1;   // 玩家所在海域的部署, 仅在赛前、比赛阶段有效
  repeated GuildProfile guilds        = 2;   // 同盟信息列表
  repeated GuildStatus guild_statuses = 3;   // 同盟状态列表
  repeated AreaProfile areas          = 4;   // 所有海域列表
  bool participanted                  = 5;   // 玩家是否已参战
  bool have_right_to_deploy           = 6;   // 是否有权部署
  int64 season                        = 7;   // 赛季
  repeated GuildResult guild_results  = 8;   // 同盟海战结果，仅当比赛完成后有数据
  bool is_valid                       = 9;   // 是否有效
  bool have_right_to_participate      = 10;  // 是否有权参战
  int64 current_field_id              = 11;  // 目前参战战场 ID，仅对可进入海域参战的玩家有效，具体定义参考 FieldType
}

message EnterAreaRequest {
  int64 field_id = 1;  // 战场 ID(参考 FieldType，1 为八强上半区，2 为八强下半区，3 为四强赛)
  int64 area_id  = 2;  // 海域 ID
}

message PlayerProfile {
  int64 gid                               = 1;  // 玩家 gid
  corepb.PersonalDisplayInfo display_info = 2;  // 玩家展示信息
  int64 fc                                = 3;  // 战力
}

message AreaTeam {
  int64 area_id                  = 1;  // 海域 ID
  repeated PlayerProfile players = 2;  // 玩家列表
  repeated int64 alive_players   = 3;  // 有心跳玩家 gid 列表
  int64 guild_id                 = 4;  // 同盟 ID
}

message AreaTeamAgainst {
  AreaTeam left   = 1;  // 队伍1
  AreaTeam right  = 2;  // 队伍2
  int64 start_at  = 3;  // 是否已经开始(如果为 0 表示还没开始)
  int64 finish_at = 4;  // 是否已经结束(如果为 0 表示还没结束)
  int64 winner    = 5;  // 胜利方同盟 ID
}

// GuildWinCount 同盟在海域中的胜场数
message GuildWinCount {
  int64 guild_id  = 1;  // 同盟 ID
  int64 win_count = 2;  // 胜场数
  bool deployed   = 3;  // 是否已部署
}

message GuildPoint {
  int64 guild_id = 1;  // 同盟 ID
  int64 point    = 2;  // 积分
}

message EnterAreaReply {
  int64 scene_id                   = 1;  // 场景 ID
  repeated AreaTeamAgainst against = 2;  // 对阵信息
  int64 round                      = 3;  // 当前轮次
  SpectateReply spectate_info      = 4;  // 观战信息 主要是需要里面的排行战况信息
}

message HeartbeatRequest {
  bool in_area = 1;  // 是否在海域场景中
}

message HeartbeatReply {}

message ParticipantRequest {}

message ParticipantReply {}

message CheerRequest {
  int64 cheer_id = 1;  // 助威条目 ID
}

message CheerReply {}

message BlessRequest {
  int64 bless_id = 1;  // 祝福条目 ID
}

message BlessReply {}

message RecentCheersRequest {}

message RecentCheersReply {
  message Cheer {
    int64 cheer_id     = 1;  // 助威条目 ID
    int64 sender       = 2;  // 发送者 gid
    string sender_name = 3;  // 发送者
  }
  repeated Cheer cheers = 1;  // 助威列表
}

message RecentBlessesRequest {}

message RecentBlessesReply {
  message Bless {
    int64 bless_id     = 1;  // 祝福条目 ID
    int64 sender       = 2;  // 发送者 gid
    string sender_name = 3;  // 发送者名字
  }
  repeated Bless blesses = 1;  // 祝福列表
}

message AreaFightsRequest {
  int64 area_id = 1;  // 海域 ID
}

message Fight {
  int64 round                          = 1;   // 轮次
  GuildProfile left_guild              = 2;   // 左边同盟信息
  GuildProfile right_guild             = 3;   // 右边同盟信息
  repeated PlayerProfile left_players  = 4;   // 左边玩家信息
  repeated PlayerProfile right_players = 5;   // 右边玩家信息
  int64 start_at                       = 6;   // 开始时间(unix second)
  bool finished                        = 7;   // 是否已结束
  int64 game_trace_id                  = 8;   // game trace id，用于观战
  int64 area_id                        = 9;   // 海域 ID
  string x_ob_id                       = 10;  // x_ob_id
  int64 winner_guild_id                = 11;  // 胜利方同盟 ID
  repeated int64 real_players          = 12;  // 实际参与战斗的玩家 gid 列表
}

message AreaFightsReply {
  repeated Fight fights = 1;  // 战斗列表
}

message DeploymentInfoRequest {}

message AreaProfile {
  int64 area_id                      = 1;  // 海域 ID
  string area_name                   = 2;  // 海域名称
  string area_type                   = 3;  // 海域类型
  bool is_fighting                   = 4;  // 是否正在战斗
  map<int64, int64> guild_win_counts = 5;  // 同盟胜场数 guild_id -> win_count
}

message AreaDeployment {
  AreaProfile area_profile               = 1;  // 海域信息
  repeated int64 players                 = 2;  // 部署玩家 gid 列表
  int64 global_skill_id                  = 3;  // 全局技能 ID
  repeated PlayerProfile player_profiles = 4;  // 玩家 gid -> 玩家信息(仅在查询部署时有效)
}

message DeploymentInfoReply {
  message GlobalSkill {
    int64 global_skill_id     = 1;  // 全局技能 ID
    bool unlocked             = 2;  // 是否解锁
    int64 participants_needed = 3;  // 解锁需要参与人数
  }
  repeated AreaDeployment area_deployments = 1;  // 部署信息
  repeated PlayerProfile candidates        = 2;  // 可选玩家列表
  repeated GlobalSkill global_skills       = 3;  // 全局技能列表
}

message ApplyDeploymentRequest {
  repeated AreaDeployment area_deployments = 1;  // 部署信息(支持部分修改)
}

message ApplyDeploymentReply {}

// 本同盟参战信息更新 notify
message ParticipantsUpdateNotify {
  int64 parcipants_count = 1;  // 参与人数
}

// 团长收到此消息后，应重新获取部署信息
message DeploymentUpdateNotify {
  DeploymentInfoReply deployment_info = 1;  // 部署信息
}

// 玩家部署信息更新 notify
message DeploymentInfoUpdateNotify {
  AreaDeployment area_deployment = 1;  // 部署信息
}

message GuildResult {
  int64 id     = 1;  // 同盟ID
  int64 rank   = 2;  // 排名
  int64 points = 3;  // 积分
  bool success = 4;  // 晋级
}

// 海战结果通知 notify
message ResultNotify {
  repeated GuildResult results = 1;  // 各同盟结果
}

message GuildFightExt {
  GuildProfile guild_profile = 1;  // 同盟信息
  int64 guild_skill          = 2;  // 同盟技能
}

message WarFightsRequest {}

message WarFightsReply {
  repeated Fight fights = 1;  // 战斗列表
}

message SpectateRequest {}

// 观战不会进入某个海域，还是返回主界面的详细情况
message SpectateReply {
  enum FieldType {
    FIELD_TYPE_UNKNOWN   = 0;  // 未知
    FIELD_TYPE_UPPER     = 1;  // 上半区
    FIELD_TYPE_LOWER     = 2;  // 下半区
    FIELD_TYPE_SEMIFINAL = 3;  // 半决赛
  }

  message Guild {
    int64 id             = 1;  // 同盟 ID
    string name          = 2;  // 同盟名称
    int64 flag           = 3;  // 同盟旗帜
    int64 points         = 4;  // 积分
    FieldType field_type = 5;  // 战场ID
  }
  repeated Guild guilds         = 1;  // 同盟信息列表
  repeated AreaProfile areas    = 2;  // 所有海域列表
  int64 now_round               = 3;  // 当前轮次
  int64 next_round_start_second = 4;  // 下一轮开始时间(unix second),为0表示当前轮次未结束
  bool is_fighting              = 5;  // 是否正在战斗
}

// 对方掉线直接判胜通知 notify
message OpponentOfflineNotify {}

// 此轮轮空直接判胜通知 notify
message ByeNotify {}
