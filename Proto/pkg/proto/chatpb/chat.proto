// cs protocol
syntax = "proto3";

package chatpb;
option go_package = "git.woa.com/red/chatsvr/pkg/proto/chatpb";


import "corepb/common.proto";
import "corepb/platform.proto";
import "corepb/fight_common.proto";
import "google/protobuf/any.proto";

service ChatService {
  rpc GetMsgStream(GetMsgStreamRequest) returns (GetMsgStreamReply);
  rpc SendChatV2(ChatV2Request) returns (ChatV2Reply);
  rpc PrivateChatlist(PrivateChatlistRequest) returns (PrivateChatlistReply);
  rpc GetChatInfo(GetChatInfoRequest) returns (GetChatInfoReply);
  rpc UpdateMsgOffset(UpdateMsgOffsetRequest) returns (UpdateMsgOffsetReply);
}

message GetChatInfoRequest {}

message GetChatInfoReply {
  bool is_stranger_private_limit     = 1;  // 当前私聊是否已超限
  int64 stranger_private_expire_time = 2;  // 私聊超限过期时间
}

message ChatPlayer {
  uint64 gid                               = 1;                      // 玩家gid
  string name                              = 2 [deprecated = true];  // 玩家昵称
  string plat_pic                          = 3 [deprecated = true];  // 平台头像
  string openid                            = 4;                      // 玩家openid
  int64 fc                                 = 5;                      // 玩家战斗力
  int64 level                              = 6 [deprecated = true];  // 用户等级
  corepb.DressInfo dress_info              = 7 [deprecated = true];  // 装扮信息
  corepb.RobotInfo robot_info              = 8;                      // 机器人信息
  corepb.OSType os_type                    = 9 [deprecated = true];  // 操作系统类型
  corepb.PersonalDisplayInfo personal_info = 10;                     // 个人显示信息
  bool is_deny_stranger_chat               = 11;                     // 是否拒绝陌生人私聊
}

message Content {
  string text            = 1;  // 聊天内容，由客户端进行编码，交互表情、@、顶、拍一拍等功能均编码进其中。但服务器要进行脏字检查，请保证让玩家输入的文字在这个字段里明文可读
  VoiceContent voice_ctx = 2;  // 语音相关
  repeated int64 at_gids = 3;  // 被@用户，这里只存储用户信息，@消息的实际存储仍然在text中
}

message PlayerPrivateMessage {  // 用户私聊
  ChatPlayer sender   = 1;      // 聊天发送者
  ChatPlayer receiver = 2;      // 聊天接收者
  bool is_friend      = 3;      // 接收者是否是好友
}

message PlayerSceneMessage {       // 用户场景消息，包括冒险、房间、公会等
  ChatPlayer sender          = 1;  // 聊天发送者
  string receiver_group_type = 2;  // 聊天场景类型，:公会、小队、秘境、场景、团本/群组、战区等
  string custom_id           = 3;  // 对应场景下的关联id，公会ID、房间号、场景ID、群组ID等具体的信息。战区消息这个字段填zoneid
  bool is_interact           = 4;  // 是否是交互式对话，场景，房间等大表情，文本都在头顶显示，交互式聊天使用单独的ntf
}

message PlayerZoneMessage {  // 用户大区消息
  ChatPlayer sender = 1;     // 聊天发送者
  int64 zone_id     = 2;     // 发送的大区
}

message PlayerTemplateMessage {
  ChatPlayer sender                     = 1;  // 聊天发送者
  ReceiverGroupType receiver_group_type = 2;  // 聊天场景类型，:公会、小队、秘境、场景、团本/群组等
  string custom_id                      = 3;  // 对应场景下的关联id，公会ID、房间号、场景ID、群组ID等具体的信息
  Restriction restriction               = 4;  // 限制条件
}

message SystemMessage {
  ReceiverGroupType receiver_group_type = 1;  // 聊天场景类型，:公会、小队、秘境、场景、团本/群组等
  string custom_id                      = 2;  // 对应场景下的关联id，公会ID、房间号、场景ID、群组ID等具体的信息
  Restriction restriction               = 3;  // 限制条件
  int64 attach_seq_id                   = 4;  // 系统消息位置
}

message MarqueeMessage {
  MarqueeNotify marquee   = 1;  // 跑马灯配置，普通消息不适用
  Content content         = 2;  // 跑马灯文本
  Restriction restriction = 3;  // 限制条件
}

message ControlMessage {
  int64 gid        = 1;
  int64 begin_time = 2;  // 开始时间戳
  int64 end_time   = 3;  // 结束时间戳
}

message DynamicMessage {
  string dynamic_message_id             = 1;  // 动态消息ID
  string dynamic_message_acronym        = 2;  // 动态消息略缩语
  Restriction restriction               = 3;  // 限制条件
  ReceiverGroupType receiver_group_type = 4;  // 聊天场景类型，:公会、小队、秘境、场景、团本/群组等
  string custom_id                      = 5;  // 对应场景下的关联id，公会ID、房间号、场景ID、群组ID等具体的信息
  ChatPlayer sender                     = 6;  // 聊天发送者
  bool is_expire                        = 7;  // 是否过期
}

message ChatV2Request {
  int64 channel           = 1;  // 消息所在频道
  Content content         = 2;  // 聊天内容，可能是文字或语音
  google.protobuf.Any msg = 3;  // 消息其他信息
}

message ChatV2Reply {
  int64 seq_id     = 1;  // 消息seq
  string unique_id = 2;  // 唯一ID
}

message UpdateMsgOffsetRequest {
  int64 channel    = 1;  // 频道
  string custom_id = 2;  // 频道唯一ID
  int64 offset     = 3;  // 当前offset
}

message UpdateMsgOffsetReply {}

message MessageStreamMeta {
  int64 seq_id      = 1;  // seq_id，用于定位消息
  int64 channel     = 2;  // 拉取消息的频道
  int64 limit       = 3;  // 希望拉取的消息数量
  string unique_id  = 4;  // 拉取消息的唯一ID
  bool with_tmp_msg = 5;  // 是否要拉取频道附带的临时消息
}

message AtMessageInfo {
  int64 seq_id     = 1;  // seq_id，用于定位消息
  int64 channel    = 2;  // 消息所在频道
  string unique_id = 3;  // 消息唯一ID
  int64 sender_gid = 4;  // 消息发送者gid
}

message GetMsgStreamRequest {
  repeated MessageStreamMeta metas = 1;  // 希望拉取的消息频道
}

message GetMsgStreamReply {
  repeated ChatMessage msgs     = 1;  // 所有拉到的消息
  bool has_elder                = 2;  // 是否存在更老的消息
  repeated ChatMessage tmp_msgs = 3;  // 频道附带的临时消息
}

message Restriction {
  repeated int64 level  = 1;  // 等級限制，参数规范：min,max，左闭右闭
  repeated int64 tricks = 2;  // 玩法限制，每个玩法一项，只给开通了个用户
  bool is_silent        = 3;  // 静默限制，只给发送者自己推送
  int64 os_type         = 4;  // 为0不限制，1仅ios，2仅安卓
}

message ChatMessage {
  int64 seq_id            = 1;  // seq_id，用于定位消息
  int64 send_time         = 2;  // 发送时间
  int64 channel           = 3;  // 消息所在频道
  Content content         = 4;  // 聊天内容，可能是文字或语音
  google.protobuf.Any msg = 5;  // 消息其他信息
}

message SingleNoticeMessage {
  int64 channel               = 1;
  int64 current_seq           = 2;
  ChatMessage preview_message = 3;
  int64 last_seq              = 4;
}

message MessasgeNoticeNtf {
  repeated SingleNoticeMessage notices = 1;  // 消息通知
}

message AtMessageNtf {
  repeated AtMessageInfo at_message_list = 1;  // @消息列表
}

message InteractMessageNtf {
  repeated ChatMessage messages = 1;  // 交互消息通知，无需存储，限频全量推送客户端
}

message MarqueeMessageNtf {
  repeated MarqueeMessage messages = 1;  // 游戏内跑马灯公告推送
}

message StrangerPrivateNtf {
  int64 today_chat_count = 1;  // 今日新发起的总私聊数
  int64 expire_time      = 2;  // 过期时间
}

message BulletCurtainChangeNtf {
  bool is_open = 1;  // 是否开启弹幕
}

message PrivateChatlistRequest {
  int64 limit  = 1;
  int64 offset = 2;
}

message PrivateChatlistReply {
  repeated SingleNoticeMessage Messages = 1;
}

message VoiceContent {
  int64 seconds = 1;  // 语音秒数
  bytes voice   = 2;  // 语音key，服务器只做透传
}

message MarqueeNotify {
  int64 marquee_id            = 1;   // 跑马灯id
  int64 recycle_time          = 2;   // 循环间隔，为0不循环
  int64 end_time              = 3;   // 结束展示时间
  repeated int64 channel_list = 4;   // 展示的频道
  int64 priority              = 5;   // 优先级
  float speed                 = 6;   // 滚动速度
  string effect_name          = 7;   // 特效名称
  int64 marquee_type          = 8;   // 跑马灯类型 0:运营跑马灯 1: 系统跑马灯
  repeated int64 zone_ids     = 9;   // 发送的大区，为空为所有大区
  bool only_home              = 10;  // 为true表示只能在主界面显示，如果不在主界面则需要缓存，直到该消息过期（时间超过end_time）
  int64 display_view          = 11;  // 仅在某些场景显示(含义参考Chat.xlsx 枚举MarqueeDisplayViewType)
}

enum EChatMsgType {
  Common   = 0;  // 普通消息
  System   = 1;  // 系统消息
  Dirty    = 2;  // 屏蔽消息
  Template = 3;  // 模板消息
}

enum ReceiverGroupType {
  None    = 0;
  Room    = 1;  // 房间
  Guild   = 2;  // 公会
  Raid    = 3;  // 团本
  Scene   = 4;  // 场景
  Group   = 5;  // 群组
  Private = 6;  // 私聊
  Zone    = 7;  // 大区
  Warzone = 8;  // 战区
  War     = 9;  // 使用 x-warid 路由的业务
}
