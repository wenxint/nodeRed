// cs protocol
syntax = "proto3";

package matchpb;
option go_package = "git.woa.com/red/matchsvr/pkg/proto/matchpb";


import "corepb/fight_common.proto";

//匹配服务
service MatchService {
  //匹配
  rpc TryMatch(TryMatchRequest) returns (TryMatchReply);

  // 取消匹配
  rpc CancelMatch(CancelMatchRequest) returns (CancelMatchReply);
}

enum BusinessType {
  PVP_None                 = 0;   // 未定义
  PVP_JDC                  = 1;   // 决斗场
  PVE_Adventure            = 2;   // 多人冒险
  PVP_1V1_PRACTICE         = 3;   // 练习场1v1
  PVE_JOINT_BATTLE         = 4;   // 同盟协战
  PVP_1V1_CASUAL           = 5;   // 决斗场-娱乐赛
  PVE_SECRET_FIELD         = 6;   // 秘境
  PVP_SEA_WAR              = 7;   // 海战
  PVP_INTREPID_SEAWAR      = 8;   // 活动:无畏海战
  PVP_WOODEN_DUMMY         = 9;   // 活动:木头人挑战
  PVP_BALL_BATTLE          = 10;  // 活动:0040/火爆球赛
  PVE_ACT_TEAM             = 11;  // 类小队玩法（类似活动53）
  PVE_PROTECT_VIVI_SEAWAR  = 12;  // 活动59:护送薇薇(海战)
  PVE_SKYPIEA_GOLDRUSH     = 13;  // 活动61:空岛夺金
  PVP_TREASURE_HUNT_ICESEA = 14;  // 活动:冰海夺宝
  PVP_SEAWAR_OF_THE_YEAR   = 15;  // 活动128:新年海战
  PVP_FAST_DUEL            = 16;  // 活动135:快速单挑
  PVP_BRAWL_ARENA          = 17;  // 活动132:乱斗竞技场
  PVP_BOND_BATTLE          = 18;  // 羁绊挑战赛
}

enum PkType {
  Common = 0;  //普通
  Friend = 1;  //游戏好友pk
  Plat   = 2;  //平台好友pk
  Robot  = 3;  //和机器人pk
};

message MatchInfo {
  BusinessType business_type              = 1;  // 玩法模式
  int64 business_id                       = 2;  // 玩法具体类型
  repeated corepb.FightPlayerInfo players = 3;  // 为兼容同时组队匹配，这里支持多人
  MatchExt extra_info                     = 4;  // 玩法相关的额外匹配数据，匹配使用，不进行透传
  int64 cancel_id                         = 5;  // 取消匹配的id，不填默认为Players[0]的gid
}

message MatchExt {
  // 竞技场-娱乐赛
  message Casual {
    int64 common_hidden_score    = 1;  // 竞技场通用隐藏积分
    int64 robot_match_percentage = 2;  // 机器人匹配概率（万分比）
    repeated int64 recentMatches = 3;  // 最近匹配到的玩家id
    message Buddy {
      int64 id      = 1;
      int64 quality = 2;
    }
    repeated Buddy buddies                = 4;
    repeated int64 blacklist              = 6;  // 黑名单
    bool is_new_player                    = 7;
    int64 fight_cnt                       = 8;
    int64 casual_fight_cnt                = 9;   // 娱乐局场次
    int64 casual_win_cnt                  = 10;  // 娱乐局胜利次数
    int64 score_history                   = 11;  // 历史最高段位分
    map<int64, int64> buddy_used_cnt      = 12;  // 伙伴使用次数
    bool isSimulator                      = 13;  // 是否为模拟器
    bool ever_lost_to_robot_current_score = 14;  // 是否曾输给当前分数的机器人
    bool is_pvp_match_exclude_ai          = 15;  // 是否排除机器人
  }
  // 竞技场-段位赛
  message Ladder {
    int64 score                           = 1;  // 显示分
    int64 hidden_score                    = 2;  // 隐藏分
    int64 robot_match_percentage          = 3;  // 机器人匹配概率（万分比）
    repeated int64 recentMatches          = 4;  // 最近匹配到的玩家id
    repeated int64 blacklist              = 5;  // 黑名单
    bool is_new_player                    = 6;
    int64 total_fight_cnt                 = 7;   // 段位赛总场次（含休赛期）
    int64 total_win_cnt                   = 8;   // 段位赛总胜场（含休赛期）
    map<int64, int64> buddy_used_cnt      = 9;   // 伙伴使用次数
    int64 tag                             = 10;  // 运营给玩家打的tag
    bool isSimulator                      = 11;  // 是否为模拟器
    bool ever_lost_to_robot_current_score = 12;  // 是否曾输给当前分数的机器人
  }
  // 同盟协战
  message JointBattle {
    string room_id           = 1;  // 房间id
    repeated int64 blacklist = 2;  // 黑名单
  }
  // 秘境
  message SecretField {
    int64 game_level             = 1;
    int64 gameplay_id            = 2;
    repeated int64 blacklist     = 3;  // 黑名单
    string room_id               = 4;  // 房间id
    int64 challenge_count        = 5;  // 挑战次数
    bool is_gaming               = 6;  // 是否处在游戏中
    map<int64, int64> win_counts = 7;  // 每个玩家获胜次数
  }
  // 无畏海战
  message IntrepidSeaWar {
    int64 hidden_score = 1;  // 隐藏分
    string room_id     = 2;  // 房间ID（如果有的话
    int64 current_day  = 3;  // 当前日期
  }
  // 木头人挑战
  message WoodenDummy {
    int64 dungeon_id  = 1;  // 副本ID
    int64 current_day = 2;  // 活动天数
  }
  // 火爆球赛
  message BallBattle {
    int64 successive_win = 1;  // 连胜次数
  }

  // 类小队活动
  message ActTeam {
    string room_id = 1;  // 房间id
  }

  // 活动房间通用
  message ActRoom {
    string room_id                      = 1;  // 房间id
    int64 hidden_score                  = 2;  // 隐藏分
    int64 dungeon_id                    = 3;  // 副本ID
    int64 current_day                   = 4;  // 当前日期
    int64 successive_win                = 5;  // 当前连胜
    repeated ActRoomMatchPlayer players = 6;  // 房间玩家匹配信息
  }

  oneof msg {
    Casual casual                   = 1;
    Ladder ladder                   = 2;
    JointBattle joint_battle        = 3;
    SecretField secret_field        = 4;
    IntrepidSeaWar intrepid_sea_war = 5;
    WoodenDummy wooden_dummy        = 6;
    BallBattle ball_battle          = 7;
    ActTeam act_team                = 8;
    ActRoom act_room                = 9;
  }
}

message ActRoomMatchPlayer {
  int64 gid             = 1;  // 玩家id
  int64 hidden_score    = 2;  // 隐藏分
  int64 successive_win  = 3;  // 当前连胜
  int64 successive_lose = 4;  // 当前连败
}

//请求匹配
message TryMatchRequest {
  MatchInfo info = 1;
}

message TryMatchReply {
  int64 expect_second  = 1;  // 预计等待时间
  int64 timeout_second = 2;  // 超时后将玩家剔除等待队列
}

message CancelMatchRequest {
  BusinessType business_type = 1;  // 玩法模式, 用于check
  int64 business_id          = 2;  // 玩法具体类型
}

message CancelMatchReply {}

message RoomInfo {
  string room_id = 1;
}

message FightInfo {
  int64 game_trace_id = 1;
}

message Gameplay {
  oneof Info {
    RoomInfo room_info   = 100;
    FightInfo fight_info = 101;
  }
}

message MatchSuccessNTF {
  BusinessType business_type          = 1;
  int64 business_id                   = 2;
  PkType pk_type                      = 3;
  repeated corepb.FightTeamInfo teams = 4;
  Gameplay gameplay                   = 5;
}

message MatchFailedNTF {
  BusinessType business_type = 1;
  int64 business_id          = 2;
  int64 error_code           = 3;
  string error_msg           = 4;
}
