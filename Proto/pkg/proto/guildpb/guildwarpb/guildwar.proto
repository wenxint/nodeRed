// cs protocol
syntax = "proto3";

package guildpb.guildwarpb;

option go_package = "git.woa.com/red/guildsvr/pkg/proto/guildpb/guildwarpb";

import "corepb/common.proto";
import "corepb/guildwar_common.proto";
import "pkg/proto/guildpb/api.proto";

// 同盟争霸赛服务
service GuildWarService {
  rpc QueryMainInfo(QueryMainInfoRequest) returns (QueryMainInfoReply);              // 查询主界面 (报名界面和对阵图界面都是这个协议，根据阶段不同，显示不同的信息)
  rpc QueryAreaInfo(QueryAreaInfoRequest) returns (QueryAreaInfoReply);              // 查询赛区信息
  rpc QueryScheduleInfo(QueryScheduleInfoRequest) returns (QueryScheduleInfoReply);  // 查询赛程信息
  rpc QueryHistoryInfo(QueryHistoryInfoRequest) returns (QueryHistoryInfoReply);     // 查询历史信息
  rpc QueryRewardInfo(QueryRewardInfoRequest) returns (QueryRewardInfoReply);        // 查询奖励信息， 【可能调整，可暂时不做】
  rpc ReceiveReward(ReceiveRewardRequest) returns (ReceiveRewardReply);              // 领取奖励
  rpc BatchReceiveReward(BatchReceiveRewardRequest) returns (BatchReceiveRewardReply);  // 批量领取奖励
  rpc SignUp(SignUpRequest) returns (SignUpReply);                                      // 报名
  rpc EnterBattleField(EnterBattleFieldRequest) returns (EnterBattleFieldReply);        // 进入战场
  rpc LeaveBattleField(LeaveBattleFieldRequest) returns (LeaveBattleFieldReply);        // 离开战场
  rpc AjustOrder(AjustOrderRequest) returns (AjustOrderReply);                          // 调整顺序
  rpc WatchBattle(WatchBattleRequest) returns (WatchBattleReply);                       // 观战
  rpc BuyWinningStreak(BuyWinningStreakRequest) returns (BuyWinningStreakReply);        // 购买连胜次数
  rpc EatCuisine(EatCuisineRequest) returns (EatCuisineReply);                          // 享用料理
}

message QueryMainInfoRequest {
  int64 phase = 1;  // 期望拉哪个阶段的数据，如果非0，后台会校验一下数据的合法性；如果为0则不校验
}

message ChampionInfo {
  bool cross     = 1;  // true-跨服冠军 false-服内冠军
  int64 guild_id = 2;  // 同盟的id
  string name    = 3;  // 同盟的名字
  int64 zone_id  = 4;  // 所在区
  int64 flag     = 5;  // 同盟旗帜
}

message QueryMainInfoReply {
  // 当前阶段 对应GuildWarPhase
  // 如果当前时间小于phase_begin_time,表示该状态"即将开始"
  // 如果当前时间大于phase_begin_time小于phase_end_time，表示当前状态正在进行中
  // 不会出现当前时间>phase_end_time的情况，如果出现了，建议重新查询一次
  // GWP_OFF_SEASON 为一个特殊的状态，其结束时间为下届比赛的开始时间
  int64 phase                                               = 1;
  int64 season                                              = 2;   // 赛季ID
  bool has_signed_up                                        = 3;   // true-已报名 false-未报名
  int64 phase_begin_time                                    = 4;   // 阶段开始的时间 (倒计时需要自己算)
  int64 phase_end_time                                      = 5;   // 阶段结束的时间 (倒计时需要自己算)
  int64 my_guild_id                                         = 6;   // 玩家自己的guild_id
  repeated corepb.GuildWarGuildDisplayInfo signed_up_guilds = 7;   // 已报名的同盟信息（报名阶段有用, 可以为空）
  repeated corepb.GuildWarGroupInfo groups                  = 8;   // 5个小组的信息（对战的时候有用, 可以为空）
  ChampionInfo champion_info                                = 9;   // 冠军信息
  bool is_loadout_locked                                    = 10;  // 阵容是否已经锁定 true-已锁定，不用再设置阵容  false-未锁定，需要设置阵容
  int64 round_prepare_seconds                               = 11;  // 每轮战斗前的准备时间 真正战斗开始时间=phase_begin_time+round_prepare_seconds
  int64 preheat_days                                        = 12;  // 预热的天数，在下个赛季的报名开始前n天，显示预热界面
  bool valid                                                = 13;  // 数据是否合法，如果返回false，建议客户端等待一段时间以后再拉取
  guildpb.BanquetBuff banquet_buff                          = 14;  // 宴会buff
}

message QueryAreaInfoRequest {}

message ZoneInfo {
  int64 zone_id    = 1;  // 小区id
  string zone_name = 2;  // 小区名字
}

message QueryAreaInfoReply {
  repeated ZoneInfo zones = 1;  // 如果未开启跨服，会为空
}

message QueryScheduleInfoRequest {}

message ScheduleInfo {
  int64 phase      = 1;  // 对应 GuildWarPhase
  int64 begin_time = 2;  // 开始时间
  int64 end_time   = 3;  // 结束时间
}

message QueryScheduleInfoReply {
  int64 season                    = 1;  // 对应的赛季
  repeated ScheduleInfo schedules = 2;  // 如果未开启争霸赛，则显示首届能参与的争霸赛的赛程 （包含休赛期）
}

message GuildWarScheduleInfoNotify {
  int64 season                    = 1;  // 对应的赛季
  repeated ScheduleInfo schedules = 2;  // 如果未开启争霸赛，则显示首届能参与的争霸赛的赛程 （包含休赛期）
  int64 preheat_days              = 3;  // 预热的天数，在下个赛季的报名开始前n天，显示预热界面
}

message HistoryRecord {
  int64 season                                        = 1;  // 届数
  corepb.GuildWarGuildDisplayInfo gold_medal_winner   = 2;  // 冠军的信息
  corepb.GuildWarGuildDisplayInfo silver_medal_winner = 3;  // 亚军的信息
}

message CurrentRecord {
  int64 phase                                 = 1;  // 对应 GuildWarPhase
  bool win_flag                               = 2;  // true-左边胜右边 false-左边负右边
  corepb.GuildWarGuildDisplayInfo left_guild  = 3;  // 左边的同盟
  corepb.GuildWarGuildDisplayInfo right_guild = 4;  // 右边的同盟
}

message QueryHistoryInfoRequest {}
message QueryHistoryInfoReply {
  repeated HistoryRecord inner_records   = 1;  // 服内的记录
  repeated HistoryRecord cross_records   = 2;  // 跨服的记录
  repeated CurrentRecord current_records = 3;  // 当前战况
}

message QueryRewardInfoRequest {}

enum RewardStatus {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  UNDONE    = 0;  // 不可领奖
  AVAILABLE = 1;  // 可领奖
  RECEIVED  = 2;  // 已领奖
}

message RewardInfo {
  int64 id                   = 1;  // 奖励的id
  string title               = 2;  // 标题
  string desc                = 3;  // 描述
  RewardStatus status        = 4;  // 奖励状态
  repeated corepb.Item items = 5;  // 奖励的道具列表
}
message QueryRewardInfoReply {
  repeated RewardInfo inner_rewards = 1;  // 服内奖励信息
  repeated RewardInfo cross_rewards = 2;  // 跨服奖励信息
}

message ReceiveRewardRequest {
  int64 reward_id = 1;  // 奖励的id
}

message ReceiveRewardReply {
  RewardInfo reward_info           = 1;  // 奖励详情
  repeated corepb.Item award_items = 2;  // 领取到的奖励详情（合并）
}

message BatchReceiveRewardRequest {
  int64 reward_id = 1;  // 奖励的id，点击一个奖励，可以领取页签下所有奖励
}

message BatchReceiveRewardReply {
  repeated RewardInfo rewards      = 1;  // 变化的奖励列表详情
  repeated corepb.Item award_items = 2;  // 领取到的奖励详情（合并）
}

message SignUpRequest {}

message SignUpReply {}

message EnterBattleFieldRequest {
  bool auto_flag = 1;  // 是否倒计时结束后自动进场
}

message EnterBattleFieldReply {
  corepb.GuildWarGuildFightInfo left_guild  = 1;  // 左边的同盟【蓝】  自己的信息可以从GuildWarPlayerFightInfo中获取
  corepb.GuildWarGuildFightInfo right_guild = 2;  // 右边的同盟【红】
  int64 atime_ns                            = 3;  // 访问时间，用于与Notify比较先后
  bool first_flag                           = 4;  // true-首次进入战场
}

message AjustOrderRequest {
  int64 order_version       = 1;  // 请填入corepb.GuildWarGuildFightInfo中的order_version
  repeated int64 gids       = 2;  // 调整后的出战成员顺序
  repeated int64 alternates = 3;  // 调整后的候补成员顺序
}

message LeaveBattleFieldRequest {}

message LeaveBattleFieldReply {}

message AjustOrderReply {}

message WatchBattleRequest {
  int64 fighting_gid = 1;  // 正在观战的玩家
}

message WatchBattleReply {
  string x_ob_id      = 1;  // 用于连接观战服(obsvr)的路由id
  int64 game_trace_id = 2;  // 战斗的唯一id
}

message BuyWinningStreakRequest {}

message BuyWinningStreakReply {
  int64 owned_winning_streak_count = 1;  // 当前拥有的连胜次数
}

message EatCuisineRequest {
  int64 cuisine_id = 1;  // 料理id
}

message EatCuisineReply {}
