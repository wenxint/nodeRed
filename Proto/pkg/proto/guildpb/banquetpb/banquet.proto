// cs protocol
syntax = "proto3";

package guildpb.banquetpb;

option go_package = "git.woa.com/red/guildsvr/pkg/proto/guildpb/banquetpb";

import "corepb/common.proto";
import "pkg/proto/guildpb/api.proto";

// 同盟宴会
service GuildBanquetService {
  rpc QueryStateInfo(QueryStateInfoRequest) returns (QueryStateInfoReply);                                               // 查询宴会状态信息，点击厨师NPC查一次
  rpc Donate(DonateRequest) returns (DonateReply);                                                                       // 捐献料理或金币
  rpc QuerySceneInfo(QuerySceneInfoRequest) returns (QuerySceneInfoReply);                                               // 查询宴会场景信息，在进同盟场景时查一次
  rpc EatCuisine(EatCuisineRequest) returns (EatCuisineReply);                                                           // 食用料理
  rpc Recruit(RecruitRequest) returns (RecruitReply);                                                                    // 招募
  rpc QueryHoldTimeOptions(QueryHoldTimeOptionsRequest) returns (QueryHoldTimeOptionsReply);                             // 查询举办时间选项
  rpc ChooseHoldTime(ChooseHoldTimeRequest) returns (ChooseHoldTimeReply);                                               // 选择举办时间
  rpc QueryDonateRecord(QueryDonateRecordRequest) returns (QueryDonateRecordReply);                                      // 查询捐献记录
  rpc ConfirmGuildActCalendarNotify(ConfirmGuildActCalendarNotifyRequest) returns (ConfirmGuildActCalendarNotifyReply);  // 确认看到了活动日历
  rpc ReadWelcomeLetter(ReadWelcomeLetterRequest) returns (ReadWelcomeLetterReply);                                      // 读欢迎信
}

// 宴会升级提示，在查询回包里给玩家，弹框显示
message BanquetUpgradePrompt {
  int64 old_level = 1;  // 旧的等级
  int64 new_level = 2;  // 新的等级
}

enum BanquetState {
  BS_UNKNOWN   = 0;  // 筹备阶段
  BS_HOLD_FAIL = 1;  // 举办失败
  BS_HOLD_SUCC = 2;  // 举办成功
}

message QueryStateInfoRequest {
  int64 from = 1;  // 0-宴会系统 1-厨房系统
}

message DonateInfo {
  repeated corepb.Item donate_rewards = 1;  // 捐献奖励
  int64 donated_count                 = 2;  // 已捐献次数
  int64 weekly_donate_count_limit     = 3;  // 最多可以捐献的次数
}

message QueryStateInfoReply {
  int64 state                       = 1;  // 0-筹备阶段 1-举办失败 2-举办阶段
  int64 hold_weekday                = 2;  // 举办的星期几 0~6
  int64 hold_begin_time             = 3;  // 举办开始时间，亦即筹备结束时间
  int64 hold_end_time               = 4;  // 举办结束时间
  int64 level                       = 5;  // 当前等级
  int64 max_level                   = 6;  // 最大等级
  int64 donated_cuisine_count       = 7;  // 当前等级下已捐献的料理个数
  int64 max_cuisine_count           = 8;  // 当前等级下最大捐献料理个数
  repeated corepb.Item join_rewards = 9;  // 参与奖励
  // repeated corepb.Item donate_rewards = 10;  // 捐献奖励
  BanquetUpgradePrompt upgrade_prompt = 11;  //  非空有升级提示，否则没有升级提示
  // map<int64, int64> donate_cuisines   = 12;  // 玩家已经捐献的料理及其个数（目前每个料理只能捐献一个）
  int64 guild_level                = 13;  // 返回同盟等级
  map<int64, DonateInfo> donates   = 14;  // 捐献信息
  guildpb.BanquetBuff banquet_buff = 15;  // 宴会buff
  int64 leader_id                  = 16;  // 团长的gid
  int64 join_guild_time            = 17;  // 玩家加入同盟时间
}

message DonateRequest {
  int64 level = 1;  // 【废弃不用】
  bool snack  = 2;  // 为true表示加餐，否则表示普通捐献
}

message DonateReply {
  repeated corepb.Item rewards         = 1;  // 捐献后获得的奖励
  BanquetUpgradePrompt upgrade_promote = 2;  // 如果有升级，会发升级的提示; 为空表示没有升级信息
}

message BanquetWelcomeInfo {
  string detail = 1;  // 显示信息
}

enum TableCuisineState {
  TCS_UNKNOWN = 0;  // 默认值，有菜
  TCS_CD      = 1;  // 被食用cd中
  TCS_EATED   = 2;  // 已食用
}

message BanquetTable {
  int64 id            = 1;  // 桌子的id
  int64 cuisine_id    = 2;  // 宴会料理的ID 为0表示没有上料理
  int64 cuisine_count = 3;  // 宴会料理的个数
  int64 cd_end_time   = 4;  // 如果当前时间小于这个时间表示在CD中，否则则不在CD中
}

message BanquetSceneInfo {
  int64 state                     = 1;  // 0-筹备阶段，此时不需要切场景 1-举办失败，此时不需要切场景 2-举办阶段，此时需要切宴会场景
  bool first_enter_flag           = 2;  // true-表示首次进入宴会场景，需要欢迎界面
  BanquetWelcomeInfo welcome_info = 3;  // 欢迎信息
  int64 hold_begin_time           = 4;  // 举办开始时间
  int64 hold_end_time             = 5;  // 举办结束时间
  repeated BanquetTable tables    = 6;  // 桌子
  int64 eated_count               = 7;  // 已经食用的个数
  int64 level                     = 8;  // 宴会等级
}

message QuerySceneInfoRequest {}
message QuerySceneInfoReply {
  BanquetSceneInfo scene_info = 1;  // 场景信息
}

// 如果玩家在同盟场景中，宴会开启了会发这个通知玩家切场景
message SwitchBanquetSceneNotify {
  BanquetSceneInfo scene_info = 1;  // 场景信息
}

message EatCuisineRequest {
  int64 id = 1;  // 桌子的id
}

message EatCuisineReply {
  int64 eated_count            = 1;  // 已经食用的个数
  repeated corepb.Item rewards = 2;  // 获得的奖励
}

message RecruitRequest {}
message RecruitReply {}

// 发召集以后的通知包
message BanquetRecruitNotify {
  corepb.PersonalDisplayInfo from_personal_info = 1;
}

// 玩家进场景以后的通知包 （弹幕显示）
message BanquetWelcomeNotify {
  corepb.PersonalDisplayInfo from_personal_info = 1;
}

// 桌子的状态信息下发
message TableStateNotify {
  repeated BanquetTable tables = 1;  // 桌子
}

// 宴会等级升级通知
message BanquetLevelUpgradeNotify {
  int64 level = 1;  // 宴会等级，不要用这个通知直接弹宴会升级的表现，否则发QueryStateInfo时会再弹一次；建议收到该通知后直接QueryStateInfo一下。
}

message StandardTime {
  int64 hour   = 1;  // 小时
  int64 minute = 2;  // 分钟
  int64 second = 3;  // 秒数
}

message HoldTimeOption {
  int64 id                = 1;  // 宴会时间配置id
  int64 week_day          = 2;  // 周几
  StandardTime begin_time = 3;  // 开始时间
  StandardTime end_time   = 4;  // 结束时间
  bool recommend          = 5;  // 推荐标记
  bool chosed             = 6;  // 是否已选中
}

message GuildActCalendar {
  string name             = 1;  // 活动名
  int64 week_day          = 2;  // 周几
  StandardTime begin_time = 3;  // 开始时间
  StandardTime end_time   = 4;  // 结束时间
  int64 begin_time_unix   = 5;  // 开始时间(时间戳)
  int64 end_time_unix     = 6;  // 结束时间(时间戳)
}

message QueryHoldTimeOptionsRequest {}
message QueryHoldTimeOptionsReply {
  repeated HoldTimeOption options = 1;  // 宴会时间选项
  repeated GuildActCalendar acts  = 2;  // 活动日程表
  int64 last_confirm_time         = 3;  // 最后确定时间, 超过了该时间不再显示选择界面
  int64 next_refresh_time         = 4;  // 下次刷新时间
}

message ChooseHoldTimeRequest {
  int64 id = 1;  // 选项id
}

message ChooseHoldTimeReply {}

// 活动日程表通知
message GuildActCalendarNotify {
  repeated GuildActCalendar acts = 1;  // 活动日程表
}

message QueryDonateRecordRequest {}

message DonateRecord {
  int64 gid         = 1;  // 玩家id
  string role_name  = 2;  // 玩家名字
  int64 donate_time = 3;  // 捐献时间
  int64 cuisine_id  = 4;  // 捐献的料理id
}

message QueryDonateRecordReply {
  repeated DonateRecord records = 1;  // 捐献记录
}

message ConfirmGuildActCalendarNotifyRequest {}
message ConfirmGuildActCalendarNotifyReply {}

message ReadWelcomeLetterRequest {}
message ReadWelcomeLetterReply {}