
// cs protocol
syntax = "proto3";

package actpb.act0185pb;
option go_package = "git.woa.com/red/actsvr/pkg/proto/actpb/act0185pb";

import "corepb/common.proto";
import "corepb/loadout_comm.proto";
import "corepb/guildwar_stampede.proto";

service CSAct0185Service {

  // 开始匹配
  rpc StartMatch(StartMatchRequest) returns (StartMatchReply);
  // 取消匹配
  rpc CancelMatch(CancelMatchRequest) returns (CancelMatchReply);

  // 获取阵容信息
  rpc LoadoutInfo(LoadoutInfoRequest) returns (LoadoutInfoReply);
  // 设置阵容
  rpc ApplyLoadout(ApplyLoadoutRequest) returns (ApplyLoadoutReply);
  // 获取仓库信息
  rpc StoreHouseInfo(StoreHouseInfoRequest) returns (StoreHouseInfoReply);
  // 操作仓库
  rpc ApplyStoreHouse(ApplyStoreHouseRequest) returns (ApplyStoreHouseReply);
  // 交易行购买信息
  rpc TradingHouseBuysInfo(TradingHouseBuysInfoRequest) returns (TradingHouseBuysInfoReply);
  // 交易行出售信息
  rpc TradingHouseSellsInfo(TradingHouseSellsInfoRequest) returns (TradingHouseSellsInfoReply);
  // 交易行单个道具信息
  rpc TradingItemInfo(TradingItemInfoRequest) returns (TradingItemInfoReply);
  // 交易行操作单个道具
  rpc OperateTradingItem(OperateTradingItemRequest) returns (OperateTradingItemReply);
  // 操作单个出售道具
  rpc OperateSellItem(OperateSellItemRequest) returns (OperateSellItemReply);

  // 局外任务协议
  rpc GetTaskDetail(GetTaskDetailRequest) returns (GetTaskDetailReply);
  // 领取任务奖励
  rpc ClaimTaskReward(ClaimTaskRewardRequest) returns (ClaimTaskRewardReply);
  // 接受任务
  rpc AcceptTask(AcceptTaskRequest) returns (AcceptTaskReply);

  // 查询设施信息
  rpc GetFacilitiesInfo(GetFacilitiesInfoRequest) returns (GetFacilitiesInfoReply);
  // 升级设施
  rpc UpgradeFacility(UpgradeFacilityRequest) returns (UpgradeFacilityReply);
}

message AcceptTaskRequest {
  int64 id = 1;  // 任务 ID
}

message AcceptTaskReply {
  repeated TaskDetail task_details = 1;  // 任务详情
}

message ClaimTaskRewardRequest {
  int64 id = 1;  // 任务 ID
}

message ClaimTaskRewardReply {
  repeated corepb.Item rewards     = 1;  // 领取到的奖励
  repeated TaskDetail task_details = 2;  // 任务详情
}

message GetTaskDetailRequest {}

message TaskDetail {
  int64 id     = 1;  // 任务 ID
  int64 status = 2;  // 任务状态 (1: 未接取, 2: 已接取, 3: 已完成, 4: 已领取奖励)
  message TaskConditionProgress {
    int64 progress       = 1;  // 任务进度
    int64 required_count = 2;  // 任务要求数量
  }
  repeated TaskConditionProgress task_condition_progress = 3;  // 多个任务条件进度
  repeated corepb.Item rewards                           = 4;  // 任务奖励
  int64 belong_to_big_map_id                             = 5;  // 任务所属大图 ID
  int64 belong_to_npc_id                                 = 6;  // 任务所属 NPC ID
}

message GetTaskDetailReply {
  repeated TaskDetail task_details = 1;  // 任务详情
  repeated NpcDetail npc_details   = 2;  // NPC 详情
}

message NpcDetail {
  int64 id                        = 1;  // NPC ID
  int64 required_reputation_level = 2;  // NPC 声望等级要求
}

// StartMatch

message StartMatchRequest {
  int64 big_map_id = 1;  // 大图 ID
}

message StartMatchReply {
  int64 timeout_seconds   = 1;  // 匹配超时时间
  int64 estimated_seconds = 2;  // 预计匹配时间
}

// CancelMatch

message CancelMatchRequest {
  int64 big_map_id = 1;  // 大图 ID
}

message CancelMatchReply {}

message ActGetDetailRequest {}

message LevelDetail {
  int64 level_id                   = 1;  // 关卡 ID
  int64 level_value                = 2;  // 关卡价值
  int64 required_reputation_level  = 3;  // 声望等级要求
  int64 required_equipment_value   = 4;  // 装备价值要求
  int64 equipment_quality_limit    = 5;  // 装备品质限制（0表示没有限制）
  corepb.Item required_ticket_item = 6;  // 所需要门票道具
}

message CommonInfo {
  corepb.Item basic_item = 1;  // 夺宝货币道具（用于购买装备，门票等等）
  int64 equipment_value  = 2;  // 装备价值
  int64 reputation_level = 3;  // 玩家声望
  int64 bag_size         = 4;  // 背包大小
  int64 bag_weight       = 5;  // 背包重量
}

message ActGetDetailReply {
  int64 buddy_id                     = 1;  // 伙伴 ID
  CommonInfo common_info             = 2;  // 基本信息
  repeated LevelDetail level_details = 3;  // 关卡详细信息
}

message LoadoutInfoRequest {
  string loadout_type = 1;  // 阵容类型，目前直接传 "act0185_loadout"
}

message ShopItem {
  corepb.StampedeItem award_item = 1;  // 获得道具
  corepb.Item cost_item          = 2;  // 花费道具（夺宝货币，不需要ActItem里的那些信息）
}

message LoadoutInfoReply {
  CommonInfo common_info                   = 1;  // 基本信息
  int64 required_equipment_value           = 2;  // 装备价值要求
  corepb.LoadoutProfile profile            = 3;  // 阵容配置
  corepb.Loadout loadout                   = 4;  // 阵容
  repeated corepb.StampedeItem store_items = 5;  // 仓库中道具信息
  repeated ShopItem shop_items             = 6;  // 出售道具信息
}

message ApplyLoadoutRequest {
  corepb.Loadout loadout                   = 1;  // 阵容
  repeated corepb.StampedeItem apply_items = 2;  // 道具列表
}

message ApplyLoadoutReply {}

message StoreHouseInfoRequest {}

message StoreHouseInfoReply {
  CommonInfo common_info                   = 1;  // 基本信息
  corepb.Loadout loadout                   = 2;  // 阵容
  repeated corepb.StampedeItem store_items = 3;  // 仓库中道具信息
}

message ApplyStoreHouseRequest {
  repeated corepb.StampedeItem apply_items = 1;  // 道具列表
}

message ApplyStoreHouseReply {
  CommonInfo common_info                   = 1;  // 基本信息
  corepb.Loadout loadout                   = 2;  // 阵容
  repeated corepb.StampedeItem store_items = 3;  // 仓库中道具信息
}

message ItemChangedNtf {
  map<int64, corepb.Item> items = 1;  // 变更的道具列表
}

message TradingStatusChangedNtf {}

message TradingHouseBuysInfoRequest {}

message TradingHouseBuysInfoReply {
  CommonInfo common_info                 = 1;  // 基本信息
  repeated corepb.StampedeItem buy_items = 2;  // 正在出售的道具
}

message TradingHouseSellsInfoRequest {}

message TradingSlot {
  int64 slot_id                              = 1;  // 上架槽位 ID
  repeated corepb.StampedeItem trading_items = 2;  // 上架位道具
}

message TradingHouseSellsInfoReply {
  int64 trading_item_size                  = 1;  // 当前上架道具数量
  int64 trading_item_limit                 = 2;  // 上架道具数量限制
  CommonInfo common_info                   = 3;  // 基本信息
  repeated corepb.StampedeItem store_items = 4;  // 仓库中道具信息
  repeated TradingSlot trading_slots       = 5;  // 上架槽位信息
  bool can_receive_reward                  = 6;  // 是否可以领取出售奖励
}

message TradingItemInfoRequest {
  corepb.StampedeItem trading_item = 1;  // 单个交易道具
}

message TradingItemInfoReply {
  int64 recycling_price                            = 1;  // 系统回收价格
  repeated corepb.StampedeItem trading_item_detail = 2;  // 单个交易道具所有档位详细信息
}

enum OpTradingType {
  OP_TRADING_TYPE_UNKNOWN = 0;  // 未知类型
  OP_TRADING_TYPE_SELL    = 1;  // 出售
  OP_TRADING_TYPE_BUY     = 2;  // 购买
  OP_TRADING_TYPE_RECYCLE = 3;  // 系统回收
}

message OperateTradingItemRequest {
  OpTradingType op_type            = 1;  // 操作类型
  corepb.StampedeItem trading_item = 2;  // 交易道具
}

message OperateTradingItemReply {
  int64 succ_op_count = 1;  // 成功操作道具数量
}

enum OpSellType {
  OP_SELL_TYPE_UNKNOWN = 0;  // 未知类型
  OP_SELL_TYPE_REMOVE  = 1;  // 下架
  OP_SELL_TYPE_RELIST  = 2;  // 过期重新上架
  OP_SELL_TYPE_REWARD  = 3;  // 领取已售出奖励
}

message OperateSellItemRequest {
  OpSellType op_type = 1;  // 操作类型
  int64 slot_id      = 2;  // 上架槽位 ID
}

message OperateSellItemReply {
  repeated corepb.Item rewards             = 1;  // 领取到的奖励
  CommonInfo common_info                   = 2;  // 基本信息
  repeated corepb.StampedeItem store_items = 3;  // 仓库中道具信息
  repeated TradingSlot trading_slots       = 4;  // 上架槽位信息
}

message GetFacilitiesInfoRequest {}

message FacilityInfo {
  int64 id                        = 1;  // 设施 ID
  int64 cur_level                 = 2;  // 当前等级 0 表示未解锁
  int64 max_level                 = 3;  // 最大等级
  repeated corepb.Item cost_items = 4;  // 升级所需道具
}

message GetFacilitiesInfoReply {
  repeated FacilityInfo facilities = 1;  // 设施信息
}

message UpgradeFacilityRequest {
  int64 facility_id = 1;  // 设施 ID
}

message UpgradeFacilityReply {
  FacilityInfo facility_info = 1;  // 设施信息
}