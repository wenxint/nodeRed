// cs protocol
syntax = "proto3";

package actpb.act0075pb;
option go_package = "git.woa.com/red/actsvr/pkg/proto/actpb/act0075pb";

import "corepb/loadout_comm.proto";
import "corepb/fight_common.proto";
import "pkg/proto/actpb/commonpb/common.proto";

message ActGetDetailRequest {}

message ActGetDetailReply {
  int64 current_day                  = 1;  // 当前进行天数
  map<int64, Quest> quests           = 2;  // 关卡信息：关卡 ID -> 信息
  repeated actpb.commonpb.Task tasks = 3;  // 所有任务详细信息
  string rank_instance               = 4;  // 排行榜实例
  int64 rank                         = 5;  // 排名，0 表示未上榜
}

message Quest {
  bool unlocked     = 1;  // 是否解锁
  bool completed    = 2;  // 是否通关
  bool new          = 3;  // 是否新
  int64 score       = 4;  // 分数
  int64 duration_ms = 5;  // 通关用时，单位毫秒
}

service CSAct0075Service {
  rpc GameStart(GameStartRequest) returns (GameStartReply);     // 开战
  rpc GameEnd(GameEndRequest) returns (GameEndReply);           // 结算
  rpc TouchQuest(TouchQuestRequest) returns (TouchQuestReply);  // 点击关卡

  // 阵容协议复刻

  rpc LoadoutInfo(LoadoutInfoRequest) returns (LoadoutInfoReply);     // 获取阵容信息
  rpc ApplyLoadout(ApplyLoadoutRequest) returns (ApplyLoadoutReply);  // 设置阵容
}

message GameStartRequest {
  int64 quest_id = 1;  // 关卡 ID
}

message GameStartReply {
  corepb.GameStartMessage start_msg = 1;
}

message GameEndRequest {
  int64 quest_id                = 1;  // 关卡 Quest ID
  corepb.FightResultType result = 2;  // 战斗结果
  int32 reason                  = 3;  // 结算原因:EGameResultReason
  int64 score                   = 4;  // 评分上报
  int64 duration_ms             = 5;  // 通关用时上报，单位毫秒
  bytes dungeon_record_bytes    = 6;  // 战斗对局数据，校验用
}

message GameEndReply {
  corepb.GameOverMessage over_message = 1;
  int64 this_score                    = 2;  // 当次的评分
  int64 previous_score                = 3;  // 之前的评分
  int64 this_duration_ms              = 4;  // 当次通关用时，单位毫秒
  int64 previous_duration_ms          = 5;  // 之前通关用时，单位毫秒
}

message TouchQuestRequest {
  int64 quest_id = 1;  // 关卡 Quest ID
}

message TouchQuestReply {}

// LoadoutInfo

message LoadoutInfoRequest {
  string loadout_type = 1;  // 阵容类型。具体有哪些值由玩法系统确定
}

message LoadoutInfoReply {
  corepb.LoadoutProfile profile = 1;  // 阵容配置
  corepb.Loadout loadout        = 2;  // 阵容
  bool valid                    = 3;  // 当前阵容是否合法
  bool adjusted                 = 4;  // 当前阵容检验时是否有过不合法的项目但已经被自动调整
}

// ApplyLoadout

message ApplyLoadoutRequest {
  string loadout_type    = 1;  // 阵容类型。具体有哪些值由玩法系统确定
  corepb.Loadout loadout = 2;  // 阵容
}

message ApplyLoadoutReply {
  // 若要设置的阵容不合法，会通过 rpc 错误告知。
}