// cs protocol
syntax = "proto3";

package actpb.act0141pb;
option go_package = "git.woa.com/red/actsvr/pkg/proto/actpb/act0141pb";

import "pkg/proto/actpb/commonpb/common.proto";

import "corepb/loadout_comm.proto";

message ActGetDetailRequest {}

message ActGetDetailReply {
  int64 match_start_clock  = 1;  // 可匹配开始时间，格式 HHMM 比如 0930
  int64 match_end_clock    = 2;  // 可匹配结束时间，格式 HHMM 比如 2400
  int64 match_count        = 3;  // 对局数
  int64 rank_1_match_count = 4;  // 第一名对局数
  int64 rank_2_match_count = 5;  // 第二名对局数
  int64 rank_3_match_count = 6;  // 第三名对局数
  // int64 estimated_current_match_end_at = 7;  // 当前对局预计结束时间(unix 秒级)
  int64 today_win_count                                         = 8;  // 今日胜场数
  actpb.commonpb.PvpTaskProgressConfig pvp_task_progress_config = 9;  // pvp任务进度配置
}

service CSAct0141Service {

  // 开始匹配
  rpc StartMatch(StartMatchRequest) returns (StartMatchReply);
  // 取消匹配
  rpc CancelMatch(CancelMatchRequest) returns (CancelMatchReply);

  // 阵容协议复刻

  rpc LoadoutInfo(LoadoutInfoRequest) returns (LoadoutInfoReply);     // 获取阵容信息
  rpc ApplyLoadout(ApplyLoadoutRequest) returns (ApplyLoadoutReply);  // 设置阵容
}

// StartMatch

message StartMatchRequest {}

message StartMatchReply {
  int64 estimated_seconds = 1;
  int64 timeout_seconds   = 2;
}

// CancelMatch

message CancelMatchRequest {}

message CancelMatchReply {}

// LoadoutInfo

message LoadoutInfoRequest {
  string loadout_type = 1;  // 阵容类型。具体有哪些值由玩法系统确定
}

message LoadoutInfoReply {
  corepb.LoadoutProfile profile = 1;  // 阵容配置
  corepb.Loadout loadout        = 2;  // 阵容
  bool valid                    = 3;  // 当前阵容是否合法
  bool adjusted                 = 4;  // 当前阵容检验时是否有过不合法的项目但已经被自动调整
}

// ApplyLoadout

message ApplyLoadoutRequest {
  string loadout_type    = 1;  // 阵容类型。具体有哪些值由玩法系统确定
  corepb.Loadout loadout = 2;  // 阵容
}

message ApplyLoadoutReply {
  // 若要设置的阵容不合法，会通过 rpc 错误告知。
}