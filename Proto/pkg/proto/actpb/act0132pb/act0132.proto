// cs protocol
syntax = "proto3";

package actpb.act0132pb;
option go_package = "git.woa.com/red/actsvr/pkg/proto/actpb/act0132pb";

import "pkg/proto/actpb/commonpb/common.proto";

import "corepb/fight_common.proto";

// CSAct0132Service 乱斗竞技场活动服务
service CSAct0132Service {

  // 战报
  rpc FightReporters(FightReportersRequest) returns (FightReportersReply);
  // 取消今日提示
  rpc CancelTips(CancelTipsRequest) returns (CancelTipsReply);
}

// ActGetDetailRequest 活动详情请求信息
message ActGetDetailRequest {}

// ActGetDetailReply 活动详情响应信息
message ActGetDetailReply {
  int64 win_counts                                              = 1;   // 胜利次数
  int64 total_counts                                            = 2;   // 总次数
  actpb.commonpb.PvpTaskProgressConfig pvp_task_progress_config = 3;   // pvp任务进度配置
  int64 game_type                                               = 4;   // 玩法类型
  int64 fight_type                                              = 5;   // 战斗类型
  int64 business_type                                           = 6;   // 匹配类型
  int64 business_id                                             = 7;   // 匹配ID
  string loadout_type                                           = 8;   // 阵容类型
  bool is_confirm_tips                                          = 9;   // 当日是否确认过玩法提示
  int64 match_begin_time                                        = 10;  // 匹配开启时间点（24小时制）
  int64 match_end_time                                          = 11;  // 匹配结束时间点（24小时制）
}

message PlayerInfo {
  int64 gid                            = 1;  // 玩家 Gid
  corepb.FightDisplayInfo display_info = 2;  // 展示信息
  int64 buddy_id                       = 3;  // 伙伴 ID
  int64 dial_id                        = 4;  // 空岛贝 ID
}

message FightReporter {
  PlayerInfo my_info            = 1;  // 我的基本信息
  PlayerInfo rival_info         = 2;  // 对方基本信息
  corepb.FightResultType result = 3;  // 战斗结果
  int64 battle_time             = 4;  // 战斗时间
  uint64 game_trace_id          = 5;  // game trace id
  int64 game_type               = 6;  // 玩法类型
}

message FightReportersRequest {}

message FightReportersReply {
  repeated FightReporter fight_reporters = 1;  // 战报列表
}

message CancelTipsRequest {}

message CancelTipsReply {}

message GameOverMsgCustomData {
  map<int64, int64> hidden_score = 1;  // 双方隐藏分
}
