// cs protocol
syntax = "proto3";

package actpb.act0032pb;
option go_package = "git.woa.com/red/actsvr/pkg/proto/actpb/act0032pb";

import "corepb/common.proto";
import "pkg/proto/actpb/commonpb/common.proto";

// CSAct0032Service 奖励领取服务
service CSAct0032Service {
  // GameBegin 进入躲避球游戏(获取地图布局).
  rpc GameBegin(GameBeginRequest) returns (GameBeginReply);
  // GameStateReport 关卡通关的状态上报(只上报成功状态).
  rpc GameStateReport(GameStateReportRequest) returns (GameStateReportReply);
  // Levels 关卡列表.
  rpc Levels(LevelsRequest) returns (LevelsReply);
  // 获取玩家当前的任务列表.
  rpc Tasks(TasksRequest) returns (TasksReply);
  // QuickBuy 商品快捷购买.
  rpc QuickBuy(QuickBuyRequest) returns (QuickBuyReply);
}

// ActGetDetailRequest 活动详情请求信息
message ActGetDetailRequest {}

// ActGetDetailReply 活动详情响应信息
message ActGetDetailReply {
  bool exist_task_unreward   = 1;  // 是否有奖励领取
  bool exist_level_animation = 2;  //  关卡是否有动画播放
}

// LevelsRequest 关卡列表请求.
message LevelsRequest {}

// LevelsReply 关卡列表响应.
message LevelsReply {
  repeated Level levels = 1;  // 关卡列表
}

// Level 关卡详情.
message Level {
  int64 id                      = 1;  // 关卡ID
  LevelStatus status            = 2;  // 关卡解锁状态：1:未解锁；2: 已解锁; 3:已完成
  int64 order                   = 3;  // 关卡顺序.
  int64 prev_level_id           = 4;  // 前置关卡ID
  int64 unlock_time             = 5;  // 解锁时间戳
  bool need_play_animation      = 6;  // 需要播放动画
  int64 finished_min_ball_count = 7;  // 通过本关使用钢球最少的次数(0：不用暂时).
  int64 limit_buy_count         = 8;  // 限制购买次数
  repeated corepb.Item items    = 9;  // 购买所消耗的道具列表
}

enum LevelStatus {
  LEVELSTATUS_UNKNOWN = 0;
  LOCKED              = 1;  // 未解锁
  UNLOCKED            = 2;  // 已解锁
  FINISHED            = 3;  // 已通关
}

// TasksRequest 任务列表请求.
message TasksRequest {}

// TasksRequest 任务列表响应信息.
message TasksReply {
  repeated actpb.commonpb.Task tasks = 1;  // 所有任务详细信息
}

// GameBeginRequest 开启进入游戏的请求信息.
message GameBeginRequest {
  int64 level_id = 1;  // 关卡ID
}

// GameBeginReply 开启进入游戏的响应信息, 包括上一次玩家退出活动游戏时的状态.
message GameBeginReply {
  PlayerGameInfo play_game_info = 1;  // 玩家的游戏数据.
}

// GameStateReportRequest 游戏状态同步的请求信息;
message GameStateReportRequest {
  int64 level_id   = 1;  // 当前关卡ID.
  bool passed      = 2;  // 当前关卡已通过;
  int64 ball_count = 3;  // 本次过关消耗的钢球数
}

// GameStateReportReply 玩家游戏状态同步的响应信息.
message GameStateReportReply {
  reserved 1;
  // PlayerGameInfo play_game_info = 1;  // 下一关玩家的游戏数据.
  int64 next_level_id = 2;  // 下一关卡ID
}

// QuickBuyRequest 快捷购买请求
message QuickBuyRequest {
  int64 level_id = 1;  // 关卡ID;
  int64 buy_cnt  = 2;  // 购买数量.
}

// QuickBuyReply 快捷购买响应信息.
message QuickBuyReply {
  repeated corepb.Item rewards = 1;  // 实际获得的物品
}

// PlayerGameInfo 玩家的游戏数据, 包括地图和玩家数据
message PlayerGameInfo {
  int64 level_id      = 1;                      // 当前关卡ID.
  MapInfo map         = 2;                      // 地图数据
  int64 score         = 3 [deprecated = true];  // 玩家累计积分
  int64 batting_count = 4;                      // 玩家可击球次数.
  int64 bought_count  = 5;                      // 玩家已购买躲避球道具数量.
}

message MapInfo {
  DodgeBallInfo dodgeball    = 1;  // 躲避球位置.
  repeated BuddyInfo buddies = 2;  // 伙伴元素列表.
  repeated ItemInfo items    = 3;  // 碰撞特殊道具元素列表.
}

// BuddyInfo 伙伴数据, 包括血量、位置.
message BuddyInfo {
  int64 buddy_id     = 1;                      // 伙伴ID
  int64 hp           = 2;                      // 剩余血量
  Point loc          = 3;                      // 伙伴元素位置.
  int64 score        = 4 [deprecated = true];  // 掉落的积分.
  bool active_status = 5;                      // 激活状态
}

// ItemInfo 碰撞特殊道具信息.
message ItemInfo {
  int64 item_id                      = 1;  // 道具ID.
  CollisionSpecialItemType item_type = 2;  // 碰撞特殊道具.
  Point loc                          = 3;  // 位置.
  bool active_status                 = 4;  // 激活状态
}

message DodgeBallInfo {
  Point point   = 1;  // 躲避球位置
  Offset offset = 2;  // 躲避球在地块的偏移.
}

// Point 坐标.
message Point {
  int64 x = 1;
  int64 y = 2;
}

message Offset {
  int64 x = 1;
  int64 y = 2;
}
// MapGridElemType 关卡地图放置的元素类型.
enum MapGridElemType {
  MAP_GRID_ELEM_TYPE_UNKNOWN  = 0;  // 未知类型
  BUDDY_ELEM                  = 1;  // 伙伴元素
  COLLISION_SPECIAL_ITEM_ELEM = 2;  // 碰撞特殊道具元素
}

// CollisionSpecialItemType 碰撞特殊道具类型.
enum CollisionSpecialItemType {
  COLLISION_SPECIAL_ITEM_TYPE_UNKNOWN = 0;  // 未知类型
  ACC_ITEM                            = 1;  // 加速道具.
  DOUBLE_ITEM                         = 2;  // 加倍道具
  EXPLODE_ITEM                        = 3;  // 爆炸道具
  SPLIT_ITEM                          = 4;  // 分裂道具.
}