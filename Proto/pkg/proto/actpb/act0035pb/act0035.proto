// cs protocol
syntax = "proto3";

package actpb.act0035pb;
option go_package = "git.woa.com/red/actsvr/pkg/proto/actpb/act0035pb";

import "corepb/common.proto";
import "pkg/proto/actpb/commonpb/common.proto";

service CSAct0035Service {
  // 批量领取活动奖励
  rpc BatchDeliverActReward(BatchDeliverActRewardRequest) returns (BatchDeliverActRewardReply);
  // 获取扫荡详情
  rpc QuerySweepDetail(QuerySweepDetailRequest) returns (QuerySweepDetailReply);
  // 扫荡对局
  rpc SweepBattle(SweepBattleRequest) returns (SweepBattleReply);
  // 购买扫荡材料
  rpc BuySweepItem(BuySweepItemRequest) returns (BuySweepItemReply);
}

message ActGetDetailRequest {}

message TaskDetail {
  int64 unlocked_timestamp = 1;  // 任务解锁时间戳（0 表示已经解锁）
  actpb.commonpb.Task task = 2;  // 任务基本信息
}

message ActGetDetailReply {
  int64 current_day         = 1;   // 当前进行天数
  repeated TaskDetail tasks = 4;   // 所有任务详细信息
  bool is_need_ticket       = 5;   // 是否需要门票
  int64 owned_ticket        = 6;   // 所拥有的门票数量
  int64 start_match_hour    = 7;   // 开始匹配时间
  int64 end_match_hour      = 8;   // 结束匹配时间
  int64 remind_buy_count    = 9;   // 剩余扫荡材料购买次数
  int64 total_buy_count     = 10;  // 总扫荡材料购买次数
  corepb.Item cost          = 11;  // 购买扫荡门票需要的材料
  bool cheat_box_open_flag  = 12;  // 是否开启作弊工具
  int64 sweet_max_times     = 13;  // 单次最大扫荡次数
}

message BatchDeliverActRewardRequest {
  repeated int64 task_id                              = 1;  // 任务 ID
  repeated corepb.GiftSelectedItem gift_selected_item = 2;  //可选礼包
}

message BatchDeliverActRewardReply {
  repeated corepb.Item awards = 1;  // 领取到的奖励
  repeated int64 awarded_ids  = 2;  // 领取到的任务 ID 列表
}

message QuerySweepDetailRequest {}

message QuerySweepDetailReply {
  repeated corepb.Item awards = 1;  // 扫荡使用的作弊材料
}

message SweepBattleRequest {}

message SweepBattleReply {
  int64 sweep_item_count   = 1;  // 获取到的道具数量
  int64 sweep_ticket_count = 2;  // 使用的贿赂币的数量
}

message GameStartCustomData {
  int64 current_day    = 1;  // 当前天数
  int64 successive_win = 2;  // 连胜次数
}

message ActBriefInfo {
  int64 current_day = 1;  // 当前进行天数
}

message GameOverMsgCustomData {
  map<int64, int64> successive_win   = 1;  // 双方连胜次数
  map<int64, int64> cheat_item_count = 2;  // 作弊工具道具数量
}

message BuySweepItemRequest {
  int64 buy_count = 1;  // 购买次数
}

message BuySweepItemReply {
  repeated corepb.Item awards = 1;  // 获得的道具
  int64 remind_buy_count      = 2;  // 剩余扫荡材料购买次数
}