// cs protocol
syntax = "proto3";

package bountygamepb;
option go_package = "git.woa.com/red/bountygamesvr/pkg/proto/bountygamepb";

import "corepb/common.proto";
import "corepb/fight_common.proto";
import "corepb/loadout_comm.proto";
import "clientpb/record.proto";

service BountyGameService {
  // -------------- 战斗类协议 --------------
  // 战斗开始
  rpc GameStart(GameStartRequest) returns (GameStartReply);
  // 战斗结束
  rpc GameOver(GameOverRequest) returns (GameOverReply);
  // 战斗扫荡
  rpc GameRaid(GameRaidRequest) returns (GameRaidReply);
  // -------------- 奖励类协议 --------------
  // 领取赛季成就奖励
  rpc GetAchievementReward(GetAchievementRewardRequest) returns (GetAchievementRewardReply);
  // 批量领取赛季成就奖励
  rpc BatchGetAchievementReward(BatchGetAchievementRewardRequest) returns (BatchGetAchievementRewardReply);
  // 奖励页面详情
  rpc RewardDetail(RewardDetailRequest) returns (RewardDetailReply);
  // -------------- 通用类协议 --------------
  // 获取赏金大赛主页面详细信息
  rpc BountyGameDetail(BountyGameDetailRequest) returns (BountyGameDetailReply);
  // 获取战报信息
  rpc HistoricalRecord(HistoricalRecordRequest) returns (HistoricalRecordReply);
  // 获取所有赛季战绩（我的战绩）
  rpc SeasonRecord(SeasonRecordRequest) returns (SeasonRecordReply);
  // 获取当前排行榜 ID 和 大区 ID，提供给客户端用于排行榜访问
  rpc SeasonRankDetail(SeasonRankDetailRequest) returns (SeasonRankDetailReply);
  // -------------- 排行和匹配类协议 --------------
  // 获取好友排行榜
  rpc FriendsRank(FriendsRankRequest) returns (FriendsRankReply);
  // 获取荣耀排行榜(赛季)
  rpc GloryRank(GloryRankRequest) returns (GloryRankReply);
  // 获取匹配对手列表
  rpc BountyList(BountyListRequest) returns (BountyListReply);
  // 购买悬赏次数
  rpc BuyBountyTimes(BuyBountyTimesRequest) returns (BuyBountyTimesReply);
  // 刷新匹配对手列表
  rpc RefreshBountyList(RefreshBountyListRequest) returns (RefreshBountyListReply);
  // -------------- 阵容类协议 --------------
  // 生效阵容
  rpc ApplyLoadout(ApplyLoadoutRequest) returns (ApplyLoadoutReply);
  // 阵容伙伴信息
  rpc LoadoutInfo(LoadoutRequest) returns (LoadoutReply);
  // 实力值信息
  rpc FightAttrFc(FightAttrFcRequest) returns (FightAttrFcReply);
  // 推荐伙伴
  rpc RecommendLoadout(RecommendLoadoutRequest) returns (RecommendLoadoutReply);
  // 点赞
  rpc Like(LikeRequest) returns (LikeReply);
}

message GameStartRequest {
  int64 rival_gid = 1;  // 要挑战的玩家

  bool is_revenge = 2;  // 是否是复仇
  string uuid     = 3;  // 如果复仇的话需要带上战报的uuid
}

message GameStartReply {
  corepb.GameStartMessage game_start_message = 1;
}

message GameRaidRequest {
  int64 rival_gid = 1;  // 要挑战的玩家

  bool is_revenge = 2;  // 是否是复仇
  string uuid     = 3;  // 如果复仇的话需要带上战报的uuid
}

message GameRaidReply {
  corepb.GameOverMessage game_over_message = 1;
  int64 cur_score                          = 2;   // 当前积分
  int64 changed_score                      = 3;   // 变化的积分，整数增加，负数减少
  repeated corepb.Item award_list          = 4;   // 奖励信息
  int64 new_rank                           = 5;   // 新的排名
  int64 changed_rank                       = 6;   // 变化的排名，整数增加，负数减少
  bool is_rest                             = 7;   // 是否处于休赛期
  RankAchievementReward rank_reward        = 8;   // 排名提升的奖励信息，如果不为空需要弹窗提醒玩家
  BountyPlayerInfo rival                   = 9;   // 对手信息
  BountyPlayerInfo me                      = 10;  // 自己的信息
}

// 开战时需要的额外信息，序列化放入FightPlayerInfo中的ext_info字段
message PlayerExtInfo {
  int64 score = 1;  // 当前积分
}
message GameOverRequest {
  corepb.FightResultType result = 1;  // 胜负平
  int64 rival_gid               = 2;  // 回传下对手的gid
  bool is_perfect               = 3;  // 是否完胜（或完败）
  clientpb.DungeonRecord record = 4;  // 对局数据
  bool is_timeup                = 5;  // 是否时间耗尽
  bytes dungeon_record_bytes    = 6;  // 对局数据，优先用这个
}

message GameOverReply {
  corepb.GameOverMessage game_over_message = 1;
  int64 cur_score                          = 2;   // 当前积分
  int64 changed_score                      = 3;   // 变化的积分，整数增加，负数减少
  repeated corepb.Item award_list          = 4;   // 奖励信息
  int64 new_rank                           = 5;   // 新的排名
  int64 changed_rank                       = 6;   // 变化的排名，整数增加，负数减少
  bool is_rest                             = 7;   // 是否处于休赛期
  RankAchievementReward rank_reward        = 8;   // 排名提升的奖励信息，如果不为空需要弹窗提醒玩家
  BountyPlayerInfo rival                   = 9;   // 对手信息
  BountyPlayerInfo me                      = 10;  // 自己的信息
}

// 排名提升的奖励信息
message RankAchievementReward {
  int64 rank                              = 1;  // 新排名
  repeated corepb.Item achievement_reward = 2;  // 奖励
}

message GetAchievementRewardRequest {
  int64 reward_id = 1;  // 赛季成就 ID
}

message GetAchievementRewardReply {
  repeated corepb.Item achievement_reward        = 1;  // 领取的赛季成就奖励
  repeated SeasonAchievement achievement_rewards = 2;  // 当前展示的所有赛季成就奖励
}

message BatchGetAchievementRewardRequest {
  int64 reward_id = 1;  // 赛季成就 ID
}

message BatchGetAchievementRewardReply {
  repeated corepb.Item achievement_reward        = 1;  // 领取的赛季成就奖励
  repeated SeasonAchievement achievement_rewards = 2;  // 当前展示的所有赛季成就奖励
  repeated int64 awarded_ids                     = 3;  // 本次领取的奖励的id列表
}

enum AchievementStatus {
  STILL_LOCKED    = 0;  // 未达成
  CAN_RECEIVE     = 1;  // 未领取
  ALREADY_RECEIVE = 2;  // 已领取
}

// 赛季成就
message SeasonAchievement {
  int64 id                 = 1;  // 赛季成就 ID
  AchievementStatus status = 2;  // 赛季成就状态
  int64 progress           = 3;  // 当前进度
  int64 total_progress     = 4;  // 总进度
}

message RewardDetailRequest {}

message RewardDetailReply {
  repeated SeasonAchievement achievement_rewards = 1;  // 当前赛季的赛季成就奖励
  int64 score                                    = 2;  // 当前积分
  int64 rank                                     = 3;  // 当前排名
  int64 current_time                             = 4;  // 当前赛季结束时间
  int64 season_id                                = 5;  // 当前赛季 ID
}

message BountyGameDetailRequest {}

message DailyReward {
  repeated corepb.Item daily_reward = 1;  // 每日奖励列表
  int64 yesterday_score             = 2;  // 昨日积分
  int64 yesterday_rank              = 3;  // 昨日排名
}

message RankReward {
  repeated corepb.Item rank_reward = 1;  // 赛季排行奖励列表
  int64 last_rank                  = 2;  // 上赛季排名
  int64 current_rank               = 3;  // 本赛季排名
  int64 last_score                 = 4;  // 上赛季积分
  int64 current_score              = 5;  // 本赛季积分
  bool has_fight                   = 6;  // 上赛季是否挑战过
  int64 season_id                  = 7;  // 奖励对应的赛季ID
}

message BuyCost {
  int64 buy_times               = 1;  // 第几次购买
  repeated corepb.Item buy_cost = 2;  // 购买挑战次数花费
}
message FightTimes {
  int64 remain_times    = 1;  // 剩余挑战次数
  int64 total_times     = 2;  // 总挑战次数
  int64 can_buy_times   = 4;  // 剩余可购买的挑战次数
  int64 total_buy_times = 5;  // 每日可购买的挑战总次数
  // repeated corepb.Item buy_cost = 6;  // 购买挑战次数花费
  repeated BuyCost buy_cost = 7;  // 购买花费，里面的次数不连续
}

message BountyGameDetailReply {
  DailyReward daily_reward     = 1;  // 每日奖励
  RankReward rank_reward       = 2;  // 赛季排行（结算）奖励
  BountyPlayerInfo player_info = 3;  // 玩家信息
  FightTimes fight_times       = 4;  // 玩家挑战次数信息
  int64 season_id              = 5;  // 赛季 ID
  string rank_id               = 6;  // 当前的排行榜id
  string instance              = 7;  // 排行榜实例名
}

message HistoricalRecordRequest {}

message Record {
  bool is_win             = 1;  // 胜利 or 失败
  int64 score_change      = 2;  // 积分变化
  BountyPlayerInfo myself = 3;  // 玩家自身信息
  BountyPlayerInfo rival  = 4;  // 对手信息
  int64 timestamp         = 5;  // 时间戳
  bool is_attacker        = 6;  // 主动攻击 or 被攻击
  string uuid             = 7;  // 战报的唯一id，复仇用
  bool can_revenge        = 8;  // 是否可以复仇
  uint64 game_trace_id    = 9;  // 战斗唯一ID（其实有了这个uuid就不需要了，但是这个是后面加的，只能保持现状了）
}

message HistoricalRecordReply {
  repeated Record records = 1;  // 战报列表
}

message FriendsRankRequest {
  int64 skip  = 1;  // 起始排名
  int64 limit = 2;  // 拉取人数
}

message FriendsRankReply {
  int64 rank                            = 1;  // 我的排行
  repeated BountyPlayerInfo friend_list = 2;  // 好友排行榜
}

// 荣耀排行（赛季）
message GloryRankRequest {
  int64 season_id = 1;  // 要获取的赛季ID，不填或者填0表示拉取所有的赛季
}

message GloryRankInfo {
  int64 season_id                       = 1;  // 赛季ID
  string season_name                    = 2;  // 赛季名称
  repeated BountyPlayerInfo player_list = 3;  // 前三名的玩家信息
}

message GloryRankReply {
  repeated GloryRankInfo season_list = 1;
}

// 阵容中的伙伴(和援护)信息
message BuddyInfo {
  int64 buddy_id = 1;
  int64 stars    = 2;
}

// 阵容中的空岛贝信息
message DialInfo {
  int64 dial_id = 1;
  int64 level   = 2;
}
message Loadout {
  // repeated int64 buddy_list = 1;  // 废弃不用

  repeated BuddyInfo buddies = 2;  // 伙伴
  DialInfo dial              = 3;  // 空岛贝
  BuddyInfo support_buddy    = 4;  // 援护
}

message BountyPlayerInfo {
  reserved 13;
  int64 gid         = 1;
  int64 zone_id     = 2;  // 区服
  string name       = 3;
  string plat_pic   = 5;  // 玩家平台头像
  int64 level       = 4;  // 角色等级
  string guild_name = 6;  // 公会名称

  int64 score     = 7;   // 赏金
  int64 fc        = 8;   // 战力
  int64 rank      = 9;   // 排名
  Loadout loadout = 10;  // 阵容

  int64 win_score = 11;  // 战胜可获得的赏金
  bool is_robot   = 12;  // 是否是机器人
  // corepb.DressInfo dress_info = 13;  // 装扮信息

  LikeInfo like                            = 14;  // 点赞信息，名人堂（荣耀排行）使用
  corepb.PersonalDisplayInfo personal_info = 15;  // 个人显示信息
  bool is_ranking_anonymous                = 16;  // 是否排行榜匿名
}

// 点赞信息
message LikeInfo {
  int64 total_count = 1;  // 总点赞数
  int64 status      = 2;  // 状态 0-不可点赞(不是上个赛季的名人堂)，1-可点赞，2-已点赞，3-不可点赞(本周已经点赞过了)
}

message BountyListRequest {}

message BountyListReply {
  repeated BountyPlayerInfo player_list = 1;   // 对手列表
  repeated corepb.Item refresh_cost     = 2;   // 刷新消耗道具（当列表为空时，如果can_refresh_times>0,则说明当前免费，否则说明总次数用完了）
  int64 remain_times                    = 3;   // 剩余可挑战次数
  int64 total_times                     = 4;   // 总共可挑战次数
  repeated corepb.Item buy_times_cost   = 5;   // 购买挑战次数消耗道具
  int64 can_buy_times                   = 6;   // 可购买挑战次数
  int64 total_buy_times                 = 7;   // 总共可购买挑战次数
  int64 can_refresh_times               = 8;   // 可刷新次数
  int64 total_refresh_times             = 9;   // 总共可刷新次数
  int64 my_fc                           = 10;  // 我的战力
  int64 my_rank                         = 11;  // 我的排名
}

message BuyBountyTimesRequest {
  int64 buy_times = 1;  // 购买的次数
}

message BuyBountyTimesReply {
  int64 remain_times                  = 1;  // 剩余可挑战次数
  repeated corepb.Item buy_times_cost = 2;  // 购买挑战次数消耗道具
  int64 can_buy_times                 = 3;  // 可购买挑战次数
}

message RefreshBountyListRequest {}

message RefreshBountyListReply {
  repeated BountyPlayerInfo player_list = 1;  // 对手列表
  repeated corepb.Item refresh_cost     = 2;  // 下次刷新消耗道具（当列表为空时，如果can_refresh_times>0,则说明当前免费，否则说明总次数用完了）
  int64 can_refresh_times               = 3;  // 可刷新次数
}

// 获取所有赛季战绩（我的战绩）
message SeasonRecordRequest {}

message SeasonRecordInfo {
  int64 season_id    = 1;  // 赛季ID
  string season_name = 2;  // 赛季名称
  int64 rank         = 3;  // 排名
  int64 score        = 4;  // 积分
  int64 fc           = 5;  // 实力
  Loadout loadout    = 6;  // 阵容
}

message SeasonRecordReply {
  repeated SeasonRecordInfo record_list = 1;  // 战绩列表
}

message SeasonRankDetailRequest {}

message SeasonRankDetailReply {
  int64 season_id = 1;  // 赛季 ID
  int64 zone_id   = 2;  // 大区 ID
  string instance = 3;  // 排行榜实例名
}

message ApplyLoadoutRequest {
  string loadout_type    = 1;  // 阵容类型，客户端不用填
  corepb.Loadout loadout = 2;  // 阵容
}

message ApplyLoadoutReply {}

message LoadoutRequest {
  string loadout_type = 1;  // 阵容类型，客户端不用填
}

message LoadoutReply {
  corepb.LoadoutProfile profile = 1;  // 阵容配置
  corepb.Loadout loadout        = 2;  // 阵容
  bool valid                    = 3;  // 当前阵容是否合法
  bool adjusted                 = 4;  // 废弃不用
  int64 total_fc                = 5;  // 阵容实力值
}

message FightAttrFcRequest {
  repeated int64 buddies = 1;  // 选择伙伴
}

message FightAttrFcReply {
  int64 total_fc = 1;  // 实力值
}

message RecommendLoadoutRequest {}

message RecommendLoadoutReply {
  corepb.Loadout loadout = 1;  // 阵容
  int64 total_fc         = 2;  // 阵容实力值
}

message LikeRequest {
  int64 gid = 1;  // 要给谁点赞
}

message LikeReply {
  repeated corepb.Item reward = 1;  // 点赞奖励
}