// cs protocol
syntax = "proto3";

package redpointpb;

option go_package = "git.code.oa.com/red/redpointsvr/pkg/proto/redpointpb";

// 定义逻辑使用的特殊系统id
enum SpecialSysID {
  // 用于重算时代表所有sysID，因为是数组，所以不会出现未初始化的零值元素。用其他值的话怕与实际系统ID冲突
  ALL_SYS_ID = 0;
}

// ---------------- 红点基础结构定义 ----------------------
enum RPStatus {
  NO_POINT      = 0;  // 无红点
  HAVE_POINT    = 1;  // 有红点
  HAVE_NEW_FLAG = 2;  // 有新标记    红点>新标记>正常
}

enum RPType {
  Normal = 0;  // 正常红点
  Timing = 1;  // 定时红点。此时
}

message RPDetail {           // 红点目前有三种展示：单纯有无红点; 带数字显示的红点; 以tips提示的红点
  int64 value          = 1;  // 红点数值。某些要展示数据的场所使用
  string tips          = 2;  // 带气泡提示
  int64 timing_ts      = 3;  // 定时红点时间戳，从1970-1-1开始的秒数
  int64 timing_last_ts = 4;  // 定时红点持续时间，秒数
  int64 slv            = 5;  // 红点强度等级，用于根据玩家设置的红点强度等级来过滤红点
}

message RPMeta {
  int64 ts     = 1;  // 红点计算的时间戳，毫秒
  uint64 sgrid = 2;  // gatesvr的gsct和grid计算出来的多次登录也唯一且有序递增的值，客户端请求触发的红点计算才有值
}

message RedPoint {
  uint32 sys_id          = 1;  // 红点id, 全局唯一. 之前经常以系统ID作为红点id
  RPStatus status        = 2;  // 是否有红点
  RPType type            = 3;
  RPDetail status_detail = 4;  // 一些较特殊的红点，需要填充这里对应的字段
  RPMeta meta            = 5;  // 红点元数据，红点服务使用
}
