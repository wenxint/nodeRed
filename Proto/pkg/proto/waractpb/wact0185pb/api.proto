// cs protocol
syntax = "proto3";

package waractpb.wact0185pb;
option go_package = "git.woa.com/red/guildwarsvr/pkg/proto/waractpb/wact0185pb";


import "corepb/common.proto";

// 有状态服务,请求需要携带 x-warid 标头且值为「war_id」
service StatefulService {
  // 用于匹配成功后，客户端确认进入对局 (发送给room actor)
  rpc ConfirmMatch(ConfirmMatchRequest) returns (ConfirmMatchReply) {}
  // 用于获取大图配置信息（用于玩家掉线重连时的操作）
  rpc BigMapInfo(BigMapInfoRequest) returns (BigMapInfoReply) {}

  // 玩家离开当前地图（切地图或撤离成）的前置校验，此协议返回OK后客户端再发切地图的vkey
  rpc CheckLeaveDungeon(CheckLeaveDungeonRequest) returns (CheckLeaveDungeonReply) {}
}

message BigMapInfoRequest {}

message BigMapInfoReply {
  int64 big_map_id                     = 1;
  MapConf map_conf                     = 2;  // 大图配置，透传给客户端，比较大，不要经常拉
  MapDeltaUpdateInfo delta_update_info = 3;  // 增量更新信息
}

enum Direction {
  DIRECTION_UNKNOWN = 0;
  DIRECTION_UP      = 12;
  DIRECTION_DOWN    = 6;
  DIRECTION_LEFT    = 9;
  DIRECTION_RIGHT   = 3;
}

message LevelConf {
  int64 big_map_id              = 1;  // 大地图id
  int32 row_index               = 2;  // 行索引
  int32 col_index               = 3;  // 列索引
  int32 level_id                = 4;  // 关卡id
  repeated int32 connect_levels = 5;
}

message MapDeltaUpdateInfo {
  // 地图连接关系
  message Path {
    int64 source_level_id  = 1;
    Direction via_block_id = 2;
    int64 target_level_id  = 3;
  }

  message AroundPlayerInfo {
    bool is_changed                       = 1;  // 增量是否变更  (此结构通过这个字段判断是否需要处理)
    bool has_around_players               = 2;  // 周围是否有其他玩家
    map<int64, bool> direction_has_player = 3;  // 上下左右是否有人, 此map直接覆盖 (key: 方向3,6,9,12, value: 是否有人)
  }

  message EvacuationPoint {
    int64 level_id     = 1;
    int64 remain_times = 2;  // 剩余可撤离次数，-1表示不限次数

    // 条件撤离点才需要下面这些字段
    int64 cond_type                 = 4;  // 撤离条件：0-无条件，1-提交指定物品，2-丢弃背包（即背包为空），3-限时撤离点
    repeated corepb.Item cond_items = 5;  // 提交指定物品列表（cond_type=1时有效）
    int64 limit_active_ts           = 6;  // 限时撤离点激活后，实际生效的时间戳（cond_type=3时有效），0表示限时撤离点未激活
  }

  repeated Path opened_connections = 1;  // 开放的路径
  reserved 2;
  repeated Path walked_paths          = 3;  // 走过的路径
  AroundPlayerInfo around_player_info = 4;  // 周围玩家信息
  int64 born_level_id                 = 5;  // 出生点id (不会变)
  // repeated int64 evacuation_level_id_list    = 6;  // 对应的撤离点列表，待废弃，使用 evacuation_points 替代
  repeated EvacuationPoint evacuation_points = 7;  // 撤离点信息
  repeated GlobalMarkInfo global_mark_infos  = 8;  // 全局标记点信息
  repeated int64 high_resource_level_ids     = 9;  // 高资源地图id列表 (玩家需要显示的全图高资源点)
}

message GlobalMarkInfo {
  int64 level_id = 1;
  int64 buff_id  = 2;
}

message MapUpdateInfoNtf {
  MapDeltaUpdateInfo delta_update_info = 1;
}

message MapConfig {
  int64 id       = 1;
  string name    = 2;
  int64 level_id = 3;
}

// ConfirmMatchRequest 确认进入对局
message ConfirmMatchRequest {
  string uuid = 1;
}

message MapConf {
  repeated LevelConf levels = 1;
}

// ConfirmMatchReply 确认进入对局
message ConfirmMatchReply {
  int64 big_map_id = 1;
  MapConf map_conf = 2;  // 大图配置，透传给客户端，比较大，不要经常拉
}

// RoomInfo

message RoomInfoRequest {}

message RoomInfoReply {
  message Player {
    int64 gid                               = 1;
    corepb.PersonalDisplayInfo display_info = 2;
    int64 rank                              = 3;  // 对局内名次，如果还没结算为 0
    int64 kill_count                        = 4;  // 击杀数
    int64 killed_by                         = 5;  // 被什么击杀
  }
  map<int64, Player> players = 1;  // gid -> player
}

// ntf

// MatchSuccessNTF 匹配成功
message MatchSuccessNTF {
  string uuid   = 1;
  string war_id = 2;  // 使用x-warid metadata带回给ConfirmMatch request
}

// CreateGameErrorNTF 创建对局失败
message CreateGameErrorNTF {}

// misc

// CustomGameData 是 GameStartMessage 的 CustomData 字段
message CustomGameData {
  string war_id = 1;
}

message CheckLeaveDungeonRequest {
  int64 gid      = 1;  // 有可能是别的玩家帮上报，所以需要gid，如果不填的话默认是自己
  int32 block_id = 2;  // 传送点的ID，如果这个ID传的是当前的副本ID，则表示撤离
}

message CheckLeaveDungeonReply {}
