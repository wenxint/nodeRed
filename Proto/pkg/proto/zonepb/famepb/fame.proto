// cs protocol
syntax = "proto3";

package zonepb.famepb;
option go_package = "git.code.oa.com/red/zonesvr/pkg/proto/zonepb/famepb";

import "corepb/common.proto";

service CSService {
  // 请求名望信息
  rpc QueryFame(QueryFameRequest) returns (QueryFameReply);
  // 发任务奖励
  rpc DeliverReward(DeliverRewardRequest) returns (DeliverRewardReply);
  // 名望升级并且发奖励
  rpc FameLevelUp(FameLevelUpRequest) returns (FameLevelUpReply);
  // 为名望晋升任务触发伪pvp战斗
  rpc StartPseudoPvpBattle(StartPseudoPvpBattleRequest) returns (StartPseudoPvpBattleReply);
}

message StartPseudoPvpBattleRequest {
  int64 task_id = 1;  // 任务ID
}

message StartPseudoPvpBattleReply {}

message InitialTaskNotify {
  Task initial_task = 1;  // 名望任务状态
}

message FameLevelUpRequest {}

message FameLevelUpReply {
  int64 level                = 1;  // 新的名望等级
  repeated corepb.Item items = 3;  // 本次领取的奖励
}

message QueryFameRequest {}

message QueryFameReply {
  int64 fame_level    = 1;  // 当前的名望等级
  repeated Task tasks = 2;  // 当前名望等级的所有任务
}

message DeliverRewardRequest {
  int64 task_id = 1;  // 任务id, QueryFame或者查表时获得的
}

message DeliverRewardReply {
  repeated corepb.Item items = 2;  // 本次领取的奖励
}

message Task {
  int64 id                      = 1;  // 任务id
  TaskStatus status             = 2;  // 任务是否已经完成
  repeated Condition conditions = 3;  // 任务的需求条件完成情况
}

message Condition {
  int32 condition_type = 1;  // 枚举的完成条件类型
  int64 sub_id         = 2;  // 条件需求的子类型，例如物品等
  int64 count          = 3;  // 当前积累的数量, 逻辑用0、1
  int64 required       = 4;  // 当前枚举条件的要求值，达到了可以领取奖励
}

enum TaskStatus {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  UNOPENED   = 0;  // 未开启, 一般用于标记晋级考核任务的状态
  COMPLETED  = 1;  // 已经完成, 可领取
  REWARDED   = 2;  // 已经领取了奖励
  PROCEEDING = 3;  // 正在进行, 未完成
}