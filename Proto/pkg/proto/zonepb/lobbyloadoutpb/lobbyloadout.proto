// cs protocol
syntax = "proto3";

package zonepb.lobbyloadoutpb;
option go_package = "git.code.oa.com/red/zonesvr/pkg/proto/zonepb/lobbyloadoutpb";

import "corepb/loadout_comm.proto";

service Service {
  rpc LoadoutInfo(LoadoutInfoRequest) returns (LoadoutInfoReply);                             // 获取阵容信息
  rpc ApplyLoadout(ApplyLoadoutRequest) returns (ApplyLoadoutReply);                          // 设置阵容
  rpc RemoveRedpoint(RemoveRedpointRequest) returns (RemoveRedpointReply);                    // 移除红点
  rpc QueryBuddyTokenInfos(QueryBuddyTokenInfosRequest) returns (QueryBuddyTokenInfosReply);  // 请求所有伙伴信物信息
}

// LoadoutInfo

enum LobbyLoadoutType {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  MAIN    = 0;  // 主界面阵容
  PROFILE = 1;  // 个人信息界面阵容
}

message LoadoutInfoRequest {
  LobbyLoadoutType loadout_type = 1;
}

message LoadoutInfoReply {
  corepb.LoadoutProfile profile = 1;  // 阵容配置
  corepb.Loadout loadout        = 2;  // 阵容
}

// ApplyLoadout

message ApplyLoadoutRequest {
  corepb.Loadout loadout        = 2;  // 阵容
  LobbyLoadoutType loadout_type = 3;

  reserved 1;
}

message ApplyLoadoutReply {
  // 若要设置的阵容不合法，会通过 rpc 错误告知。
}

message RemoveRedpointRequest {
  repeated int64 ids = 1;  // 信物id
}

message RemoveRedpointReply {}

message QueryBuddyTokenInfosRequest {}

enum BuddyTokenStatus {
  STATUS_UNKNOWN = 0;  // 未知状态
  LOCKED         = 1;  // 锁定中，未获得
  UNLOCKED       = 2;  // 已拥有，未使用
  NEW            = 3;  // 新获得
  USING          = 4;  // 使用中
}

message BuddyTokenInfo {
  int64 id                = 1;  // 信物id
  BuddyTokenStatus status = 2;  // 信物状态
}

message QueryBuddyTokenInfosReply {
  repeated BuddyTokenInfo buddy_token_infos = 1;
}

message NewBuddyTokenNTF {
  repeated int64 ids = 1;  // 信物id
}