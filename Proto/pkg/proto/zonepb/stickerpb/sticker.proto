// cs protocol
syntax = "proto3";

package zonepb.stickerpb;
option go_package = "git.code.oa.com/red/zonesvr/pkg/proto/zonepb/stickerpb";

import "corepb/common.proto";

service CSService {
  // 请求所有的sticker
  rpc QueryOwnedStickers(QueryOwnedStickersRequest) returns (QueryOwnedStickersReply);

  // 请求玩家选择的sticker
  rpc QuerySelectedStickers(QuerySelectedStickersRequest) returns (QuerySelectedStickersReply);
  // 设置装配的sticker
  rpc ApplySelectedStickers(ApplySelectedStickersRequest) returns (ApplySelectedStickersReply);

  // 玩家浏览了stickers面板，新表情不再新
  rpc VisitStickers(VisitStickersRequest) returns (VisitStickersReply);
  // 请求发送notify，客户端主动请求notify，用于动态全服增加表情或者配置动态更新
  rpc QueryNotify(QueryNotifyRequest) returns (QueryNotifyReply);

  // 请求玩家选择的自动发送sticker
  rpc QueryAutoStickers(QueryAutoStickersRequest) returns (QueryAutoStickersReply);
  // 玩家设置自动发送的sticker
  rpc ApplyAutoStickers(ApplyAutoStickersRequest) returns (ApplyAutoStickersReply);
}

message ApplyAutoStickersRequest {
  repeated AutoSticker auto_stickers      = 1 [deprecated = true];  // 弃用
  repeated corepb.StickerSetting settings = 2;                      // 要设置的自动播放的表情
}

message AutoSticker {
  int64 slot_id                   = 1;  // 槽位
  int64 trigger_cond              = 2;  // 生效条件（对应配置的枚举值）
  repeated int64 trigger_gameplay = 3;  // 生效玩法（对应配置的枚举值）
  int64 sticker_id                = 4;  // 表情id
}

message ApplyAutoStickersReply {}

message QueryAutoStickersRequest {}

message QueryAutoStickersReply {
  repeated AutoSticker auto_stickers      = 1 [deprecated = true];  // 弃用
  repeated corepb.StickerSetting settings = 2;                      // 设置了的自动播放的表情
}

message QuerySelectedStickersRequest {
  Type type = 1 [deprecated = true];  // 弃用
}

message QuerySelectedStickersReply {
  repeated StickerInfo stickers           = 1 [deprecated = true];  // 弃用
  repeated corepb.StickerSetting settings = 2;                      // 玩家已经设置的表情
}

message QueryOwnedStickersRequest {
  Type type = 1 [deprecated = true];  // 弃用
}

message QueryOwnedStickersReply {
  repeated StickerInfo stickers = 1;  // 要求返回的stickers
}

message QueryNotifyRequest {}

message QueryNotifyReply {}

message VisitStickersRequest {
  int64 sticker_id = 1;  // 表情id
}

message VisitStickersReply {}

message ApplySelectedStickersRequest {
  repeated int64 sticker_ids              = 1 [deprecated = true];  // 弃用
  repeated corepb.StickerSetting settings = 2;                      // 要设置的表情
}

// 错误走error
message ApplySelectedStickersReply {}

// notify 用于增量更新玩家的sticker
message UpdateStickerNotify {
  repeated StickerInfo stickers = 1;  // 需要更新的stickers
}

message StickerInfo {
  int64 id                = 1;  // 对应sticker_id
  Type type               = 2;  // 表情的类型 (没有all类型)
  int64 limited_timestamp = 3;  // 限时表情时间戳
  bool is_new             = 4;  // 表情是否为新表情
}

enum Type {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  ALL          = 0;  // 所有表情
  PERMANENT    = 1;  // 永久表情
  TIME_LIMITED = 2;  // 时间限制表情
  NOT_OBTAINED = 3;  // 未获得表情
}
