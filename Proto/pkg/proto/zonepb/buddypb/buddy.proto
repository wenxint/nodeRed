// cs protocol
syntax = "proto3";

package zonepb.buddypb;

option go_package = "git.code.oa.com/red/zonesvr/pkg/proto/zonepb/buddypb";


import "corepb/common.proto";

// BuddyService 为伙伴系统，包括相关子系统(情报档案等)
service BuddyService {
  // 获取伙伴列表
  rpc GetAllBuddy(GetAllBuddyRequest) returns (GetAllBuddyResponse);
  // 获取单个伙伴信息
  rpc GetBuddy(GetBuddyRequest) returns (GetBuddyResponse);
  // 招募伙伴
  rpc RecruitBuddy(RecruitBuddyRequest) returns (RecruitBuddyResponse);
  // 升星伙伴
  rpc UpgradeBuddy(UpgradeBuddyRequest) returns (UpgradeBuddyResponse);
  // 获取援护技能列表
  rpc SupportSkills(SupportSkillsRequest) returns (SupportSkillsResponse);
  // 解锁援护技能
  rpc UnlockSupportSkill(UnlockSupportSkillRequest) returns (UnlockSupportSkillResponse);
  // 消除援护卡解锁界面红点
  rpc ClearSupportCardRedpoint(ClearSupportCardRedpointRequest) returns (ClearSupportCardRedpointResponse);

  // 满星溢出碎片 道具兑换
  rpc QueryExchange(QueryExchangeRequest) returns (QueryExchangeResponse);
  // 道具兑换
  rpc DoExchange(DoExchangeRequest) returns (DoExchangeResponse);
  // 满星溢出碎片 批量道具兑换
  rpc QueryBatchExchange(QueryBatchExchangeRequest) returns (QueryBatchExchangeResponse);
  // 执行批量道具兑换
  rpc DoBatchExchange(DoBatchExchangeRequest) returns (DoBatchExchangeResponse);
}

enum Type {
  TYPE_UNKNOWN = 0;
  FIGHT        = 1;  // 出战角色
  SUPPORT      = 2;  // 援护角色
}

enum Quality {
  QUALITY_UNKNOWN = 0;  // 无
  BLUE            = 1;  // 蓝色B级
  PURPLE          = 2;  // 紫色A级
  ORANGE          = 3;  // 橙色S级
  RED             = 4;  // 红色SS级
}

message BuddyBriefInfo {
  int64 id                 = 1;
  bool has_got             = 8;   // 是否已经招募
  int64 star               = 9;   // 星级
  bool is_support_unlocked = 11;  // 是否已经援护解锁
  int64 recruit_timestamp  = 12;  // 招募时间戳(unix time second)
  bool new_teach_tag       = 13;  // 是否展示教学红点
  bool opened              = 14;  // 是否开启，如果没有开启，客户端不能显示
  bool opened_for_support_card = 15;// 是否开启援护卡，如果没有开启，客户端不能在道具解锁援护界面显示
}

message AllBuddyInfo {
  repeated BuddyBriefInfo infos = 1;  // 伙伴列表
  corepb.FightAttr addition     = 2;  // 加成信息
  int64 fc                      = 3;  // 伙伴系统实力值
}

message GetAllBuddyRequest {}

message GetAllBuddyResponse {
  AllBuddyInfo buddys = 1;
}

message GetBuddyRequest {
  int64 id = 1;
}

message GetBuddyResponse {
  BuddyBriefInfo buddy = 1;
}

message Condition {
  int64 id             = 1;  // 相关id
  int64 require_amount = 2;  // 所需解锁数量
  int64 amount         = 3;  // 实际数量
  enum Type {
    CONDITION_TYPE_UNKNOWN = 0;
    BUDDY_STAR             = 1;  // 表示需要伙伴达到这个星级
    ITEM_COUNT             = 2;  // 表示需要足够数量的道具
  }
  Type typ = 4;  // 解锁条件类型
}

message UpgradeBuddyRequest {
  int64 id = 1;
}

message AdditionDiffInfo {
  corepb.FightAttr origin = 1;
  corepb.FightAttr now    = 2;
}

message UpgradeBuddyResponse {
  BuddyBriefInfo buddy      = 1;
  int64 fc                  = 2;  // 新的实力值
  corepb.FightAttr addition = 3;  // 新的伙伴系统属性加成
}

message SupportSkillsRequest {}

message SupportSkill {
  int64 id                      = 1;  // 援护技能 ID，即对应伙伴 ID
  Quality quality               = 2;  // 品质
  bool buddy_unlocked           = 3;  // 对应伙伴是否解锁
  bool skill_unlocked           = 4;  // 援护技能是否解锁
  bool meet_condition           = 5;  // 若未解锁，是否满足解锁条件
  repeated Condition conditions = 6;  // 解锁条件详情
}

message SupportSkillsResponse {
  repeated SupportSkill skills = 1;  // 援护技能列表
}

message UnlockSupportSkillRequest {
  int64 id = 1;  // 待解锁的伙伴
}

message UnlockSupportSkillResponse {
  int64 fc                  = 2;  // 新的实力值
  corepb.FightAttr addition = 3;  // 新的伙伴系统属性加成
  SupportSkill skill        = 4;  // 解锁后的援护技能
  reserved 1;
}

message ClearSupportCardRedpointRequest {}

message ClearSupportCardRedpointResponse {}

message RecruitBuddyRequest {
  int64 id = 1;
}

message RecruitBuddyResponse {
  BuddyBriefInfo buddy      = 1;
  int64 fc                  = 2;  // 新的实力值
  corepb.FightAttr addition = 3;  // 新的伙伴系统属性加成
}

message QueryExchangeRequest {}

message ExchangeBaseInfo {
  int64 convert_item_id       = 1;  // 通用兑换道具
  map<int64, int64> exchanges = 2;  // 相关品质对应的兑换道具个数 4-S 3-A 2-B 1-C
}

message BuddyFragmentInfo {
  int64 id      = 1;  // 碎片id
  int64 quality = 2;  // 品质
  int64 count   = 3;  // 多余的个数
}

message QueryExchangeResponse {
  ExchangeBaseInfo exchange_base_info        = 1;
  repeated BuddyFragmentInfo buddy_fragments = 2;  // 碎片列表
}

message DoExchangeParam {
  int64 id    = 1;  // 选择的碎片id
  int64 count = 2;  // 选择的兑换数量
}

message DoExchangeRequest {
  // repeated DoExchangeParam params = 1;
  // 客户端暂不支持repeated的请求包，暂时以string替代: itemid1,count1;itemid2,count2
  string params = 1;
}

message DoExchangeResponse {  // 直接返回查询信息，免的再查一次
  ExchangeBaseInfo exchange_base_info        = 1;
  repeated BuddyFragmentInfo buddy_fragments = 2;  // 碎片列表
  repeated corepb.Item rewards               = 3;  // 获得的道具
}

message QueryBatchExchangeRequest {}

message QueryBatchExchangeResponse {
  ExchangeBaseInfo exchange_base_info = 1;
  map<int64, int64> buddy_fragments   = 2;  // 相关品质对应的碎片数量 4-S 3-A 2-B 1-C
}

message DoBatchExchangeRequest {
  repeated int64 quality = 1;  // 选择的品质
}

message DoBatchExchangeResponse {  // 直接返回查询信息，免的再查一次
  ExchangeBaseInfo exchange_base_info = 1;
  map<int64, int64> buddy_fragments   = 2;  // 相关品质对应的碎片数量 4-S 3-A 2-B 1-C
  repeated corepb.Item rewards        = 3;  // 获得的道具
}