// cs protocol
syntax = "proto3";

package zonepb.voyagepb.safaripb;
option go_package = "git.code.oa.com/red/zonsvr/pkg/proto/zonepb/voyagepb/safaripb";

import "corepb/fight_common.proto";
import "corepb/common.proto";
import "pkg/proto/zonepb/voyagepb/cultivationpb/cultivation.proto";
import "pkg/proto/zonepb/fight.proto";

service SafariService {
  // 获取岛屿探险简略信息
  rpc SafariProfile(SafariProfileRequest) returns (SafariProfileReply);

  // 获取岛屿探险详情信息
  rpc SafariDetail(SafariDetailRequest) returns (SafariDetailReply);

  // 开启岛屿探险
  rpc StartSafari(StartSafariRequest) returns (StartSafariReply);

  // 上报格子打开
  rpc OpenLatice(OpenLaticeRequest) returns (OpenLaticeReply);

  // 上报事件完成
  rpc FinishEvent(FinishEventRequest) returns (FinishEventReply);

  // 进入下一层
  rpc NextLayer(NextLayerRequest) returns (NextLayerReply);

  // 上报进入新层
  rpc EnterLayer(EnterLayerRequest) returns (EnterLayerReply);

  // 关卡跳层
  rpc SkipLayer(SkipLayerRequest) returns (SkipLayerReply);

  // 重置岛屿探险
  rpc ResetSafari(ResetSafariRequest) returns (ResetSafariReply);

  // 成就信息
  rpc AchievementInfo(AchievementInfoRequest) returns (AchievementInfoReply);

  // 领取成就奖励
  rpc ReceiveAchievementRewards(ReceiveAchievementRewardsRequest) returns (ReceiveAchievementRewardsReply);

  // 横版战斗开始
  rpc PreFight(PreFightRequest) returns (PreFightReply);

  // 横版战斗结束
  rpc PostFight(PostFightRequest) returns (PostFightReply);

  // 瞬战开始
  rpc PreQuickFight(PreQuickFightRequest) returns (PreQuickFightReply);

  // 瞬战进行一回合
  rpc DoQuickFight(DoQuickFightRequest) returns (DoQuickFightReply);

  // 瞬战结束
  rpc PostQuickFight(PostQuickFightRequest) returns (PostQuickFightReply);
}

message SafariProfileRequest {}

message SafariProfile {
  int64 safari_count     = 1;  // 剩余探险次数
  int64 max_safari_count = 2;  // 最大探险次数
}

message SafariProfileReply {
  SafariProfile safari_profile         = 1;  // 岛屿简要信息
  repeated LevelProfile level_profiles = 2;  // 关卡简要信息列表
}

message LevelProfile {
  int64 id                                                   = 1;  // 关卡ID
  bool unlocked                                              = 2;  // 是否解锁
  int64 curr_layer                                           = 3;  // 当前层数(从1开始计数，当前层是未完成的)
  int64 history_max_layer                                    = 4;  // 历史达到过的最高层数
  int64 max_layer                                            = 5;  // 最大层数
  bool finished                                              = 6;  // 关卡是否完成
  bool doing                                                 = 7;  // 关卡是否进行中
  int64 revive_count                                         = 8;  // 复活次数
  zonepb.voyagepb.cultivationpb.IslandPlayerAttr player_attr = 9;  // 玩家在该岛屿的属性值
}

message Latice {
  enum LaticeState {
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    LATICE_LOCKED = 0;  // 初始状态
    OPEN          = 1;  // 打开状态
    FINISHED      = 2;  // 完成状态
  }
  LaticeState state    = 1;  // 格子状态
  int64 event_id       = 2;  // 事件ID(0 表示没有事件)
  ExtraInfo extra_info = 3;  // 额外信息(和事件类型相关)
}

message ExtraInfo {
  zonepb.voyagepb.cultivationpb.IslandPlayerAttr enemy_attr = 1;  // 怪物属性
}

message Layer {
  int64 layer_id          = 1;  // 层数
  repeated Latice latices = 2;  // 该层所有格子
  bool entered            = 3;  // 本次探险是否进入过
}

message LevelDetail {
  int64 level_id        = 1;  // 关卡ID
  LevelProfile profile  = 2;  // 关卡基本信息
  repeated Layer layers = 3;  // 每层信息
  repeated int64 tasks  = 4;  // 任务列表
}

message StartSafariRequest {
  int64 level_id = 1;  // 关卡ID
}

message StartSafariReply {
  SafariProfile profile                                    = 1;  // 简要信息
  LevelDetail level_detail                                 = 2;  // 关卡详细信息
  repeated corepb.Item init_items                          = 3;  // 初始道具
  zonepb.voyagepb.cultivationpb.IslandPlayerAttr init_attr = 4;  // 实力换算属性值
  int64 fc                                                 = 5;  // 玩家实力值
}

message SafariDetailRequest {
  int64 level_id = 1;  // 关卡ID
}

message SafariDetailReply {
  SafariProfile profile    = 1;  // 简要信息
  LevelDetail level_detail = 2;  // 关卡详细信息
}

enum EventType {
  EVENT_TYPE_UNKNOWN = 0;  //  无
  EXIT               = 1;  // 出口
  GAIN_ITEM          = 2;  // 获得道具
  GAIN_BUFF          = 3;  // 获得BUFF
  SHORT_FIGHT        = 4;  // 瞬战
  FIGHT              = 5;  // 横版战斗
  TASK               = 6;  // 触发任务
  SHOP               = 7;  // 开启商店
}

message OpenLaticeRequest {
  int64 level_id     = 1;  // 关卡ID
  int64 layer_id     = 2;  // 层数
  int64 latice_index = 3;  // 格子
}

message OpenLaticeReply {
  Latice latice = 1;  // 更新后的格子状态
}

message FinishEventRequest {
  int64 level_id     = 1;  // 关卡ID
  int64 layer_id     = 2;  // 层数
  int64 latice_index = 3;  // 格子
  int64 event_id     = 4;  // 事件ID
  EventType type     = 5;  // 事件类型
}

message FinishEventReply {
  Latice latice                    = 1;  // 更新后的格子状态
  bool perfect_pass                = 2;  // 是否完美通关
  repeated corepb.Item layer_items = 3;  // 通关奖励
  repeated corepb.Item event_items = 4;  // 事件奖励
}

message NextLayerRequest {
  int64 level_id     = 1;  // 关卡ID
  int64 curr_layer   = 2;  // 当前层数
  int64 latice_index = 3;  // 出口格子(若为BOSS层，传递BOSS格子即可)
}

message NextLayerReply {
  LevelDetail level_detail = 1;  // 更新后的关卡信息
}

message EnterLayerRequest {
  int64 level_id = 1;  // 关卡ID
  int64 layer_id = 2;  // 层数
}

message EnterLayerReply {
  LevelDetail level_detail = 1;  // 关卡信息
}

message SkipLayerRequest {
  int64 level_id     = 1;  // 关卡ID
  int64 target_layer = 2;  // 目标层数
}

message SkipLayerReply {
  LevelDetail detail = 1;  // 跳关后的关卡信息
}

message ResetSafariRequest {
  int64 level_id = 1;  // 关卡ID
}

message ResetSafariReply {
  LevelDetail detail = 1;  // 关卡重置后的信息
}

message AchievementInfoRequest {
  int64 island_id = 1;  // 岛屿ID，若为 0，则返回所有关卡的成就信息
}

message AchievementInfo {
  int64 id        = 1;  // 成就ID
  int64 island_id = 2;  // 所属岛屿
  bool finished   = 3;  // 是否完成
  bool rewarded   = 4;  // 是否领奖
}

message AchievementInfoReply {
  map<int64, AchievementInfo> achievements = 1;  // 成就信息列表(key: 成就ID, value: 成就信息)
}

message ReceiveAchievementRewardsRequest {
  int64 island_id      = 1;  // 岛屿ID
  int64 achievement_id = 2;  // 成就ID
}

message ReceiveAchievementRewardsReply {
  AchievementInfo achievement  = 1;  // 变更后的成就信息
  repeated corepb.Item rewards = 2;  // 奖励道具列表
}

message PreFightRequest {
  int64 level_id     = 1;  // 关卡ID
  int64 layer_id     = 2;  // 层ID
  int64 latice_index = 3;  // 格子
}

message PreFightReply {
  corepb.GameStartMessage start_msg = 1;
}

message PostFightRequest {
  int64 level_id                         = 1;  // 关卡ID
  int64 layer_id                         = 2;  // 层ID
  int64 latice_index                     = 3;  // 格子
  bool success                           = 4;  // 是否胜利
  int64 remain_hp_percent                = 5;  // 剩余血量百分比
  zonepb.PveCommonInfoReport client_info = 6;  // 通用信息上报
}

message PostFightReply {
  corepb.GameOverMessage over_message = 1;
}

message PreQuickFightRequest {
  int64 level_id     = 1;  // 关卡ID
  int64 layer_id     = 2;  // 层ID
  int64 latice_index = 3;  // 格子
  int64 event_id     = 4;  // 事件ID
}

message PreQuickFightReply {
  zonepb.voyagepb.cultivationpb.IslandPlayerAttr player_attr = 1;  // 玩家自身属性
  zonepb.voyagepb.cultivationpb.IslandPlayerAttr enemy_attr  = 2;  // 敌方属性
  bool me_first                                              = 3;  // 是否我方先手
  int64 monster_id                                           = 4;  // 怪物ID
  repeated int64 monster_skills                              = 5;  // 怪物技能
  int64 revive_count                                         = 6;  // 复活次数
  repeated corepb.Item revive_items                          = 7;  // 复活所需道具
}

message DoQuickFightRequest {
  int64 level_id     = 1;  // 关卡ID
  int64 layer_id     = 2;  // 层ID
  int64 latice_index = 3;  // 格子
  int64 event_id     = 4;  // 事件ID
}

message DoQuickFightReply {
  zonepb.voyagepb.cultivationpb.IslandPlayerAttr player_attr = 1;  // 攻击完成后玩家自身属性
  zonepb.voyagepb.cultivationpb.IslandPlayerAttr enemy_attr  = 2;  // 攻击完成后敌方属性
  bool finished                                              = 4;  // 是否完成
  bool success                                               = 5;  // 如果完成，玩家是否胜利
  repeated int64 player_skills                               = 6;  // 玩家触发了的技能
  repeated int64 monster_skills                              = 7;  // 怪物触发了的技能
}

message PostQuickFightRequest {
  int64 level_id     = 1;  // 关卡ID
  int64 layer_id     = 2;  // 层ID
  int64 latice_index = 3;  // 格子
  int64 event_id     = 4;  // 事件ID
  bool success       = 5;  // 是否胜利，若瞬战失败，则结束探险
}

message PostQuickFightReply {
  LevelDetail detail = 1;  // 更新后的关卡信息
}

message SafariOverNotify {
  int64 level_id          = 1;  // 关卡ID
  int64 history_max_layer = 2;  // 历史探险最高层
  int64 curr_max_layer    = 3;  // 本次探险最高层
  int64 opened_latices    = 4;  // 开启格子数
  int64 beat_enemy_count  = 5;  // 击败敌人数
  int64 beat_boss_count   = 6;  // 击败BOSS数
  bool success            = 7;  // 是否成功
}

message SkillTriggerNotify {
  repeated int64 skill_ids                                   = 1;  // 技能ID
  zonepb.voyagepb.cultivationpb.IslandPlayerAttr player_attr = 2;  // 玩家属性值，只有变更才会传递
  int64 level_id                                             = 3;  // 关卡ID
  Layer curr_layer                                           = 4;  // 更新后当前层状态，只有变更才会传递
  repeated int64 changed_latices                             = 5;  // 改变了的格子
}
