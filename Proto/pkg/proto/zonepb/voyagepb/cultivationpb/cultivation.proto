// cs protocol
syntax = "proto3";

package zonepb.voyagepb.cultivationpb;
option go_package = "git.code.oa.com/red/zonesvr/pkg/proto/zonepb/voyagepb/cultivationpb";

import "corepb/common.proto";

service CultivationService {
  // ------------------------- 背包使用接口 -------------------------
  // 访问背包界面所有信息
  rpc QueryBagInfo(QueryBagInfoRequest) returns (QueryBagInfoReply);
  // 新物品被查看 Tips，刷新新物品状态
  rpc QueryNewItem(QueryNewItemRequest) returns (QueryNewItemReply);
  // 装备 或者 替换一个装备
  rpc EquipEquipment(EquipEquipmentRequest) returns (EquipEquipmentReply);
  // 卸下一个装备
  rpc UnloadEquipment(UnloadEquipmentRequest) returns (UnloadEquipmentReply);
  // 使用一个道具
  rpc UsePropItem(UsePropItemRequest) returns (UsePropItemReply);
  // ------------------------- 天赋使用接口 -------------------------
  // 访问天赋树界面信息
  rpc QueryTalentTreeInfo(QueryTalentTreeInfoRequest) returns (QueryTalentTreeInfoReply);
  // 提升（解锁）天赋等级
  rpc IncreaseTalentLevel(IncreaseTalentLevelRequest) returns (IncreaseTalentLevelReply);
  // ------------------------- 宠物使用接口 -------------------------
  // 访问宠物界面信息
  rpc QueryPetInfo(QueryPetInfoRequest) returns (QueryPetInfoReply);
  // 提升（解锁）宠物等级
  rpc IncreasePetLevel(IncreasePetLevelRequest) returns (IncreasePetLevelReply);
  // 设置出战宠物
  rpc SetPlayingPet(SetPlayingPetRequest) returns (SetPlayingPetReply);
  // ------------------------- 美食使用接口 -------------------------
  // 访问美食界面信息
  rpc QueryDelicacyInfo(QueryDelicacyInfoRequest) returns (QueryDelicacyInfoReply);
  // 提升（解锁）美食等级
  rpc IncreaseDelicacyLevel(IncreaseDelicacyLevelRequest) returns (IncreaseDelicacyLevelReply);
}

enum Typ {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  HOLD    = 0;  // 持有生效
  EQPMENT = 1;  // 装备(使用)生效
}

// 装备信息
message Equipment {
  enum EquipmentState {
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    EQUIPPED     = 0;  // 已装备
    UNEQUIPPED   = 1;  // 未装备
    NEWEQUIPMENT = 2;  // 新装备
  }
  enum EquippedTyp {
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DEFAUILTTYP = 0;  // 默认状态（无状态）
    EQUIP       = 1;  // 可装备
    REPLACE     = 2;  // 可替换
    UNLOAD      = 3;  // 可卸下
    BANNED      = 4;  // 已禁用 TODO: 1. 增加禁用装备逻辑 2. 设置出战宠物 ID GM 工具
  }
  enum ActivaionSuit {
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    ACTIVAION    = 0;  // 已激活
    NOTACTIVAION = 1;  // 未激活
  }
  int64 id             = 1;  // 装备 ID
  EquipmentState state = 2;  // 装备状态
  int64 count          = 3;  // 装备数量
  int64 got_time       = 4;  // 装备获取时间
  int64 suit_id        = 5;  // 该装备属于套装 ID，不属于任何套装 ID 为 -1
  Typ typ              = 6;  // 装备类型
  int64 slot_index     = 7;  // 装备槽位，未装备就是 -1
  EquippedTyp eqp_typ  = 8;  // 装备可装卸状态
  ActivaionSuit act    = 9;  // 装备套装 ID 不为 -1 情况下，套装是否激活
}

// 道具信息
message Prop {
  enum PropState {
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    NOTNEWPROP = 0;  // 非新道具
    NEWPROP    = 1;  // 新道具
  }
  int64 id        = 1;  // 道具 ID
  int64 count     = 2;  // 道具数量
  int64 got_time  = 3;  // 道具获取时间
  Typ typ         = 4;  // 生效方式
  PropState state = 5;  // 道具状态
}

// 所有道具信息
message PropInfo {
  repeated Prop props = 1;  // 道具信息
}

// 人物属性
message IslandPlayerAttr {
  int64 artifice       = 1;  // 技巧
  int64 patience       = 2;  // 耐心
  int64 patience_limit = 3;  // 耐心上限
  int64 crit           = 4;  // 暴击率
  int64 dodge          = 5;  // 闪避率
}

// buff 属性
message Buff {
  int64 buff_id          = 1;  // buff ID
  int64 effect_times     = 2;  // 剩下的生效层数
  int64 all_effect_times = 3;  // 总的生效层数
}

message BagInfo {
  repeated Equipment equipments    = 1;  // 装备信息
  repeated Prop props              = 2;  // 道具信息
  repeated Equipment equipment_bar = 3;  // 装备栏信息
  IslandPlayerAttr attr            = 4;  // 人物属性信息
  int64 pet_id                     = 5;  // 宠物 ID
  repeated Buff normal_buff        = 6;  // 拥有普通 BUFF 信息
  repeated Buff restaurant_buff    = 7;  // 拥有美食 BUFF 信息
  int64 island_id                  = 8;  // 岛屿 ID
}

message QueryBagInfoRequest {}

message QueryBagInfoReply {
  BagInfo bag_info = 1;
}

message QueryNewItemRequest {
  int64 id = 1;  // 新物品 ID
}

message QueryNewItemReply {}

message EquipEquipmentRequest {
  int64 equipment_id = 1;  // 装备装备 ID
}

message EquipEquipmentReply {
  BagInfo bag_info = 1;
}

message UnloadEquipmentRequest {
  int64 equipment_id = 1;  // 卸下装备 ID
}

message UnloadEquipmentReply {
  BagInfo bag_info = 1;
}

message UsePropItemRequest {
  int64 prop_id = 1;  // 使用道具 ID
}

message UsePropItemReply {
  BagInfo bag_info             = 1;
  repeated corepb.Item rewards = 2;  // 转化道具
}

enum TalentTreeState {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  LOCKEDTREE   = 0;  // 未解锁
  UNLOCKEDTREE = 1;  // 已解锁
}

// 天赋组状态
enum TalentGroupState {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  LOCKEDGROUP   = 0;  // 未解锁
  UNLOCKEDGROUP = 1;  // 已解锁
}

// 天赋状态
enum TalentState {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  CANLEVELUP    = 0;  // 可升级
  FULLLEVEL     = 1;  // 已满级
  LOCKEDSTATE   = 2;  // 未解锁
  UNLOCKEDSTATE = 3;  // 已解锁
}

// 天赋类型
enum TalentTyp {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  UPPERLIMIT1 = 0;  // 天赋上限等级1
  UPPERLIMIT3 = 1;  // 天赋上限等级3
  UPPERLIMIT5 = 2;  // 天赋上限等级5
}

// 天赋树属性
message TalentTree {
  int64 talent_tree_id               = 1;  // 天赋树 ID
  repeated TalentGroup talent_groups = 2;  // 天赋树里所有天赋组
  TalentTreeState talent_tree_state  = 3;  // 天赋树状态
}

// 天赋组属性
message TalentGroup {
  int64 talent_group_id               = 1;  // 天赋组 ID
  repeated Talent talents             = 2;  // 天赋组里所有天赋
  TalentGroupState talent_group_state = 3;  // 天赋组状态
}

// 天赋属性
message Talent {
  int64 talent_id          = 1;  // 天赋 ID
  int64 talent_level       = 2;  // 天赋等级
  TalentState talent_state = 3;  // 天赋状态
  TalentTyp talent_typ     = 4;  // 天赋类型
}

message QueryTalentTreeInfoRequest {}

message QueryTalentTreeInfoReply {
  repeated TalentTree talent_trees = 1;  // 当前所有的天赋树
}

message IncreaseTalentLevelRequest {
  int64 talent_tree_id  = 1;  // 天赋树 ID
  int64 talent_group_id = 2;  // 天赋组 ID
  int64 talent_id       = 3;  // 天赋 ID
}

message IncreaseTalentLevelReply {
  repeated TalentTree talent_trees = 1;  // 当前所有的天赋树
  IslandPlayerAttr attr            = 2;  // 人物属性信息
}

// 宠物状态
enum PetState {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  LOCKEDPET    = 0;  // 未解锁
  UNLOCKEDPET  = 1;  // 已解锁
  LEVELUPPET   = 2;  // 可升级
  FULLLEVELPET = 3;  // 已满级
}

// 宠物信息
message Pet {
  int64 pet_id          = 1;  // 宠物 ID
  int64 pet_level       = 2;  // 宠物等级
  int64 pet_level_limit = 3;  // 宠物上限等级
  PetState pet_state    = 4;  // 宠物状态
  bool is_playing_pet   = 5;  // 是否为出战宠物
}

message QueryPetInfoRequest {}

message QueryPetInfoReply {
  repeated Pet pets = 1;  // 所有宠物信息
}

message IncreasePetLevelRequest {
  int64 incr_pet_id = 1;  // 升级宠物 ID
}

message IncreasePetLevelReply {
  repeated Pet pets     = 1;  // 所有宠物信息
  IslandPlayerAttr attr = 2;  // 人物属性信息
}

message SetPlayingPetRequest {
  int64 playing_pet_id = 1;  // 出战宠物 ID
}

message SetPlayingPetReply {
  repeated Pet pets = 1;  // 所有宠物信息
}

// 美食状态
enum DelicacyState {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  UNLOCKEDDELICACY  = 0;  // 已解锁
  LEVELUPDELICACY   = 1;  // 可升级
  FULLLEVELDELICACY = 2;  // 已满级
}

// 美食信息
message Delicacy {
  int64 delicacy_id            = 1;  // 美食 ID
  int64 delicacy_level         = 2;  // 美食等级
  int64 delicacy_level_limit   = 3;  // 美食上限等级
  DelicacyState delicacy_state = 4;  // 美食状态
}

message QueryDelicacyInfoRequest {}

message QueryDelicacyInfoReply {
  repeated Delicacy delecacies = 1;  // 所有美食信息
}

message IncreaseDelicacyLevelRequest {
  int64 incr_delicacy_id = 1;  // 升级美食 ID
}

message IncreaseDelicacyLevelReply {
  repeated Delicacy delecacies   = 1;  // 所有美食信息
  IslandPlayerAttr attr          = 2;  // 人物属性信息
  repeated Buff restaurant_buffs = 3;  // 所有美食 Buff
}
