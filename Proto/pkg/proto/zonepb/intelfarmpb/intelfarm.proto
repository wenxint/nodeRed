// cs protocol
syntax = "proto3";

package zonepb.intelfarmpb;
option go_package = "git.code.oa.com/red/zonesvr/pkg/proto/zonepb/intelfarmpb";

import "corepb/fight_common.proto";
import "corepb/common.proto";
import "pkg/proto/zonepb/fight.proto";

service Service {
  rpc FullInfo(FullInfoRequest) returns (FullInfoReply);                 // 获取完整信息
  rpc PrePlayLevel(PrePlayLevelRequest) returns (PrePlayLevelReply);     // 挑战开始
  rpc PostPlayLevel(PostPlayLevelRequest) returns (PostPlayLevelReply);  // 挑战结算
  rpc RaidLevel(RaidLevelRequest) returns (RaidLevelReply);              // 扫荡单关，单次
  rpc RaidMultipleLevels(RaidMultipleLevelsRequest) returns (RaidMultipleLevelsReply);  // 扫荡多关卡，直到次数用完（快速扫荡）。次数/总次数不够不会返回接口错误，其他类型错误会中止扫荡并返回接口错误。
  rpc ClaimKeywordRewards(ClaimKeywordRewardsRequest) returns (ClaimKeywordRewardsReply);  // 领取关键词奖励
  rpc BuyGeneralQuota(BuyGeneralQuotaRequest) returns (BuyGeneralQuotaReply);              // 购买总次数
  rpc BuyPerLevelQuota(BuyPerLevelQuotaRequest) returns (BuyPerLevelQuotaReply);           // 购买关卡次数
}

message FullInfoRequest {}

message FullInfoReply {
  map<int64, LevelInfo> level_infos = 1;  // 关卡信息，key 为关卡序号

  int64 general_quota_left = 2;  // 剩余总挑战次数
  int64 general_quota_cost_index = 3;  // 总次数购买信息游标（从 1 开始），比如若值为 1，这次购买需要花费信息是 general_quota_costs[0]（lua 的话为 general_quota_costs[1]）

  repeated CostInfo per_level_quota_costs = 4;  // 购买每关次数花费信息序列
  repeated CostInfo general_quota_costs   = 5;  // 购买总次数花费信息序列
}

message LevelInfo {
  enum State {
    UNPLAYABLE_UNKNOWN                      = 0;    // 未知
    UNPLAYABLE_PREVIOUS_LEVEL_NOT_COMPLETED = 1;    // 不可玩，前置关卡未通关
    UNPLAYABLE_CONDITION                    = 2;    // 不可玩，开启条件未满足
    UNPLAYABLE_NOT_REPLAYABLE               = 3;    // 不可玩，已通关一次性关卡
    UNPLAYABLE_NOT_ENOUGH_PER_LEVEL_QUOTA   = 4;    // 不可玩，关卡次数不足
    UNPLAYABLE_NOT_ENOUGH_GENERAL_QUOTA     = 5;    // 不可玩，总次数不足
    PLAYABLE                                = 100;  // 可玩
  }
  State state                              = 1;  // 关卡可玩状态
  bool completed                           = 2;  // 是否已通关
  repeated corepb.Item playthrough_rewards = 3;  // 首通奖励
  repeated corepb.Item replay_rewards      = 4;  // 重玩奖励
  repeated corepb.Item keyword_rewards     = 5;  // 关键词奖励
  map<int64, bool> keyword_rewards_claimed =
      6;  // 关键词奖励是否已领取，按游标（从 0 开始），比如配置表里这关关键词配置是“热血; 佐罗”，则这里 key=0 是“热血”关键词奖励是否已领取，key=1 是“佐罗”关键词奖励是否已领取
  int64 per_level_quota_left = 7;  // 剩余关卡次数
  int64 per_level_quota_cost_index = 8;  // 关卡次数购买信息游标（从 1 开始），比如若值为 1，这次购买需要花费信息是 per_level_quota_costs[0]（lua 的话为 per_level_quota_costs[1]）
}

message CostInfo {
  corepb.Item cost = 1;  // 购买花费，其中 count 为该道具所需数量；为 null 或者结构中道具 ID 为 0 表示免费
}

message PrePlayLevelRequest {
  int64 seq = 1;  // 关卡序号
}

message PrePlayLevelReply {
  corepb.GameStartMessage start_msg = 1;
}

message PostPlayLevelRequest {
  int64 seq                              = 1;  // 关卡序号
  bool success                           = 2;  // 是否成功
  corepb.GameDropPackage drop            = 3;  // 上报一下真正掉落的物品（放怪物掉落里），后台需校验
  zonepb.PveCommonInfoReport client_info = 4;  // 通用信息上报
}

message PostPlayLevelReply {
  bool playthrough                    = 1;  // 是否首次通关
  bool success                        = 2;  // 是否实际挑战成功
  repeated corepb.Item rewards        = 3;  // 获得的奖励
  corepb.GameOverMessage over_message = 4;
}

message RaidLevelRequest {
  int64 seq = 1;  // 关卡序号
}

message RaidLevelReply {
  repeated corepb.Item rewards = 1;  // 获得的奖励
}

message RaidMultipleLevelsRequest {
  repeated int64 seqs = 1;  // 关卡序号列表，在次数限制内按顺序扫荡
}

message RaidMultipleLevelsReply {
  message RewardInfo {
    int64 seq                    = 1;  // 关卡序号
    repeated corepb.Item rewards = 2;  // 获得的奖励
  };
  repeated RewardInfo reward_infos = 1;  // 扫荡成功的奖励信息，单关卡多次成功扫荡不合并，即传入关卡 1 和 2，关卡 1 成功扫荡了 2 次，关卡 2 成功扫荡 3 次，会有 5 个 RewardInfo
}

message ClaimKeywordRewardsRequest {
  int64 seq                                           = 1;  // 关卡序号
  int64 keyword_index                                 = 2;  // 关键词游标（从 0 开始）
  repeated corepb.GiftSelectedItem gift_selected_item = 3;  // 可选礼包选中礼包道具信息
}

message ClaimKeywordRewardsReply {
  repeated corepb.Item rewards = 1;  // 获得的奖励
}

message BuyGeneralQuotaRequest {}

message BuyGeneralQuotaReply {}

message BuyPerLevelQuotaRequest {
  int64 seq = 1;  // 关卡序号
}

message BuyPerLevelQuotaReply {}
