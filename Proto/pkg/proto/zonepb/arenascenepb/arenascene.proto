// cs protocol
syntax = "proto3";

package zonepb.arenascenepb;
option go_package = "git.code.oa.com/red/zonesvr/pkg/proto/zonepb/arenascenepb";


import "corepb/common.proto";
import "pkg/proto/zonepb/dressingpb/dressing.proto";

service CSService {
  // 请求所有场景信息
  rpc QueryArenaSceneInfo(QueryArenaSceneInfoRequest) returns (QueryArenaSceneInfoReply);
  // 请求单个场景信息
  rpc QueryArenaSceneInfoByItemID(QueryArenaSceneInfoByItemIDRequest) returns (QueryArenaSceneInfoByItemIDReply);
  // 操作场景
  rpc OperationArenaScene(OperationArenaSceneRequest) returns (OperationArenaSceneReply);
}

message QueryArenaSceneInfoRequest {}

message QueryArenaSceneInfoReply {
  repeated ArenaScene arena_scenes = 1;  // 场景列表
}

message QueryArenaSceneInfoByItemIDRequest {
  int64 arena_scene_item_id = 1;  // 场景道具ID
}

message QueryArenaSceneInfoByItemIDReply {
  ArenaScene arena_scene               = 1;  // 场景信息
  zonepb.dressingpb.TimeInfo time_info = 2;  // 配置限时信息
}

enum ArenaSceneStatus {
  STATUS_UNKNOWN = 0;  // 未知状态
  LOCKED         = 1;  // 锁定中，未获得
  UNLOCKED       = 2;  // 已拥有，未使用
  NEW            = 3;  // 新获得
  USING          = 4;  // 使用中
}

enum ArenaSceneType {
  TYPE_UNKNOWN = 0;  // 未知类型
  ETERNAL      = 1;  // 永久类型
  LIMITED      = 2;  // 限时类型
}

enum ArenaSceneCategory {
  CATEGORY_UNKNOWN = 0;  // 无类别
  ACHIEVEMENT      = 1;  // 成就类型
  HONOR            = 2;  // 荣誉类型
  ACTIVITY         = 3;  // 活动类型
  SPECIAL          = 4;  // 特殊类型
}

message ArenaScene {
  int64 arena_scene_id        = 1;  // 场景 ID
  ArenaSceneStatus status     = 2;  // 场景状态
  ArenaSceneType type         = 3;  // 场景类型
  ArenaSceneCategory category = 4;  // 场景类别
  int64 expire_at             = 5;  // 到期时间(Unix Second)，若为0则表示永久
  corepb.FightAttr attr       = 6;  // 属性加成
}

enum OperationType {
  OP_UNKNOWN       = 0;  // 未知操作
  QUERY_NEW        = 1;  // 访问新场景
  USE_SCENE        = 2;  // 使用场景
  CANCEL_USE_SCENE = 3;  // 取消使用场景
}

message OperationArenaSceneRequest {
  int64 arena_scene_id  = 1;  // 场景 ID
  OperationType op_type = 2;  // 操作类型
}

message OperationArenaSceneReply {
  ArenaScene arena_scene = 1;  // 被操作的场景
}