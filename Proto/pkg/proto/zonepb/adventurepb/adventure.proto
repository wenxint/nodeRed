// cs protocol
syntax = "proto3";

package zonepb.adventurepb;
option go_package = "git.code.oa.com/red/zonesvr/pkg/proto/zonepb/adventurepb";

import "corepb/fight_common.proto";
import "corepb/common.proto";
import "pkg/proto/zonepb/fight.proto";
import "corepb/loadout_comm.proto";
import "clientpb/record.proto";

service Service {
  rpc ChapterInfos(ChapterInfosRequest) returns (ChapterInfosReply);                                         // 获取所有章节信息
  rpc LevelInfosByChapterID(LevelInfosByChapterIDRequest) returns (LevelInfosByChapterIDReply);              // 按章节 ID 获取其下所有关卡信息
  rpc PreCompleteLevel(PreCompleteLevelRequest) returns (PreCompleteLevelReply);                             // 挑战开始
  rpc PostCompleteLevel(PostCompleteLevelRequest) returns (PostCompleteLevelReply);                          // 挑战结算
  rpc StarRewardsInfos(StarRewardsInfosRequest) returns (StarRewardsInfosReply);                             // 获取星级奖励信息
  rpc ClaimStarRewards(ClaimStarRewardsRequest) returns (ClaimStarRewardsReply);                             // 领取星级奖励
  rpc BatchClaimStarRewards(BatchClaimStarRewardsRequest) returns (BatchClaimStarRewardsReply);              // 批量领取星级奖励
  rpc RecordUnlockingModalShown(RecordUnlockingModalShownRequest) returns (RecordUnlockingModalShownReply);  // 记录解锁剧情卡弹窗是否已显示
  rpc SkipExperience(SkipExperienceRequest) returns (SkipExperienceReply);           // 跳过体验流程（重要！体验流程只包含主线关卡时，此协议才有效）
  rpc EnterSettling(EnterSettlingRequest) returns (EnterSettlingReply);              // 进入主线结算
  rpc FinishSettling(FinishSettlingRequest) returns (FinishSettlingReply);           // 完成主线结算
  rpc LoadoutInfo(LoadoutInfoRequest) returns (LoadoutInfoReply);                    // 获取主线阵容信息
  rpc ApplyLoadout(ApplyLoadoutRequest) returns (ApplyLoadoutReply);                 // 应用主线阵容
  rpc SetStoryBuddyFlag(SetStoryBuddyFlagRequest) returns (SetStoryBuddyFlagReply);  // 设置是否使用剧情伙伴
  rpc RaidCompleteLevel(RaidCompleteLevelRequest) returns (RaidCompleteLevelReply);  // 直接完成关卡
}

// ChapterInfos

message ChapterInfosRequest {
  // nothing
}

message ChapterInfosReply {
  map<int64, ChapterInfo> chapter_infos = 1;  // key 为章节 ID 的各章节信息
}

message ChapterInfo {
  int64 chapter_id  = 1;  // 章节 ID
  bool open         = 2;  // 是否解锁
  int64 total_stars = 3;  // 总星数
  reserved 4;
  bool unlocking_modal_shown = 5;  // 是否已经展示过过章节解锁弹窗
  bool is_fish_location_able = 6;  // 钓点是否可用
}

// LevelInfosByChapterID

message LevelInfosByChapterIDRequest {
  int64 chapter_id = 1;  // 章节 ID
}

message LevelInfosByChapterIDReply {
  map<int64, LevelInfo> level_infos = 1;  // key 为关卡 ID 的各关卡信息
  bool story_buddy_flag             = 2;  // 是否是剧情伙伴
}

message LevelInfo {
  // int64 level_id = 1; // 关卡 ID
  int64 quest_id = 11;  // 主线 ID
  bool completed = 2;   // 是否已通关
  enum LevelState {
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    PLAYABLE                                = 0;    // 可玩
    UNPLAYABLE_PREVIOUS_LEVEL_NOT_COMPLETED = 1;    // 不可玩，前置关卡未通关
    UNPLAYABLE_NOT_ENOUGH_QUOTA             = 2;    // 不可玩，次数不够
    UNPLAYABLE_NOT_ENOUGH_PLAYER_LEVEL      = 3;    // 不可玩，玩家等级不够
    UNPLAYABLE_NOT_ENOUGH_STAMINA           = 4;    // 不可玩，玩家体力不够
    UNPLAYABLE_CHAPTER_NOT_OPEN             = 5;    // 不可玩，该章节还未解锁
    UNPLAYABLE_NOT_TO_OPEN_TIME             = 6;    // 不可玩，该关卡还未到开放时间
    UNPLAYABLE_UNKNOWN                      = 100;  // 不可玩，未知问题
  }
  LevelState level_state                = 3;  // 关卡状态
  repeated corepb.Item first_time_drops = 7;  // 首通掉落展示
  int64 stars                           = 9;  // 已获得几颗星
  repeated bool stars_state             = 10;
  int64 fight_buddy_id                  = 12;  // 主战伙伴ID
  int64 story_buddy_id                  = 13;  // 剧情伙伴ID
  int64 open_ts                         = 14;  // 关卡开放时间戳，当level_state为UNPLAYABLE_NOT_TO_OPEN_TIME时有效
}

// PreCompleteLevel

message PreCompleteLevelRequest {
  // int64 level_id = 1; // 要挑战的关卡 ID
  int64 quest_id = 2;  // 要挑战的主线 ID
}

message PreCompleteLevelReply {
  // 支持过关卡合并，所以这里需对应多个副本的信息
  repeated corepb.GameStartMessage start_msg = 1;
}

// PostCompleteLevel

message PostCompleteLevelRequest {
  // int64 level_id = 1; // 被挑战的关卡 ID
  int64 quest_id                         = 2;  // 被挑战的主线 ID
  bool success                           = 4;  // 是否挑战成功
  int64 stars                            = 5;  // 客户端计算的获得星数
  repeated bool stars_state              = 6;
  corepb.GameDropPackage drop            = 7;   // 上报一下真正掉落的物品（放怪物掉落里），后台需校验
  zonepb.PveCommonInfoReport client_info = 8;   // 通用信息上报
  repeated clientpb.DungeonRecord record = 9;   // 对局数据，校验用
  repeated bytes dungeon_record_bytes    = 10;  // 对局数据，优先用这个
  string record_file_name                = 11;  // 对局数据文件名
}

message PostCompleteLevelReply {
  bool first_time             = 1;  // 若挑战成功，是否首通
  repeated corepb.Item awards = 2;  // 获得的奖励
  int64 stars                 = 6;  // 获得的星数
  int64 previous_stars        = 7;  // 之前的星数
  bool success                = 4;  // 是否实际挑战成功
  repeated bool stars_state   = 8;

  corepb.GameOverMessage over_message = 5;
}

message RaidCompleteLevelRequest {
  int64 quest_id                         = 1;  // 被挑战的主线 ID
  zonepb.PveCommonInfoReport client_info = 2;  // 通用信息上报
}

message RaidCompleteLevelReply {
  bool first_time                     = 1;  // 若挑战成功，是否首通
  repeated corepb.Item awards         = 2;  // 获得的奖励
  int64 stars                         = 3;  // 获得的星数
  int64 previous_stars                = 4;  // 之前的星数
  bool success                        = 5;  // 是否实际挑战成功
  repeated bool stars_state           = 6;
  corepb.GameOverMessage over_message = 7;
}

message StarRewardsInfo {
  bool claimable               = 1;  // 是否可领取
  bool claimed                 = 2;  // 是否已领取
  int64 stars                  = 3;  // 这一阶段所需星星数
  repeated corepb.Item rewards = 4;  // 这一阶段会给的奖励
}

message StarRewardsInfosRequest {}

message StarRewardsInfosReply {
  map<int64, StarRewardsInfo> star_rewards_infos = 1;  // 各阶段星级奖励状态，第一阶段 key 为 0
}

message ClaimStarRewardsRequest {
  int64 tier                                          = 1;  // 要领取第几阶段的星级奖励，第一阶段是 0
  repeated corepb.GiftSelectedItem gift_selected_item = 2;  // 可选礼包选中礼包道具信息
}

message ClaimStarRewardsReply {
  repeated corepb.Item rewards = 1;
}

message BatchClaimStarRewardsRequest {
  int64 tier = 1;  // 优先领取第几阶段的星级奖励，第一阶段是 0
}

message BatchClaimStarRewardsReply {
  repeated corepb.Item rewards = 1;
  repeated int64 tiers         = 2;  // 成功领取到的阶段列表
}

message RecordUnlockingModalShownRequest {
  int64 chapter_id = 1;  // 章节 ID
  bool shown       = 2;  // true = 已显示
}

message RecordUnlockingModalShownReply {}

message SkipExperienceRequest {}

message SkipExperienceReply {}

// NTF

message GMForceStartLevelNTF {
  corepb.GameStartMessage start_msg = 1;
}

message EnterSettlingRequest {}

message EnterSettlingReply {}

message FinishSettlingRequest {}

message FinishSettlingReply {}

message LoadoutInfoRequest {
  string loadout_type = 1;  // 阵容类型
  int64 quest_id      = 2;  // 主线ID
}

message LoadoutInfoReply {
  corepb.LoadoutProfile profile = 1;  // 阵容配置
  corepb.Loadout loadout        = 2;  // 阵容
  bool valid                    = 3;  // 当前阵容是否合法
  bool adjusted                 = 4;  // 当前阵容检验时是否有过不合法的项目但已经被自动调整
}

message ApplyLoadoutRequest {
  string loadout_type         = 1;  // 阵容类型。具体有哪些值由玩法系统确定
  corepb.Loadout loadout      = 2;  // 阵容
  int64 quest_id              = 3;  // 主线ID
  bool isset_story_buddy_flag = 4;  // 是否设置剧情伙伴flag
  bool story_buddy_flag       = 5;  // 剧情伙伴flag
}

message ApplyLoadoutReply {
  // 若要设置的阵容不合法，会通过 rpc 错误告知。
}

message SetStoryBuddyFlagRequest {
  bool story_buddy_flag = 1;
}

message SetStoryBuddyFlagReply {}
