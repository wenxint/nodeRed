// cs protocol
// 小队协战
syntax = "proto3";

package zonepb.jointbattlepb;
option go_package = "git.code.oa.com/red/zonesvr/pkg/proto/zonepb/jointbattlepb";


import "corepb/common.proto";

service CSService {
  // 小队协战主界面信息
  rpc JointBattleInfo(JointBattleInfoRequest) returns (JointBattleInfoReply);
  // 收下兑换屋奖励
  rpc GetExchange(GetExchangeRequest) returns (GetExchangeReply);
  // 刷新兑换屋奖励
  rpc RefreshExchange(RefreshExchangeRequest) returns (RefreshExchangeReply);
  // 兑换兑换屋奖励
  rpc DoExchange(DoExchangeRequest) returns (DoExchangeReply);
  // 兑换屋信息，老协议，保留一段时间后删除，客户端请不要使用
  rpc QueryExchange(QueryExchangeRequest) returns (QueryExchangeReply);
  // 是否开启多倍奖励
  rpc SwitchMultiReward(SwitchMultiRewardRequest) returns (SwitchMultiRewardReply);
  // 扫荡
  rpc RaidBattle(RaidBattleRequest) returns (RaidBattleReply);
  // 幸运出航日奖励补领
  rpc Supplement(SupplementRequest) returns (SupplementReply);
  // 专属管家扫荡
  rpc SweepBattle(SweepBattleRequest) returns (SweepBattleReply);
}

service SSService {
  // 外围状态数据
  rpc PlayerStateInfo(PlayerStateInfoRequest) returns (PlayerStateInfoReply);
}

message PlayerStateInfoRequest {}

message PlayerStateInfoReply {
  bool is_already_fight           = 1;  // 是否已经挑战过小队协战
  bool is_last_rainbow_level_lose = 2;  // 上一次彩虹关失败状态（false：成功，true：失败）
  repeated int64 played_dungeon   = 3;  // 已游玩关卡
  int64 not_rainbow_cnt           = 4;  // 未能游玩到彩虹关的次数
}

message ExchangeInfo {
  corepb.Item exchange_item          = 1;  // 兑换道具 以及当前拥有的数量
  corepb.Item refresh_item           = 2;  // 刷新道具 以及当前拥有的数量
  int64 exchange_cost                = 3;  // 兑换需要消耗的兑换道具个数
  int64 refresh_cost                 = 4;  // 刷新需要消耗的刷新道具个数
  repeated corepb.Item exchange_list = 5;  // 已经兑换到的奖励（目前只有一份奖励，为了支持扩展还是保持使用数组）
}

message GetExchangeRequest {}

message GetExchangeReply {
  ExchangeInfo exchange_info   = 1;
  repeated corepb.Item rewards = 2;  // 获得的道具
}

message JointBattleInfoRequest {}

enum ChestState {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  LOCKED            = 0;  // 未解锁
  TOMORROW_UNLOCKED = 1;  // 明日解锁
  UNLOCKED          = 2;  // 已经解锁
  OPENED            = 3;  // 已经打开
}

enum Grade {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  SILVER = 0;  // 银宝箱
  GOLD   = 1;  // 金宝箱
}

// 小队协战主界面宝箱信息
message WeeklyChest {
  ChestState chest_state     = 1;  // 宝箱状态
  Grade grade                = 2;  // 宝箱等级
  repeated corepb.Item items = 3;  // 已打开宝箱的道具奖励列表
  bool is_multi_reward       = 4;  // 是否为多倍奖励
  bool is_new                = 5;  // 是否为新
  int64 multi_reward_times   = 6;  // 多倍奖励倍数
}

message JointBattleInfoReply {
  ExchangeInfo exchange_info              = 1;   // 兑换屋信息
  repeated WeeklyChest weekly_chests      = 2;   // 本周所有宝箱详情（一周包含六个宝箱）
  bool is_multi_reward                    = 3;   // 是否开启多倍奖励
  map<int64, int64> multi_cost            = 4;   // 多倍奖励消耗
  bool is_multi_reward_visible            = 5;   // 多倍奖励是否可见
  bool is_last_rainbow_level_lose         = 6;   // 上次彩虹关是否失败
  bool can_raid_battle                    = 7;   // 是否可以扫荡
  bool need_daily_redpoint                = 8;   // 是否需要显示每日红点
  bool is_already_fight                   = 9;   // 是否已经挑战过小队协战
  bool can_raid_battle_super_captain      = 10;  // 是否可以特权扫荡
  bool is_luck_sailing                    = 11;  // 幸运出航日是否开启
  bool is_supplement                      = 12;  // 幸运出航日奖励是否可以补领
  repeated corepb.Item supplement_rewards = 13;  // 幸运出航日可额外补领奖励
}

message RefreshExchangeRequest {}

message RefreshExchangeReply {
  ExchangeInfo exchange_info = 1;
}

message DoExchangeRequest {}

message DoExchangeReply {
  ExchangeInfo exchange_info = 1;
}

message QueryExchangeRequest {}

message QueryExchangeReply {
  ExchangeInfo exchange_info = 1;
}

message SwitchMultiRewardRequest {
  bool is_open = 1;
}

message SwitchMultiRewardReply {}

message RaidBattleRequest {}

message RaidBattleReply {
  repeated corepb.Item rewards = 1;  // 扫荡奖励
  int64 platform_privilege_id  = 2;  // 平台特权ID
}

message SupplementRequest {}

message SupplementReply {
  repeated corepb.Item rewards = 1;  // 补领奖励
}

message SweepBattleRequest {
  bool is_selected_triple = 1;  // 是否选择三倍奖励
}

message SweepBattleReply {
  repeated corepb.Item rewards = 1;  // 扫荡奖励
}
