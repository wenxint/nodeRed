// cs protocol
syntax = "proto3";

package zonepb.raidpb;
option go_package = "git.code.oa.com/red/zonesvr/pkg/proto/zonepb/raidpb";


import "corepb/common.proto";
import "google/protobuf/any.proto";

service RaidService {
  rpc RecentPartners(RecentPartnersRequest) returns (RecentPartnersReply);
  rpc RaidInfo(RaidInfoRequest) returns (RaidInfoReply);
  rpc Exchange(ExchangeRequest) returns (ExchangeReply);
  rpc Sweep(SweepRequest) returns (SweepReply);
  rpc RaidList(RaidListRequest) returns (RaidListReply);  // 团本的第一条协议
  // UnlockedRedpointShown 记录团本解锁的红点已经显示过
  rpc UnlockedRedpointShown(UnlockedRedpointShownRequest) returns (UnlockedRedpointShownReply);
  rpc ClearDailyResetFlag(ClearDailyResetFlagRequest) returns (ClearDailyResetFlagReply);

  // 以下是司法岛团本的自定义rpc
  rpc EniesLobbyClaimDorikiTask(EniesLobbyClaimDorikiTaskRequest) returns (EniesLobbyClaimDorikiTaskReply);
  rpc LearnDorikiTalent(LearnDorikiTalentRequest) returns (LearnDorikiTalentReply);
}

message EniesLobbyClaimDorikiTaskRequest {
  int64 task_id = 1;  // 任务id
}

message EniesLobbyClaimDorikiTaskReply {
  EniesLobbyCustomData custom_data = 1;
}

message UnlockedRedpointShownRequest {
  int64 group_type = 1;  // 团本类型
}

message UnlockedRedpointShownReply {}

message RecentPartnersRequest {}

message RecentPartnersReply {
  repeated Partner partners = 1;  // 最近的队友
}

message Partner {
  int64 gid                                = 1;  // 玩家id
  int64 level                              = 2;  // 玩家等级
  int64 fc                                 = 3;  // 玩家战斗力
  string name                              = 4;  // 玩家名字
  bool is_online                           = 5;  // 是否在线
  corepb.PersonalDisplayInfo personal_info = 6;  // 个人显示信息
  repeated int64 open_systems              = 7;  // 系统开启信息
}

message ClearDailyResetFlagRequest {
  int64 group_type = 1;  // 团本类型
}

message ClearDailyResetFlagReply {}

message RaidInfoRequest {
  int64 group_type = 1;  // 团本类型
}

message RaidInfoReply {
  map<int64, bool> stage_reward_status = 1;  // 玩家的关卡奖励领取状态
  SweepStatus sweep_status             = 2;  // 扫荡状态
  int64 exchange_id                    = 4;  // 兑换id
  int64 punish_timestamp               = 5;  // 惩罚时间戳
  google.protobuf.Any custom_data      = 6;  // 自定义信息
  repeated corepb.Item exchange_gains  = 7;  // 兑换的奖励
  bool is_daily_reset                  = 8;  // 是否每日重置(客户端用于判断是否要飘字)
}

// 司法岛团本自定义数据
message EniesLobbyCustomData {
  int64 doriki                                       = 1;  // 道力
  map<int64, DorikiTask> doriki_tasks                = 2;  // 道力任务信息 task_id -> DorikiTask
  map<int64, DorikiTalent> doriki_talents            = 3;  // 天赋信息 talent_id -> DorikiTalent // 兼容旧包，实际上已废弃
  int64 previous_unlock_doriki_talent_group          = 4;  // 之前解锁的道力组 // 兼容旧包，实际上已废弃
  map<int64, DorikiTalentGroup> doriki_talent_groups = 5;  // 道力组信息 group_id -> DorikiTalentGroup
}

message DorikiTalentGroup {
  int64 group_id                          = 1;  // 道力组id
  int64 unlock_doriki_first               = 2;  // 解锁第一个天赋需要的道力
  int64 unlock_doriki_second              = 3;  // 解锁第二个天赋需要的道力
  int64 unlock_doriki_third               = 4;  // 解锁第三个天赋需要的道力
  map<int64, DorikiTalent> doriki_talents = 5;  // 天赋信息 talent_id -> DorikiTalent
}

message DorikiTask {
  int64 task_id        = 1;  // 任务ID
  int64 progress       = 2;  // 进度
  int64 total_progress = 3;  // 总共需要的进度
  bool rewarded        = 4;  // 是否已领取
  int64 unlock_ts      = 5;  // 解锁的时间戳
  int64 doriki_gain    = 6;  // 领取的道力
  int64 prev_task_id   = 7;  // 前置任务id 为0表示没有前置任务
  int64 group_id       = 8;  // 道力任务组id
}

message DorikiTalent {
  int64 talent_id     = 1;
  int64 group         = 2;  // 天赋组
  int64 doriki_needed = 3;  // 需要的道力
  bool is_learned     = 4;  // 是否已学习
}

message LearnDorikiTalentRequest {
  int64 talent_id       = 1;  // 天赋id
  int64 reset_talent_id = 2;  // 重置的天赋id(允许玩家在学习天赋的同时，重置之前学习的天赋)
}

message LearnDorikiTalentReply {
  EniesLobbyCustomData custom_data = 1;
}

enum SweepStatus {
  SWEEP_STATUS_UNKNOWN  = 0;
  CAN_SWEEP             = 1;  // 可以扫荡
  ALL_REWARD_GAINED     = 2;  // 所有奖励已领取
  TARGET_NOT_SUCCESS    = 3;  // 目标团本未通关过
  THIS_WEEK_NOT_SUCCESS = 4;  // 本周未通关过
  NO_SWEEP_ITEM         = 5;  // 没有扫荡道具
  NO_STAGE_REWARD_TIMES = 6;  // 没有阶段奖励次数
}

// 一个具体的团本，对应配置RaidGroup的一行
message RaidGroupInfo {
  int64 group_type         = 1;  // 团本类型
  bool need_show_redpoints = 2;  // 是否需要显示红点
  bool is_extreme          = 3;  // 是否是极限模式
  int64 require_fc         = 4;  // 要求战力
  int64 suggested_fc       = 5;  // 推荐战力

  bool can_challenge = 6;  // 是否可以挑战(玩家是否达到了该团本的参会与要求)
}

// 一种类型的团本，如司法岛，里面有多个团本（如普通模式、极限模式）
message RaidCategoryInfo {
  int64 category                     = 1;  // 团本分类,实际值为配置中的枚举HandleType
  repeated RaidGroupInfo raid_groups = 2;  // 团本信息
}

message RaidListRequest {}

message RaidListReply {
  repeated int64 group_types         = 1;  // 【废弃】解锁的团本类型
  repeated int64 need_show_redpoints = 2;  // 【废弃】需要显示红点的团本类型

  repeated RaidCategoryInfo raid_categories = 3;  // 团本分类信息
}

message ExchangeRequest {}

message ExchangeReply {
  repeated corepb.Item gain = 1;  // 兑换所得
}

message SweepRequest {
  int64 group_type = 1;  // 团本类型
}

message SweepReply {
  map<int64, StageReward> stage_rewards = 1;  // 阶段奖励
}

message StageReward {
  repeated corepb.Item items = 1;  // 奖励
}

message FirstUnlockNotify {
  int64 group_type = 1;  // 团本类型
}