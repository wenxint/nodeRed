// cs protocol
syntax = "proto3";

package zonepb.mirrorpb;
option go_package = "git.code.oa.com/red/zonesvr/pkg/proto/zonepb/mirrorpb";


import "pkg/proto/zonepb/basic_info.proto";
import "corepb/loadout_comm.proto";
import "corepb/common.proto";

service Service {
  rpc QueryChapterInfo(QueryChapterInfoRequest) returns (QueryChapterInfoReply);                                // 章节页面信息
  rpc QueryMirrorInfo(QueryMirrorInfoRequest) returns (QueryMirrorInfoReply);                                   // 场景内的信息
  rpc BuyRewardPack(BuyRewardPackRequest) returns (BuyRewardPackReply);                                         // 购买限时礼包
  rpc QueryCardSelection(QueryCardSelectionRequest) returns (QueryCardSelectionReply);                          // 查询卡牌选择
  rpc SelectCard(SelectCardRequest) returns (SelectCardReply);                                                  // 选择卡牌
  rpc RefreshSelection(RefreshSelectionRequest) returns (RefreshSelectionReply);                                // 刷新卡牌选择
  rpc ResetAllCardSelection(ResetAllCardSelectionRequest) returns (ResetAllCardSelectionReply);                 // 重置所有卡牌选择
  rpc QueryCardRecords(QueryCardRecordsRequest) returns (QueryCardRecordsReply);                                // 查询卡牌记录
  rpc ResetCurrentProgress(ResetCurrentProgressRequest) returns (ResetCurrentProgressReply);                    // 重置当前进度(到本章第一关)
  rpc PrepareForReplay(PrepareForReplayRequest) returns (PrepareForReplayReply);                                // 准备重玩(数据初始化)
  rpc LoadoutInfo(LoadoutInfoRequest) returns (LoadoutInfoReply);                                               // 获取阵容信息
  rpc ApplyLoadout(ApplyLoadoutRequest) returns (ApplyLoadoutReply);                                            // 设置阵容
  rpc GetTriggerRecommendStyleID(GetTriggerRecommendStyleIDRequest) returns (GetTriggerRecommendStyleIDReply);  // 获取触发伙伴引导的流派ID(如果没有，返回0)
  rpc QueryChpaterCompleteDetail(QueryChpaterCompleteDetailRequest) returns (QueryChpaterCompleteDetailReply);  // 查询章节历史记录
  rpc ChapterRaid(ChapterRaidRequest) returns (ChapterRaidReply);                                               // 章节速通
  rpc ClearRewardNeedToShow(ClearRewardNeedToShowRequest) returns (ClearRewardNeedToShowReply);                 // 清除需要展示的奖励
}

message ClearRewardNeedToShowRequest {}

message ClearRewardNeedToShowReply {}

message ChapterRaidRequest {
  int64 chapter_id = 1;
}
message ChapterRaidReply {
  int64 last_quest_id          = 1;  // 最后一关ID
  repeated corepb.Item rewards = 2;  // 奖励
}

message QueryChpaterCompleteDetailRequest {
  int64 chapter_id = 1;
}

message QueryChpaterCompleteDetailReply {
  CompleteDetail complete_detail = 1;
}

message QueryMirrorInfoRequest {}

message QueryMirrorInfoReply {
  reserved 2, 3, 4, 6;

  int64 quest_id = 1;  // 玩家当前所处的questID
  // DailyReward daily_rewards           = 4;  // 废弃不用，稍后删掉
  corepb.Loadout loadout                   = 5;   // 阵容
  repeated RewardPack reward_packs         = 7;   // 所拥有的限时礼包
  bool is_triggered_reward_pack            = 8;   // 是否新增加了限时礼包
  DailyRewardPopup daily_reward_popup      = 9;   // 本次获得的每日奖励，如果为空说明没有，无需弹每日奖励弹窗
  repeated Card current_cards              = 10;  // 当前卡牌
  int64 remain_reset_times                 = 11;  // 剩余重置次数
  int64 max_reset_times                    = 12;  // 最大重置次数
  repeated corepb.Item reward_need_to_show = 13;  // 需要展示的奖励列表
  int64 top_quest_id                       = 14;  // 玩家最高关卡ID
  int64 top_chapter_id                     = 15;  // 玩家最高章节ID
  // map<int64, int64> quest_complete_mss        = 16;  // 当前进度关卡完成时间(quest_id -> complete_ms)
  bool current_progress_is_reset              = 17;  // 当前镜子进度过程中是否重置过
  map<int64, CompleteDetail> complete_details = 18;  // 历史通关记录详细信息 chpater_id -> CompleteDetail
  map<int64, int64> rank_ddls                 = 19;  // 排行榜截止时间 chapter_id -> ddl
  bool is_luck_sailing                        = 20;  // 幸运出航日是否开启
}

// 每日奖励展示
message DailyRewardPopup {
  int64 day_count            = 1;  // 本次发放了几天的奖励
  repeated corepb.Item items = 2;  // 奖励列表
}

message QueryChapterInfoRequest {}

message QueryChapterInfoReply {
  message ChapterInfo {
    int64 chapter_id              = 1;
    repeated MirrorRankItem ranks = 2;  // 好友在这一章的排名[废弃]
  }
  int64 quest_id                = 1;  // 挑战进度, 最高层数
  repeated ChapterInfo chapters = 2;  // 章节信息
}

message MirrorRankItem {
  zonepb.BasicInfo basic_info = 1;
  int64 quest_id              = 2;  // 爬墙进度
  int64 rank                  = 3;  // 排名：从0开始计数
}

// 限时礼包
message RewardPack {
  int64 reward_pack_id = 1;  // 限时礼包 ID
  int64 expired_time   = 2;  // 限时礼包过期时间
}

message RewardPackForShop {
  int64 reward_pack_id        = 1;  // 限时礼包 ID
  int64 expired_time          = 2;  // 限时礼包过期时间
  int64 add_time              = 3;  // 限时礼包添加时间
  repeated corepb.Item awards = 4;  // 限时礼包内容
  repeated corepb.Item cost   = 5;  // 限时礼包价格
  string title                = 6;  // 限时礼包标题
  string desc                 = 7;  // 限时礼包描述
  bool is_direct_buy          = 8;  // 是否直购
}

message BuyRewardPackRequest {
  int64 reward_pack_id = 1;  // 限时礼包 ID
}

message BuyRewardPackReply {}

message QueryCardSelectionRequest {
  bool is_current_progress = 1;  // 是否是当前进度(即玩家在镜中世界的最高进度)
  int64 quest_id           = 2;  // 关卡ID
}

message QueryCardSelectionReply {
  CardSelection card_selection = 1;  // 下一次卡牌选择详情
}

message Card {
  int64 card_id           = 1;  // 卡牌ID
  int64 curse_id          = 2;  // 诅咒ID
  int64 origin_card_id    = 3;  // 原始卡牌ID（说明发生了变异）
  repeated int64 buff_ids = 4;  // buff ids
}

message CardSelection {
  int64 selection_id          = 1;  // 选择ID
  bool is_style_selection     = 2;  // 是否是流派选择
  repeated Card cards         = 3;  // 卡牌列表
  int64 remain_times          = 4;  // 剩余选择次数
  int64 remain_refresh_times  = 5;  // 剩余刷新次数
  int64 total_refresh_times   = 6;  // 本章节总刷新次数
  repeated Card current_cards = 7;  // 当前卡牌
  bool can_refresh            = 8;  // 是否可以刷新
  bool is_extra_selection     = 9;  // 是否是额外轮次(奖励轮次)
}

message SelectCardRequest {
  bool is_current_progress = 1;  // 是否是当前进度(即玩家在镜中世界的最高进度)
  int64 selection_id       = 2;  // 选择ID
  int64 card_id            = 3;  // 卡牌ID
}

message SelectCardReply {
  CardSelection next_card_selection = 1;  // 下一次卡牌选择详情
}

message RefreshSelectionRequest {
  bool is_current_progress = 1;  // 是否是当前进度(即玩家在镜中世界的最高进度)
  int64 selection_id       = 2;  // 选择ID
}

message RefreshSelectionReply {
  CardSelection card_selection = 1;
}

message ResetAllCardSelectionRequest {
  bool is_current_progress = 1;  // 是否是当前进度(即玩家在镜中世界的最高进度)
}

message ResetAllCardSelectionReply {
  CardSelection card_selection = 1;  // 第一个选择的卡牌项
  int64 remain_reset_times     = 2;  // 剩余重置次数
  int64 max_reset_times        = 3;  // 最大重置次数
}

message QueryCardRecordsRequest {}

message QueryCardRecordsReply {
  map<int64, StyleInfo> style_infos = 1;  // 流派信息
}

message CardRecord {
  int64 card_id  = 1;  // 卡牌ID
  bool is_unlock = 2;  // 是否解锁
}

message StyleInfo {
  int64 style_id                      = 1;  // 流派ID
  map<int64, CardRecord> card_records = 2;  // 卡牌记录
}

message GameStartReqCustomData {
  bool is_current_progress = 1;  // 是否是当前进度(即玩家在镜中世界的最高进度)
}

message GameEndReqCustomData {
  bool is_current_progress                        = 1;  // 是否是当前进度(即玩家在镜中世界的最高进度)
  repeated QuestCompleteTime quest_complete_times = 3;  // 关卡完成时间
  string record_file_name                         = 4;  // 对局数据文件名
  repeated bytes dungeon_record_bytes             = 5;  // 对局数据
}

message QuestCompleteTime {
  int64 quest_id         = 1;  // 关卡ID
  int64 complete_time_ms = 2;  // 完成时间(毫秒)
  int64 game_trace_id    = 3;  // game_trace_id(校验用)
}

message GameEndReplyCustomData {
  CardSelection next_card_selection        = 1;  // 下一次卡牌选择详情
  repeated corepb.Item reward_need_to_show = 2;  // 需要展示的奖励列表
  CompleteInfo complete_info               = 3;  // 完成信息，只有在冲榜期间的镜子最后一关才会下发这个结构
}

// CompleteInfo 完成信息，只有在冲榜期间的镜子最后一关才会下发这个结构
message CompleteInfo {
  map<int64, int64> quest_complete_mss = 1;  // 关卡完成时间(quest_id -> complete_ms)
  int64 previous_min_total_complete_ms = 2;  // 上次最少总用时
  int64 previous_best_rank             = 3;  // 之前的最佳排名
  int64 current_rank                   = 4;  // 当前排名
}

// 用于章节通关记录详细信息显示
message CompleteDetail {
  map<int64, int64> quest_complete_mss = 1;  // 关卡完成时间(quest_id -> complete_ms)
  int64 style_id                       = 2;  // 流派ID
  repeated int64 selected_cards        = 3;  // 选中的卡牌
  corepb.Loadout loadout               = 4;  // 阵容
  int64 fight_buddy_star               = 5;  // 战斗伙伴星级
}

message ResetCurrentProgressRequest {}

message ResetCurrentProgressReply {}

message PrepareForReplayRequest {
  int64 quest_id = 1;  // 关卡ID
}

message PrepareForReplayReply {}

message LoadoutInfoRequest {
  string loadout_type      = 1;  // 阵容类型。具体有哪些值由玩法系统确定
  bool is_current_progress = 2;  // 是否是当前进度
}

message LoadoutInfoReply {
  corepb.LoadoutProfile profile = 1;  // 阵容配置
  corepb.Loadout loadout        = 2;  // 阵容
  bool valid                    = 3;  // 当前阵容是否合法
  bool adjusted                 = 4;  // 当前阵容检验时是否有过不合法的项目但已经被自动调整
}

message ApplyLoadoutRequest {
  string loadout_type    = 1;  // 阵容类型。具体有哪些值由玩法系统确定
  corepb.Loadout loadout = 2;  // 阵容
}

message ApplyLoadoutReply {
  // 若要设置的阵容不合法，会通过 rpc 错误告知。
}

message GetTriggerRecommendStyleIDRequest {
  bool is_current_progress = 1;  // 是否是当前进度(跟其他协议保持一致，但是为false的时候客户端不要调用这个协议)
}

message GetTriggerRecommendStyleIDReply {
  int64 style_id = 1;  // 如果当前触发了某流派的伙伴引导，这个字段为该流派的ID(否则为0)
}
