// cs protocol
syntax = "proto3";

package zonepb.scenepb;
option go_package = "git.code.oa.com/red/zonesvr/pkg/proto/zonepb/scenepb";

import "corepb/scene_common.proto";
import "corepb/loadout_comm.proto";

service CSService {
  // 进入场景
  rpc EnterScene(EnterSceneRequest) returns (EnterSceneReply);  // 进入场景 cs协议
  // 切换小场景
  rpc ChangeSubScene(ChangeSubSceneRequest) returns (ChangeSubSceneReply);  // 切换小场景 cs协议
}

message NPC {
  int64 id           = 1;  // NPC ID
  bool opened        = 2;  // 是否开放
  string resource_id = 3;  // NPC 模型资源 ID
}

message EnterSceneRequest {
  corepb.SceneType scene_type       = 1;
  corepb.SceneRolePosition init_pos = 2;
  int64 ext_data                    = 3;  // 其他数据
}

message EnterSceneReply {
  string router_id                  = 1;  // 用于路由的id
  corepb.SceneRolePosition init_pos = 2;  // 初始坐标，可能会有调整
  map<int64, NPC> npcs              = 3;  // 已经开启了的 NPC（全量）
  corepb.Loadout loadout            = 4;  // 客户端需要初始化形象，直接进场景回包返回
  bool local_flag                   = 5;  // true 客户端进入本地场景，不用与后台进行交互
}

message ChangeSubSceneRequest {
  int64 sub_scene_id = 1;  // 子场景id
}

message ChangeSubSceneReply {
  corepb.SceneRolePosition init_pos = 1;  // 初始坐标，可能会有调整
  map<int64, NPC> npcs              = 2;  // 已经开启了的 NPC （全量）
}

message SceneNpcStateNotify {
  map<int64, NPC> npcs = 1;  // NPC增量状态变化，从true到false，从false到true
}
