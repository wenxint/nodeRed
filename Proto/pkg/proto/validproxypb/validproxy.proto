// cs protocol
syntax = "proto3";

package validproxypb;

option go_package = "git.woa.com/red/validproxy/pkg/proto/validproxypb";

import "clientpb/record.proto";
import "corepb/fight_common.proto";

service ValidService {
  // 同步校验
  rpc SyncVerify(SyncVerifyRequest) returns (SyncVerifyReply);
  // 异步校验，只上报
  rpc AsyncVerify(AsyncVerifyRequest) returns (AsyncVerifyReply);
  // 上报 GameStartMessage
  rpc ReportGameStartMessage(ReportGameStartMessageRequest) returns (ReportGameStartMessageReply);
  // 模拟上报
  rpc SimulateBountyGame(SimulateBountyGameRequest) returns (SimulateBountyGameReply);
  // 通过 GameTraceID 查询校验结果
  rpc GetVerifyResult(GetVerifyResultRequest) returns (GetVerifyResultReply);
  // 同步校验
  rpc BatchSyncVerify(BatchSyncVerifyRequest) returns (BatchSyncVerifyReply);
}

message BatchSyncVerifyRequest {
  // 对局信息
  map<int64, clientpb.DungeonRecord> DungeonRecords = 1;
  clientpb.FightResult result                       = 2;
  map<int64, bytes> valid_check_ext_infos           = 3;
  string record_file_name                           = 4;
}

message BatchSyncVerifyReply {
  //返回信息
  map<int64, clientpb.ValidResult> ValidResults = 1;
  bool is_need_punish                           = 2;  // 是否需要惩罚
}

message GetVerifyResultRequest {
  int64 game_trace_id = 1;
  int64 fight_type    = 2;
  int64 gid           = 3;
  int64 app_ver       = 4;
  int64 res_ver       = 5;
}

message GetVerifyResultReply {
  clientpb.ErrorCode error_code = 1;  // 校验错误码
  bool is_need_punish           = 2;  // 是否需要惩罚
}

message ReportGameStartMessageRequest {
  corepb.GameStartMessage start_msg = 1;
}

message ReportGameStartMessageReply {}

message GetOutSyncGameTraceIdsRequest {}

message GetOutSyncGameTraceIdsReply {
  repeated uint64 GameTraceIds = 1;
}

message SimulateBountyGameRequest {
  // 对局信息
  clientpb.DungeonRecord DungeonRecord = 1;
  // 对局信息的字节流，优先取这个
  bytes dungeon_record_bytes = 2;
}

message SimulateBountyGameReply {
  //返回信息
  clientpb.ValidResult ValidResult = 1;
}

message SyncVerifyRequest {
  // 对局信息
  clientpb.DungeonRecord DungeonRecord = 1;
  // 是否强制进行同步校验
  bool IsForceSyncVerify = 2;
  // 对局信息的字节流，优先取这个
  bytes dungeon_record_bytes = 3;
  bool dungeon_abnormal      = 4;  // 是否是异常对局
}

message SyncVerifyReply {
  //返回信息
  clientpb.ValidResult ValidResult = 1;
  bool is_need_punish              = 2;  // 是否需要惩罚
}

message AsyncVerifyRequest {
  //对局信息
  clientpb.DungeonRecord DungeonRecord = 1;
  // 对局信息的字节流，优先取这个
  bytes dungeon_record_bytes = 2;
}

message AsyncVerifyReply {}