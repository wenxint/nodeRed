// cs protocol
syntax = "proto3";

package contestpb.headtoheadpb;
option go_package = "git.woa.com/red/guildwarsvr/pkg/proto/contestpb/headtoheadpb";

import "corepb/loadout_comm.proto";
import "corepb/common.proto";

// 对位赛服务 - 无状态部分
service StatelessHeadToHeadService {
  rpc CreateLobby(CreateLobbyRequest) returns (CreateLobbyReply);
  rpc ListLobby(ListLobbyRequest) returns (ListLobbyReply);
}

// 对位赛服务 - 有状态部分，请求需要携带 x-warid 标头且值为「war_id」
service StatefulHeadToHeadService {
  rpc EnterLobby(EnterLobbyRequest) returns (EnterLobbyReply);
  rpc HeartbeatLobby(HeartbeatLobbyRequest) returns (HeartbeatLobbyReply);  // 暂定3秒一次，15秒超时踢出房间
  rpc SwitchLobby(SwitchLobbyRequest) returns (SwitchLobbyReply);           // 因为邀请而切换房间

  // 房主特有权限
  rpc KickPlayer(KickPlayerRequest) returns (KickPlayerReply);                          // 踢人(限房主),被踢后60s无法加入
  rpc TransferHost(TransferHostRequest) returns (TransferHostReply);                    // 转交房主
  rpc ModifyLobbySetting(ModifyLobbySettingRequest) returns (ModifyLobbySettingReply);  // 设置赛制轮次or战斗模式
  rpc SetRoundStart(SetRoundStartRequest) returns (SetRoundStartReply);                 // 房主开始比赛

  // 队长特有权限
  rpc SetTeamName(SetTeamNameRequest) returns (SetTeamNameReply);  // 切换小队名称

  // 所有玩家权限
  rpc SetStateReady(SetStateReadyRequest) returns (SetStateReadyReply);           // 切换准备状态
  rpc SetStateNotReady(SetStateNotReadyRequest) returns (SetStateNotReadyReply);  // 切换非准备状态
  rpc SwitchSeat(SwitchSeatRequest) returns (SwitchSeatReply);                    // 切换座位
  rpc LeaveLobby(LeaveLobbyRequest) returns (LeaveLobbyReply);                    // 退出比赛房间
  rpc InvitePlayer(InvitePlayerRequest) returns (InvitePlayerReply);              // 邀请玩家加入

  // 回复notify的请求
  rpc RejectInvite(RejectInviteRequest) returns (RejectInviteReply);                 // 拒绝邀请
  rpc ConfirmSeatSwitch(ConfirmSeatSwitchRequest) returns (ConfirmSeatSwitchReply);  // 确认座位切换
  rpc RejectSeatSwitch(RejectSeatSwitchRequest) returns (RejectSeatSwitchReply);     // 拒绝座位切换

  // banpick 相关
  rpc BanpickBanInfo(BanpickBanInfoRequest) returns (BanpickBanInfoReply);              // 获取禁用信息
  rpc BanpickPickInfo(BanpickPickInfoRequest) returns (BanpickPickInfoReply);           // 获取选阵容信息
  rpc BanpickBan(BanpickBanRequest) returns (BanpickBanReply);                          // 更新禁用
  rpc BanpickBanConfirm(BanpickBanConfirmRequest) returns (BanpickBanConfirmReply);     // 确认禁用
  rpc BanpickPick(BanpickPickRequest) returns (BanpickPickReply);                       // 设置阵容
  rpc BanpickPickConfirm(BanpickPickConfirmRequest) returns (BanpickPickConfirmReply);  // 确认阵容
}

// 战斗模式常量
enum BattleMode {
  BM_UNKNOWN = 0;
  BM_LADDER  = 1;  // 段位赛模式
  BM_BANPICK = 2;  // 禁用模式
}

// 队伍ID
enum TeamId {
  TEAM_UNKNOWN = 0;
  TEAM_RED     = 1;
  TEAM_BLUE    = 2;
  SPECTATOR    = 3;  // 观战席
}

message Seat {
  TeamId team_id = 1;  // 队伍 ID
  int64 seat_no  = 2;  // 座位号, 0 ~ (teamsize-1)
}

message LobbySettings {
  string name              = 1;   // 房间名
  string passcode          = 2;   // 房间密码，查询时若有密码值是一个星星 *
  BattleMode battle_mode   = 3;   // 战斗模式
  int64 ladder_upper_limit = 4;   // 段位上限
  int64 ladder_lower_limit = 5;   // 段位下限
  bool allow_spectators    = 6;   // 是否允许观战
  bool same_guild_only     = 7;   // 是否仅允许同公会成员
  int64 rounds             = 8;   // 轮次选择
  int64 team_size          = 9;   // 每队人数
  int64 slogan_id          = 10;  // 宣言 ID
}

message CreateLobbyRequest {
  LobbySettings settings = 1;  // 要创建房间设置
}

message CreateLobbyReply {
  string war_id   = 1;  // 房间请求 ID
  string lobby_no = 2;  // 房间数字 ID，仅显示和搜索用
}

message ListLobbyRequest {
  string filter = 1;
}

message ListLobbyReply {
  message Item {
    string war_id              = 1;  // 用来请求有状态服务时带在 x-warid 标头的 ID
    string lobby_no            = 2;  // 房间数字 ID，仅显示和搜索用
    LobbySettings settings     = 3;  // 房间设置
    int64 spectator_count      = 4;  // 观众人数
    repeated int64 player_gids = 5;  // 参与玩家 GID 列表
  }
  repeated Item items = 1;
}

message SeatState {
  int64 gid  = 1;  // 玩家 gid
  bool ready = 2;  // 玩家是否准备
}

message LobbyState {
  string war_id          = 1;  // 用来请求有状态服务时带在 x-warid 标头的 ID
  string lobby_no        = 2;  // 房间数字 ID，仅显示和搜索用
  LobbySettings settings = 3;  // 房间设置
  int64 host_gid         = 4;  // 房主 GID

  int64 red_team_name_id       = 5;   // 红队名称 ID
  int64 blue_team_name_id      = 6;   // 蓝队名称 ID
  repeated SeatState red_team  = 7;   // 红队
  repeated SeatState blue_team = 8;   // 蓝队
  repeated SeatState spectator = 9;   // 观众
  int64 red_team_leader_gid    = 10;  // 红队队长 gid
  int64 blue_team_leader_gid   = 11;  // 蓝队队长 gid
  int64 red_team_win_count     = 12;  // 红队大轮次胜利次数
  int64 blue_team_win_count    = 13;  // 蓝队大轮次胜利次数

  map<int64, corepb.PersonalDisplayInfo> gid_to_display_info = 14;  // 个人展示信息

  enum LobbyPhase {
    LOBBYPHASE_UNKNOWN   = 0;
    LOBBYPHASE_PREPARING = 1;  // 比赛准备阶段
    LOBBYPHASE_FIGHTING  = 2;  // 游戏流程中
  }
  LobbyPhase phase = 15;  // 房间所处阶段，正常流转：1 -> 2 -> 1
  int64 clock      = 16;  // 当前时间计数(从创建房间开始,每 tick 一秒)

  // 以下是 phase 为 LOBBYPHASE_FIGHTING 时的状态
  // 每轮：round
  // 每局：match

  int64 current_round = 17;  // 当前轮次，范围 1 - rounds
  int64 current_match = 18;  // 当前轮次内对局，范围 1 - team size
  enum MatchPhase {
    MP_UNKNOWN               = 0;
    MP_ROUND_START_COUNTDOWN = 1;  // 轮次第一场动效延时
    MP_NOT_STARTED           = 2;  // 未开始
    MP_BAN                   = 3;  // 禁用阶段
    MP_PICK                  = 4;  // 选阵容阶段
    MP_BATTLE                = 5;  // 战斗阶段
    MP_ROUND_COUNTDOWN       = 6;  // 轮次结束延时
    MP_END_COUNTDOWN         = 7;  // 比赛结束延时
  }
  MatchPhase current_match_phase            = 19;  // 当前对局阶段
  int64 current_match_next_phase_start_time = 20;  // 当前对局下一阶段的开始时间，比如当前是未开始，那就是下一个阶段禁用阶段（禁用模式）或者选阵容阶段（段位赛模式）的未来开始时间，在 clock 时间戳下
  int64 current_match_game_trace_id         = 21;  // 当前对局战斗的 game_trace_id，用来进入观战
  string current_match_x_fightid            = 22;  // 当前对局战斗的 x-fightid，用来拉 x-obid

  enum Winner {
    WINNER_UNKNOWN = 0;
    WINNER_RED     = 1;
    WINNER_BLUE    = 2;
    WINNER_DEUCE   = 3;  // 平局
    WINNER_NONE    = 4;  // 还没有战斗结果
  }
  repeated Winner current_round_winners           = 23;  // 当前轮次各单局对战胜利队伍
  repeated Winner current_or_last_contest_winners = 24;  // 当前或上一次比赛的各轮胜利队伍

  int64 version = 99;  // 版本号，应忽略比曾经接收到的版本号小的消息
}

message EnterLobbyRequest {
  string passcode = 1;
  bool is_invited = 2;
}

message EnterLobbyReply {
  LobbyState state = 1;
}

message HeartbeatLobbyRequest {}

message HeartbeatLobbyReply {}

message KickPlayerRequest {
  int64 gid = 1;  // 被踢玩家 gid
}
message KickPlayerReply {
  LobbyState state = 1;
}

message TransferHostRequest {
  int64 gid = 1;  // 被转让玩家 gid
}
message TransferHostReply {
  LobbyState state = 1;
}

message ModifyLobbySettingRequest {
  LobbySettings settings = 1;
}
message ModifyLobbySettingReply {
  LobbyState state = 1;
}

message SetRoundStartRequest {}
message SetRoundStartReply {
  LobbyState state = 1;
}

message SetTeamNameRequest {
  TeamId team_id = 1;  // 小队ID
}
message SetTeamNameReply {
  LobbyState state = 1;
}

message SetStateReadyRequest {}
message SetStateReadyReply {
  LobbyState state = 1;
}

message SetStateNotReadyRequest {}
message SetStateNotReadyReply {
  LobbyState state = 1;
}

message SwitchSeatRequest {
  Seat seat = 1;  // 目标座位
}
message SwitchSeatReply {
  LobbyState state = 1;
}

message LeaveLobbyRequest {}
message LeaveLobbyReply {}

message InvitePlayerRequest {
  int64 gid = 1;  // 被邀请玩家 gid
}
message InvitePlayerReply {}

message RejectInviteRequest {
  int64 gid = 1;  // 主动邀请者gid，用于给邀请者发送拒绝通知
}
message RejectInviteReply {}

message ConfirmSeatSwitchRequest {
  int64 gid = 1;  // 主动换座位玩家(对方) gid
  Seat seat = 2;  // 主动换座玩家原座位号,需要校验他还在不在原来的位置
}
message ConfirmSeatSwitchReply {
  LobbyState state = 1;
}

message RejectSeatSwitchRequest {
  int64 gid = 1;  // 主动换座位玩家 gid
  Seat seat = 2;  // 主动换座玩家原座位号,那个玩家不在原来的位置不notify
}
message RejectSeatSwitchReply {}

message SyncLobbyStateNTF {
  LobbyState state = 1;
}

message BeKickedNTF {
  enum Reason {
    KR_UNKNOWN                 = 0;
    KR_KICKED                  = 1;  // 被踢
    KR_HEARTBEAT_TIMEOUT       = 2;  // 心跳超时
    KR_LOBBY_PREPARING_TIMEOUT = 3;  // 房间准备超时
  }
  Reason reason = 1;
}

message SwitchSeatRequestNTF {
  int64 gid = 1;  // 主动换座位玩家 gid
  Seat seat = 2;  // 目标座位
}

message SwitchSeatRejectNTF {
  int64 gid = 1;  // 拒绝者 gid
}

message InvitationNTF {
  corepb.PersonalDisplayInfo inviter = 1;  // 邀请者个人信息
  string war_id                      = 2;  // 赛事房间请求 ID
  string lobby_no                    = 3;  // 赛事房间数字编号
  LobbySettings settings             = 4;  // 赛事房间设置
}

message RejectInvitationNTF {
  int64 gid = 1;  // 被邀请玩家 gid
}

// 到玩家场时发的 NTF
message OnMatchNTF {}

message BanpickBanInfoRequest {}

message BanpickBanInfoReply {
  int64 ban_count                                              = 1;  // 可禁用伙伴数
  repeated corepb.LoadoutBuddyChoice ban_buddy_choices         = 2;  // 可 ban 伙伴列表，只有里面的伙伴 ID 字段有意义，为了兼容客户端以前逻辑仍然保留封装……
  repeated corepb.LoadoutBuddyChoice already_ban_buddy_choices = 3;  // 已经 ban 的伙伴列表
  bool completed                                               = 4;  // 是否已完成这阶段
}

message BanpickPickInfoRequest {}

message BanpickPickInfoReply {
  corepb.LoadoutProfile profile                                    = 1;  // 阵容配置
  corepb.Loadout loadout                                           = 2;  // 阵容
  repeated corepb.LoadoutBuddyChoice all_already_ban_buddy_choices = 3;  // 所有已经被 ban 的伙伴列表
  bool completed                                                   = 4;  // 是否已完成这阶段
}

message BanpickBanRequest {
  corepb.Loadout loadout = 1;  // 禁用伙伴要写在 fight_buddy_choices 里
}

message BanpickBanConfirmRequest {}

message BanpickBanConfirmReply {
  repeated corepb.LoadoutBuddyChoice already_ban_buddy_choices = 1;  // 已经 ban 的伙伴列表
  bool completed                                               = 2;  // 是否已完成这阶段
}

message BanpickBanReply {}

message BanpickPickRequest {
  corepb.Loadout loadout = 1;  // 完整阵容
}

message BanpickPickReply {}

message BanpickPickConfirmRequest {}

message BanpickPickConfirmReply {
  bool completed = 1;  // 是否已完成这阶段
}

message SwitchLobbyRequest {
  string old_war_id = 1;
}

message SwitchLobbyReply {
  LobbyState state = 1;
}