// cs protocol
syntax = "proto3";

package contestpb.superrookiepb;
option go_package = "git.woa.com/red/guildwarsvr/pkg/proto/contestpb/superrookiepb";


import "corepb/loadout_comm.proto";
import "corepb/common.proto";

// 超新星赛事服务 - 无状态部分
service StatelessSuperRookieService {
  rpc CreateLobby(CreateLobbyRequest) returns (CreateLobbyReply);
  rpc ListLobby(ListLobbyRequest) returns (ListLobbyReply);
  rpc Config(ConfigRequest) returns (ConfigReply);  // 创房时一些配置项内容
}

// 超新星赛事服务 - 有状态部分，请求需要携带 x-warid 标头且值为「war_id」
service StatefulSuperRookieService {
  rpc EnterLobby(EnterLobbyRequest) returns (EnterLobbyReply);
  rpc HeartbeatLobby(HeartbeatLobbyRequest) returns (HeartbeatLobbyReply);  // 暂定3秒一次，15秒超时踢出房间
  rpc LeaveLobby(LeaveLobbyRequest) returns (LeaveLobbyReply);              // 退出比赛房间
  rpc History(HistoryRequest) returns (HistoryReply);                       // 获取历史战绩
  rpc InvitePlayer(InvitePlayerRequest) returns (InvitePlayerReply);        // 邀请玩家加入

  // 房主特有权限
  rpc KickPlayer(KickPlayerRequest) returns (KickPlayerReply);                          // 踢人(限房主),被踢后60s无法加入
  rpc ModifyLobbySetting(ModifyLobbySettingRequest) returns (ModifyLobbySettingReply);  // 设置赛制轮次or战斗模式
  rpc SwitchSeat(SwitchSeatRequest) returns (SwitchSeatReply);                          // 交换位置
  rpc StartRound(StartRoundRequest) returns (StartRoundReply);                          // 开始一轮
  rpc ResetRound(ResetRoundRequest) returns (ResetRoundReply);                          // 重置本轮（回到本轮开始前）
  rpc ResetContest(ResetContestRequest) returns (ResetContestReply);                    // 重置比赛（回到一轮没打的状态）
  rpc DirectToFight(DirectToFightRequest) returns (DirectToFightReply);                 // 直接开始战斗

  // 回复notify的请求
  rpc RejectInvite(RejectInviteRequest) returns (RejectInviteReply);  // 拒绝邀请

  // banpick 相关
  rpc BanpickBanInfo(BanpickBanInfoRequest) returns (BanpickBanInfoReply);              // 获取禁用信息（传统禁用模式）
  rpc BanpickBan(BanpickBanRequest) returns (BanpickBanReply);                          // 更新禁用（传统禁用模式）
  rpc BanpickBanConfirm(BanpickBanConfirmRequest) returns (BanpickBanConfirmReply);     // 确认禁用（传统禁用模式）
  rpc BanpickPickInfo(BanpickPickInfoRequest) returns (BanpickPickInfoReply);           // 获取选阵容信息（段位赛模式、传统禁用模式）
  rpc BanpickPick(BanpickPickRequest) returns (BanpickPickReply);                       // 设置阵容（段位赛模式、传统禁用模式）
  rpc BanpickPickConfirm(BanpickPickConfirmRequest) returns (BanpickPickConfirmReply);  // 确认阵容（段位赛模式、传统禁用模式）

  // rt banpick 相关
  rpc RTBanpickBan(RTBanpickBanRequest) returns (RTBanpickBanReply);                          // 更新禁用（实时禁用模式）
  rpc RTBanpickBanConfirm(RTBanpickBanConfirmRequest) returns (RTBanpickBanConfirmReply);     // 确认禁用（实时禁用模式）
  rpc RTBanpickPick(RTBanpickPickRequest) returns (RTBanpickPickReply);                       // 设置阵容（实时禁用模式）
  rpc RTBanpickPickConfirm(RTBanpickPickConfirmRequest) returns (RTBanpickPickConfirmReply);  // 确认阵容（实时禁用模式）
}

message LobbySettings {
  string name     = 1;  // 房间名
  string passcode = 2;  // 房间密码，查询时若有密码值是一个星星 *
  enum BattleMode {
    BM_UNKNOWN    = 0;
    BM_LADDER     = 1;  // 段位赛模式
    BM_BANPICK    = 2;  // 禁用模式
    BM_RT_BANPICK = 3;  // 实时禁用模式
  }
  BattleMode battle_mode = 3;  // 战斗模式
  bool allow_spectators  = 4;  // 是否允许观战
  int64 rounds           = 5;  // 轮次选择
  int64 loadout_pool_id  = 6;  // 阵容池 ID
  int64 max_spectators   = 7;  // 最大观战人数（只读）
}

message CreateLobbyRequest {
  LobbySettings settings = 1;  // 要创建房间设置
}

message CreateLobbyReply {
  string war_id   = 1;  // 房间请求 ID
  string lobby_no = 2;  // 房间数字 ID，仅显示和搜索用
}

message ListLobbyRequest {
  string filter = 1;
}

message ListLobbyReply {
  message Item {
    string war_id              = 1;  // 用来请求有状态服务时带在 x-warid 标头的 ID
    string lobby_no            = 2;  // 房间数字 ID，仅显示和搜索用
    LobbySettings settings     = 3;  // 房间设置
    int64 spectator_count      = 4;  // 观众人数
    repeated int64 player_gids = 5;  // 参与玩家 GID 列表
  }
  repeated Item items = 1;
}

message ConfigRequest {}

message ConfigReply {
  message LoadoutPool {
    int64 id                                 = 1;
    string name                              = 2;
    bool random                              = 3;  // 是否是自动生成
    repeated int64 preview_fight_buddy_ids   = 4;  // 出战伙伴池预览，如果 random=false
    repeated int64 preview_support_buddy_ids = 5;  // 援护伙伴池预览，如果 random=false
    repeated int64 preview_dial_ids          = 6;  // 空岛贝预览，如果 random=false
  }
  repeated LoadoutPool loadout_pools = 1;  // 可选阵容池
  corepb.Item create_cost            = 2;  // 创建房间消耗，如果免费 item id 为 0
  int64 max_spectators               = 3;  // 最大观战人数
}

message LobbyState {
  // 基础部分

  string war_id                                              = 1;  // 用来请求有状态服务时带在 x-warid 标头的 ID
  string lobby_no                                            = 2;  // 房间数字 ID，仅显示和搜索用
  LobbySettings settings                                     = 3;  // 房间设置
  int64 host_gid                                             = 4;  // 裁判 GID
  corepb.LoadoutProfile profile                              = 5;  // 阵容池
  int64 red_team_gid                                         = 6;  // 红队
  int64 blue_team_gid                                        = 7;  // 蓝队
  repeated int64 spectator_gids                              = 8;  // 观众
  map<int64, corepb.PersonalDisplayInfo> gid_to_display_info = 9;  // 个人展示信息
  message MemberInfo {
    bool disconnected = 1;  // 是否离开（掉线）
  }
  map<int64, MemberInfo> gid_to_member_info = 10;  // 个人成员信息

  // 动态部分

  int64 clock = 21;  // 当前时钟(从创建房间开始,每 tick 一秒)

  // 在这个玩法 1 round 对应 1 match

  int64 current_round = 31;  // 当前轮次，范围 1 - rounds，如果是 0 则表示比赛未开始
  enum MatchPhase {
    MP_UNKNOWN                 = 0;
    MP_NOT_STARTED             = 1;  // 未开始
    MP_BAN                     = 2;  // 禁用阶段（如果 battle_mode 为 BM_BANPICK）
    MP_PICK                    = 3;  // 选阵容阶段（如果 battle_mode 为 BM_BANPICK 或 BM_LADDER）
    MP_RT_BANPICK              = 4;  // 实时禁用阶段（如果 battle_mode 为 BM_RT_BANPICK，要和下面的 current_match_rt_banpick_state 一起看）
    MP_BEFORE_BATTLE_ANIMATION = 5;  // 战斗前动效阶段
    MP_BATTLE                  = 6;  // 战斗阶段
  }
  MatchPhase current_match_phase            = 32;  // 当前对局阶段
  int64 current_match_next_phase_start_time = 33;  // 当前对局下一阶段的开始时间，比如当前是未开始，那就是下一个阶段禁用阶段（禁用模式）或者选阵容阶段（段位赛模式）的未来开始时间，在 clock 时间戳下
  int64 current_match_game_trace_id         = 34;  // 当前对局战斗的 game_trace_id，用来进入观战
  string current_match_x_fightid            = 35;  // 当前对局战斗的 x-fightid，用来拉 x-obid

  message RTBanpickState {
    enum RTBanpickSubPhase {
      RBP_UNKNOWN             = 0;
      RBP_NOT_STARTED         = 1;   // 未开始
      RBP_BLUE_BAN_BUDDY_1    = 2;   // 蓝方实时禁用第一个伙伴阶段
      RBP_RED_BAN_BUDDY_1_2   = 3;   // 红方实时禁用第一和第二个伙伴阶段
      RBP_BLUE_BAN_BUDDY_2    = 4;   // 蓝方实时禁用第二个伙伴阶段
      RBP_BLUE_PICK_BUDDY_1   = 5;   // 蓝方实时选第一个伙伴阶段
      RBP_RED_PICK_BUDDY_1_2  = 6;   // 红方实时选第一和第二个伙伴阶段
      RBP_BLUE_PICK_BUDDY_2_3 = 7;   // 蓝方实时选第二和第三个伙伴阶段
      RBP_RED_PICK_BUDDY_3    = 8;   // 红方实时选第三个伙伴阶段
      RBP_RED_PICK_DIAL_1     = 9;   // 红方实时选第一个空岛贝阶段
      RBP_BLUE_PICK_DIAL_1_2  = 10;  // 蓝方实时选第一和第二个空岛贝阶段
      RBP_RED_PICK_DIAL_2_3   = 11;  // 红方实时选第二和第三个空岛贝阶段
      RBP_BLUE_PICK_DIAL_3    = 12;  // 蓝方实时选第三个空岛贝阶段
      RBP_PICK_SUPPORT        = 13;  // 双方实时选援护伙伴阶段
      RBP_ADJUST              = 14;  // 双方实时调整阶段
      RBP_COMPLETED           = 15;  // 完成
    }
    RTBanpickSubPhase sub_phase               = 1;   // 当前子阶段
    int64 next_sub_phase_start_time           = 2;   // 下一个子阶段开始时间
    repeated int64 blue_ban_buddy_ids         = 3;   // 蓝方禁用伙伴列表
    repeated int64 red_ban_buddy_ids          = 4;   // 红方禁用伙伴列表
    corepb.Loadout blue_loadout               = 5;   // 当前蓝方阵容，随着实时禁用和实时选阵容而变化
    corepb.Loadout red_loadout                = 6;   // 当前红方阵容，随着实时禁用和实时选阵容而变化
    bool blue_player_confirmed_1              = 7;   // 当前蓝方是否确认(1)
    bool red_player_confirmed_1               = 8;   // 当前红方是否确认(1)
    bool blue_player_confirmed_2              = 9;   // 当前蓝方是否确认(2)
    bool red_player_confirmed_2               = 10;  // 当前红方是否确认(2)
    corepb.Loadout blue_loadout_before_adjust = 11;  // 实时调整前的蓝方阵容
    corepb.Loadout red_loadout_before_adjust  = 12;  // 实时调整前的红方阵容
  }
  RTBanpickState current_match_rt_banpick_state = 36;  // 如果 current_match_phase 为 MP_RT_BANPICK 时，当前对局实时禁用的展开状态）

  repeated int64 current_disabled_fight_buddy_ids = 37;  // 当前比赛禁用的出战伙伴（实时 banpick 模式下不能用一场比赛之前轮用过的出战伙伴，注意是近不能出战，还可以援护）

  enum Winner {
    WINNER_UNKNOWN = 0;
    WINNER_RED     = 1;
    WINNER_BLUE    = 2;
    WINNER_DEUCE   = 3;  // 平局
    WINNER_NONE    = 4;  // 还没有战斗结果
  }
  repeated Winner current_or_last_contest_winners = 38;  // 当前或上一次比赛的各轮胜利队伍

  int64 version = 99;  // 版本号，应忽略比曾经接收到的版本号小的消息
}

message EnterLobbyRequest {
  string passcode = 1;
  bool is_invited = 2;
}

message EnterLobbyReply {
  LobbyState state = 1;
}

message HeartbeatLobbyRequest {}

message HeartbeatLobbyReply {}

message HistoryRequest {}

message HistoryReply {
  enum Winner {
    WINNER_UNKNOWN = 0;
    WINNER_RED     = 1;  // 红方胜利
    WINNER_BLUE    = 2;  // 蓝方胜利
    WINNER_DEUCE   = 3;  // 平局
  }

  message Record {
    message Round {
      Winner winner                                = 1;  // 本轮胜利方
      corepb.Loadout red_loadout                   = 2;  // 红方阵容
      corepb.Loadout blue_loadout                  = 3;  // 蓝方阵容
      int64 red_gid                                = 4;  // 红方 GID
      int64 blue_gid                               = 5;  // 蓝方 GID
      corepb.PersonalDisplayInfo red_display_info  = 6;  // 红方展示信息
      corepb.PersonalDisplayInfo blue_display_info = 7;  // 蓝方展示信息
      int64 battle_time                            = 8;  // 战斗结算时间
    }
    repeated Round rounds = 1;  // 顺序每轮战绩
    Winner winner         = 2;  // 比赛胜利方
  }
  repeated Record records = 1;  // 历史每次比赛战绩，新的记录在前面
}

message KickPlayerRequest {
  int64 gid = 1;  // 被踢玩家 gid
}
message KickPlayerReply {
  LobbyState state = 1;
}

message ModifyLobbySettingRequest {
  LobbySettings settings = 1;
}
message ModifyLobbySettingReply {
  LobbyState state = 1;
}

message StartRoundRequest {}
message StartRoundReply {
  LobbyState state = 1;
}

message ResetRoundRequest {}
message ResetRoundReply {
  LobbyState state = 1;
}

message ResetContestRequest {}
message ResetContestReply {
  LobbyState state = 1;
}

message DirectToFightRequest {}
message DirectToFightReply {
  LobbyState state = 1;
}

message PauseRequest {}
message PauseReply {
  LobbyState state = 1;
}

message ResumeRequest {}
message ResumeReply {
  LobbyState state = 1;
}

message SwitchSeatRequest {
  int64 a_seat_index = 1;  // 要交换的座位索引 A，1 是红方，2 是蓝方，3-7 为观战席从上到下
  int64 b_seat_index = 2;  // 要交换的座位索引 B
}
message SwitchSeatReply {
  LobbyState state = 1;
}

message LeaveLobbyRequest {}
message LeaveLobbyReply {}

message InvitePlayerRequest {
  int64 gid = 1;  // 被邀请玩家 gid
}
message InvitePlayerReply {}

message RejectInviteRequest {
  int64 gid = 1;  // 主动邀请者gid，用于给邀请者发送拒绝通知
}
message RejectInviteReply {}

message SyncLobbyStateNTF {
  LobbyState state = 1;
}

message BeKickedNTF {
  enum Reason {
    KR_UNKNOWN                 = 0;
    KR_KICKED                  = 1;  // 被踢
    KR_HEARTBEAT_TIMEOUT       = 2;  // 心跳超时
    KR_LOBBY_PREPARING_TIMEOUT = 3;  // 房间准备超时
  }
  Reason reason = 1;
}

message InvitationNTF {
  corepb.PersonalDisplayInfo inviter = 1;  // 邀请者个人信息
  string war_id                      = 2;  // 赛事房间请求 ID
  string lobby_no                    = 3;  // 赛事房间数字编号
  LobbySettings settings             = 4;  // 赛事房间设置
}

message RejectInvitationNTF {
  int64 gid = 1;  // 被邀请玩家 gid
}

// 到玩家场时发的 NTF
message OnMatchNTF {}

// 本轮被重置的 NTF
message ResetRoundNTF {
  enum Reason {
    RR_UNKNOWN            = 0;
    RR_LEAVE              = 1;  // 玩家掉线
    RR_FAILED_CREATE_GAME = 2;  // 创建对局失败
    RR_INVALID_LOADOUT    = 3;  // 无效阵容
    RR_DEAD_GAME          = 4;  // 对局挂了
    RR_BY_HOST            = 5;  // 裁判手动重置
  }
  Reason reason = 1;  // 原因
}

// 比赛被重置的 NTF
message ResetContestNTF {}

message BanpickBanInfoRequest {}

message BanpickBanInfoReply {
  int64 ban_count                                              = 1;  // 可禁用伙伴数
  repeated corepb.LoadoutBuddyChoice ban_buddy_choices         = 2;  // 可 ban 伙伴列表，只有里面的伙伴 ID 字段有意义，为了兼容客户端以前逻辑仍然保留封装……
  repeated corepb.LoadoutBuddyChoice already_ban_buddy_choices = 3;  // 已经 ban 的伙伴列表
  bool completed                                               = 4;  // 是否已完成这阶段
}

message BanpickPickInfoRequest {}

message BanpickPickInfoReply {
  corepb.LoadoutProfile profile                                    = 1;  // 阵容配置
  corepb.Loadout loadout                                           = 2;  // 阵容
  repeated corepb.LoadoutBuddyChoice all_already_ban_buddy_choices = 3;  // 所有已经被 ban 的伙伴列表
  bool completed                                                   = 4;  // 是否已完成这阶段
}

message BanpickBanRequest {
  corepb.Loadout loadout = 1;  // 禁用伙伴要写在 fight_buddy_choices 里
}

message BanpickBanConfirmRequest {}

message BanpickBanConfirmReply {
  repeated corepb.LoadoutBuddyChoice already_ban_buddy_choices = 1;  // 已经 ban 的伙伴列表
  bool completed                                               = 2;  // 是否已完成这阶段
}

message BanpickBanReply {}

message BanpickPickRequest {
  corepb.Loadout loadout = 1;  // 完整阵容
}

message BanpickPickReply {}

message BanpickPickConfirmRequest {}

message BanpickPickConfirmReply {
  bool completed = 1;  // 是否已完成这阶段
}

message RTBanpickBanRequest {
  repeated int64 ban_buddy_ids = 1;  // 要 ban 的伙伴列表
}
message RTBanpickBanReply {
  LobbyState state = 1;
}

message RTBanpickBanConfirmRequest {}
message RTBanpickBanConfirmReply {
  LobbyState state = 1;
}

message RTBanpickPickRequest {
  corepb.Loadout loadout = 1;  // 完整阵容
}
message RTBanpickPickReply {
  LobbyState state = 1;
}

message RTBanpickPickConfirmRequest {}
message RTBanpickPickConfirmReply {
  LobbyState state = 1;
}
