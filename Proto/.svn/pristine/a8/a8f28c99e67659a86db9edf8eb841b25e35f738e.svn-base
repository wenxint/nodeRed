// cs protocol
syntax = "proto3";

package zonepb.voyagepb.delegatepb;
option go_package = "git.code.oa.com/red/zonsvr/pkg/proto/zonepb/voyagepb/delegatepb";

import "corepb/common.proto";
import "corepb/loadout_comm.proto";

service DelegateService {
  // 获取派遣系统信息
  rpc DelegateInfo(DelegateInfoRequest) returns (DelegateInfoReply);

  // 主动刷新任务
  rpc RefreshTask(RefreshTaskRequest) returns (RefreshTaskReply);

  // 一键委派
  rpc AutoDelegate(AutoDelegateRequest) returns (AutoDelegateReply);

  // 检查是否满足接取任务的条件
  // 任务接取逻辑为：
  // CheckReceiveTask 检查条件；
  // 阵容选择完成后，调用 DoReceiveTask 进行阵容设置和真实任务接取
  rpc CheckReceiveTask(CheckReceiveTaskRequest) returns (CheckReceiveTaskReply);

  // 拉取阵容信息
  rpc LoadoutInfo(LoadoutInfoRequest) returns (LoadoutInfoReply);

  // 检查条件、阵容选择完成后，执行任务接取
  rpc DoReceiveTask(DoReceiveTaskRequest) returns (DoReceiveTaskReply);

  // 自动生成接取任务的阵容
  rpc GenerateLoadout(GenerateLoadoutRequest) returns (GenerateLoadoutReply);

  // 领取任务奖励
  rpc ReceiveTaskReward(ReceiveTaskRewardRequest) returns (ReceiveTaskRewardReply);

  // 领取自动探险奖励
  rpc ReceiveAutoSafariReward(ReceiveAutoSafariRewardRequest) returns (ReceiveAutoSafariRewardReply);

  // 任务加速
  rpc SpeedUpTask(SpeedUpTaskRequest) returns (SpeedUpTaskReply);
}

message DelegateInfoRequest {}

message DelegateInfoReply {
  DelegateInfo info = 1;  // 派遣信息
}

message DelegateInfo {
  repeated Task tasks                           = 1;  // 所有任务信息
  repeated Team teams                           = 2;  // 所有小队列表
  int64 remain_task_count                       = 3;  // 剩余任务次数
  int64 max_task_count                          = 4;  // 最大任务次数
  int64 remain_team_count                       = 5;  // 剩余小队数量
  int64 max_team_count                          = 6;  // 最大小队数量
  repeated AutoSafariReward auto_safari_rewards = 7;  // 自动探险奖励列表
  int64 refresh_task_count                      = 8;  // 当前累计刷新任务次数
}

message AutoSafariReward {
  repeated corepb.Item items = 1;  // 道具列表
  int64 timestamp            = 2;  // 获得时间
  int64 remain_task_count    = 3;  // 剩余任务次数
}

message Task {
  enum State {
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    LOCKED   = 0;  // 未解锁
    FREE     = 1;  // 空闲中
    DOING    = 2;  // 进行中
    FINISHED = 3;  // 已完成
    REWARDED = 4;  // 已领奖
  };
  int64 id              = 1;  // 任务ID
  State state           = 2;  // 任务状态
  int64 finish_at       = 3;  // 若任务在进行中，其任务完成的时间
  int64 team_id         = 4;  // 若任务在进行中，其对应的队伍ID
  map<int64, bool> tags = 5;  // 标签，如果任务在进行中，所选阵容是否满足各个标签条件
  bool show             = 6;  // 是否展示
}

message Team {
  enum TeamState {
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    LOCKED = 0;  // 未解锁
    FREE   = 1;  // 空闲
    DOING  = 2;  // 任务进行中
  };
  int64 id               = 1;  // 小队ID
  string loadout_name    = 2;  // 阵容名，若未设置则为空
  int64 task_id          = 3;  // 对应任务ID，若未接取任务，则为空
  TeamState state        = 4;  // 小队状态
  corepb.Loadout loadout = 5;  // 队伍在进行中，阵容信息
}

message RefreshTaskRequest {}

message RefreshTaskReply {
  DelegateInfo info = 1;  // 任务刷新后的状态
}

message AutoDelegateRequest {}

message AutoDelegateReply {
  DelegateInfo info            = 1;  // 自动派遣后的状态
  repeated corepb.Item rewards = 2;  // 自动领取的派遣奖励
}

message CheckReceiveTaskRequest {
  int64 task_id = 1;  // 接取的任务ID
}

message CheckReceiveTaskReply {
  Team team = 1;  // 后台钦定的队伍ID，前台在选择阵容时，apply 队伍的阵容名
}

message DoReceiveTaskRequest {
  int64 task_id          = 1;  // 任务ID
  int64 team_id          = 2;  // 后台钦定的队伍ID
  corepb.Loadout loadout = 3;  // 阵容
}

message DoReceiveTaskReply {
  DelegateInfo info = 1;  // 任务接取完成后的派遣状态
}

message GenerateLoadoutRequest {
  int64 task_id = 1;  // 任务ID
  int64 team_id = 2;  // 队伍ID
}

message GenerateLoadoutReply {
  corepb.Loadout loadout = 1;  // 给玩家的参考阵容
}

message ReceiveTaskRewardRequest {
  int64 task_id           = 1;  // 领取奖励的任务ID
  repeated int64 task_ids = 2;  // 如果需要批量领取任务奖励，则 task_id 填 0，此处填写 id 列表
}

message ReceiveTaskRewardReply {
  DelegateInfo info            = 1;  // 派遣信息
  repeated corepb.Item rewards = 2;  // 奖励列表
}

message ReceiveAutoSafariRewardRequest {}

message ReceiveAutoSafariRewardReply {
  repeated corepb.Item rewards = 1;  // 奖励列表
}

message SpeedUpTaskRequest {
  int64 task_id = 1;  // 要加速的任务ID
}

message SpeedUpTaskReply {
  DelegateInfo info = 1;  // 派遣信息
}

message LoadoutInfoRequest {
  string loadout_type = 1;  // 阵容类型。具体有哪些值由玩法系统确定
  int64 task_id       = 2;  // 应用该阵容的任务ID
}

message LoadoutInfoReply {
  corepb.LoadoutProfile profile = 1;  // 阵容配置
  corepb.Loadout loadout        = 2;  // 阵容
}
