// cs protocol
syntax = "proto3";

package actpb.act0137pb;
option go_package = "git.woa.com/red/actsvr/pkg/proto/actpb/act0137pb";


import "corepb/loadout_comm.proto";
import "corepb/common.proto";
import "corepb/fight_common.proto";

// rpc ActGetDetail 活动详情使用通用协议
message ActGetDetailRequest {}
message ActGetDetailReply {
  int64 quest_id = 1;  // 当前关卡id，（(quest_id - 1) % len + 1）即为当前关卡的quest_unique_id
  int64 rank_id  = 2;  // 当前排名所属排名id

  message QuestInfo {
    int64 quest_unique_id = 1;  // 关卡唯一id
    int64 level_id        = 2;  // 关卡对应的Level表id
    int64 remain_hp       = 3;  // 跳关所需剩余血量
    int64 pass_sec        = 4;  // 跳关所需通关时间
  }
  repeated QuestInfo quest_infos = 3;  // 所有len个独特关卡的配置信息

  message RewardInfo {
    int64 next_level_quest_id = 1;  // 排名下一档位关卡数
    message RankReward {
      int64 rank_id                               = 1;  // 排名id
      repeated corepb.Item rewards                = 2;  // 排名奖励
      repeated corepb.Item last_day_extra_rewards = 3;  // 最后一日额外排名奖励励
    }
    repeated RankReward rank_rewards      = 2;  // 排名奖励
    repeated corepb.Item complete_rewards = 3;  // 完成关卡奖励(每完成N关可以领取的奖励)
    int64 not_rewarded_quest_count        = 4;  // 剩余未领取奖励的关卡数
    int64 rewarded_need_quest_count       = 5;  // 领取奖励需要的关卡数(N)
  }
  RewardInfo reward_info = 4;  // 当前排名奖励信息

  ShopInfo shop_info   = 5;  // 商店信息
  string rank_instance = 6;  // 排名实例

  int64 can_skip_to_quest_id_by_fc    = 7;  // 可跳转到的关卡(战力)
  int64 can_skip_to_quest_id_by_skill = 8;  // 可跳转到的关卡(通关时长&血量)

  message TimeConfig {
    int64 can_fight_time_begin_at_unix = 1;  // 战斗开始时间(时间戳)
    int64 can_fight_time_end_at_unix   = 2;  // 战斗结束时间(时间戳)

    int64 settle_time_begin_sec = 3;  // 结算开始时间(一天中的第x秒 hh:mm:ss -> hh*3600+mm*60+ss)
    int64 settle_time_end_sec   = 4;  // 结算结束时间(一天中的第x秒 hh:mm:ss -> hh*3600+mm*60+ss)
  }
  TimeConfig time_config = 9;  // 时间配置

  RankInfo rank_info = 10;  // 排名信息
}

message ShopInfo {
  message ItemInfo {
    int64 item_id              = 1;  // 商品id
    repeated corepb.Item items = 2;  // 商品信息
    repeated corepb.Item costs = 3;  // 商品价格
    int64 limit                = 4;  // 限购次数
    int64 bought               = 5;  // 已购次数
    bool show_rp               = 6;  // 是否显示红点
  }
  repeated ItemInfo item_infos   = 1;  // 商品信息
  repeated corepb.Item own_items = 2;  // 拥有道具数
}

message RankInfo {
  int64 rank_id = 1;  // 当前排名所属排名id (-1 则表示未上榜，下面的数据都不生效)
  enum RankType {
    RANK_TYPE_UNKNOWN = 0;
    RANK_TYPE_VALUE   = 1;  // 名次
    RANK_TYPE_RANGE   = 2;  // 区间
  }
  RankType rank_type         = 2;  // 排名类型
  int64 my_rank_permille     = 3;  // 我的排名千分比
  int64 my_rank              = 4;  // 当前具体名次(1 - N)
  int64 next_level_rank_rank = 5;  // 排名下一档位排名(1 - N)
  int64 next_level_quest_id  = 6;  // 排名下一档位关卡数
}

service CSAct0137Service {

  // 外围功能
  rpc GetShopInfo(GetShopInfoRequest) returns (GetShopInfoReply);        // 获取商店信息
  rpc BuyItem(BuyItemRequest) returns (BuyItemReply);                    // 购买商品
  rpc SetItemShowRp(SetItemShowRpRequest) returns (SetItemShowRpReply);  // 设置商品红点
  rpc DeliverReward(DeliverRewardRequest) returns (DeliverRewardReply);  // 领取奖励

  // 战斗相关
  rpc GameStart(GameStartRequest) returns (GameStartReply);                       // 进入单局战斗
  rpc GameEnd(GameEndRequest) returns (GameEndReply);                             // 结算
  rpc SkipQuestByFC(SkipQuestByFCRequest) returns (SkipQuestByFCReply);           // 跳关(战力高)
  rpc SkipQuestBySkill(SkipQuestBySkillRequest) returns (SkipQuestBySkillReply);  // 跳关(技巧高，通关剩余血量和通关时间满足要求)

  // 阵容协议复刻
  rpc LoadoutInfo(LoadoutInfoRequest) returns (LoadoutInfoReply);     // 获取阵容信息
  rpc ApplyLoadout(ApplyLoadoutRequest) returns (ApplyLoadoutReply);  // 设置阵容
}

message GetShopInfoRequest {}
message GetShopInfoReply {
  ShopInfo shop_info = 1;  // 商店信息
}

message BuyItemRequest {
  int64 item_id                                       = 1;  // 商品id
  int64 count                                         = 2;  // 购买数量
  repeated corepb.GiftSelectedItem gift_selected_item = 3;  // 可选礼包选中道具信息(如果是可选礼包且未选则返回错误)
}
message BuyItemReply {
  repeated corepb.Item rewards = 1;  // 获得的奖励
}

message SetItemShowRpRequest {
  int64 item_id = 1;  // 商品id
  bool show_rp  = 2;  // 是否显示红点
}
message SetItemShowRpReply {}

message DeliverRewardRequest {}
message DeliverRewardReply {
  repeated corepb.Item rewards   = 1;  // 获得的奖励
  int64 not_rewarded_quest_count = 2;  // 剩余未领取奖励的关卡数
}

message GameStartRequest {
  int64 quest_id = 1;  // 关卡 ID
}
message GameStartReply {
  corepb.GameStartMessage start_msg = 1;
}

message GameEndRequest {
  int64 quest_id                = 1;  // 关卡 ID
  corepb.FightResultType result = 2;  // 战斗结果
  int32 reason                  = 3;  // 结算原因:EGameResultReason
  int64 remain_hp               = 4;  // 剩余血量(%)
  int64 pass_sec                = 5;  // 通关耗时(s)
  bytes dungeon_record_bytes    = 6;  // 战斗对局数据，校验用
}
message GameEndReply {
  corepb.GameOverMessage over_message   = 1;
  int64 could_skip_to_quest_id_by_fc    = 2;  // (战力符合要求)可跳转到的关卡
  int64 could_skip_to_quest_id_by_skill = 3;  // (通关时长等符合要求)可跳转到的关卡
  RankInfo rank_info                    = 4;  // 排名信息
}

message SkipQuestByFCRequest {
  int64 to_quest_id = 1;  // 关卡 ID
}
message SkipQuestByFCReply {}

message SkipQuestBySkillRequest {
  int64 to_quest_id = 1;  // 关卡 ID
}
message SkipQuestBySkillReply {}

message LoadoutInfoRequest {
  string loadout_type = 1;  // 阵容类型。具体有哪些值由玩法系统确定
}
message LoadoutInfoReply {
  corepb.LoadoutProfile profile = 1;  // 阵容配置
  corepb.Loadout loadout        = 2;  // 阵容
  bool valid                    = 3;  // 当前阵容是否合法
  bool adjusted                 = 4;  // 当前阵容检验时是否有过不合法的项目但已经被自动调整
}

message ApplyLoadoutRequest {
  string loadout_type    = 1;  // 阵容类型。具体有哪些值由玩法系统确定
  corepb.Loadout loadout = 2;  // 阵容
}
message ApplyLoadoutReply {
  // 若要设置的阵容不合法，会通过 rpc 错误告知。
}
