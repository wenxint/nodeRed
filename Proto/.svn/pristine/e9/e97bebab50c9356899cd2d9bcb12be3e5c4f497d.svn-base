// cs protocol
syntax = "proto3";
package clientpb;
option go_package = "git.woa.com/red/game-proto/clientpb";
import "corepb/fight_common.proto";

// 这个文件来自客户端; 修改必须由客户端发起后同步给我们!!!

message Vector3{
  int32 x = 1;// 除以1024
  int32 y = 2;// 除以1024
  int32 z = 3;// 除以1024
}

//基类的参数
message VkeyBase{
  int32 float_value = 1;// 除以1024
  int32 key_id = 2;
  int32 int_value = 3;
  string type = 4;
  //这里将来只用一个int32
  // int32 bulletDegree = 5;// 除以1024
  // int32 lengthRatio = 6;// 除以1024
  // bool isAuto = 7;
  int32 shipInfo = 5;
}





message VKeyAutoBattle{
  bool isAutoBattle = 1;
}

message VKeyAutoBattleLock{
  bool isAutoBattleUnLock = 1;
}

message VKeyAutoBattleClientLock{
  bool isAutoBattleClientUnLock = 1;
}

message VKeyAIPlayerEnable{
  bool bPlayerEnable = 1;
}

message VKeyRescue{
  int32 index = 1;// 用于指定释放第几个援护
  int32 value = 2;
}

message VKeySpaceScale{
  int32 spaceScale = 1;// 除以1024
}


message VKeyPerform{
  Vector3 position = 1;
}

message VKeyPerformScale{
  Vector3 scale = 1;
}

message VKeyBattleUIStatChange{
  int32 UI = 1;
  int32 Stat = 2;
}


message VKeyStoryAutoPlay{
  int32 Storyid = 1;
  int32 open = 2;
}

message VKeySyncBiaoQing{
  int32 Bqid = 1;
}

message VKeyUIEvt{
  uint32 hash = 1;
  uint32 upperHash = 2;
  uint32 lowerHash = 3;
}

message VKeyThinEntityMotion {
  int32 entityId = 1;
  int32 motionId = 2;
}

message VKeyGPSyncPos{
  int32 sid = 1;
  Vector3 position = 2;
  bool bLocal = 3;
}

message VKeyGPSyncScale{
  int32 sid = 1;
  Vector3 scale = 2;
}

message VKeyGPSyncMotion{
  int32 sid = 1;
  int32 motionId = 2;
  int32 frameId = 3;
}


message VKeySceneEvent{
  string evtName = 1;
  int32 arg = 2;
  int32 sid = 3;
}

message VKeySkillJoystick{
  int32 vkey = 1;
  int32 degree = 2;
  int32 dist = 3;
  bool ctlDir = 4;
}

message VkeySkillLinkCombo{
  int32 vkey = 1;
  bool linkComboStatus = 2;
  int32 skillCategory = 3;
  int32 skillIndex = 4;
}

message VkeySniperBullet{
  int32 id = 1;
  int32 speed = 2;
  Vector3 start = 3;
  Vector3 end = 4;
}


message VKeySyncDT{
  enum  SyncDTBuffOpType
  {
    SyncDTBuffOpTypeNONE = 0;
    SyncDTBuffOpTypeAdd = 1;
    SyncDTBuffOpTypeRemove = 2;
    SyncDTBuffOpTypeCLEAR = 3;
  }
  enum  SyncDTAIOpType
  {
    SyncDTAIOpTypeNONE = 0;
    SyncDTAIOpTypeAdd = 1;
    SyncDTAIOpTypeREMOVE = 2;
    SyncDTAIOpTypeOPENALL = 3;
    SyncDTAIOpTypeOPEN = 4;
  };
  int32 opType = 1;
  int32 sid = 2;
	int32 mid = 3;
  int32 group = 4;
	int32 vkey = 5;
  SyncDTBuffOpType buffOpType = 6;
  int32 buff = 7;
  SyncDTAIOpType aiOpType = 8;
  int32 ai = 9;
	int32 attrID = 10;
  int32 attrValue = 11;
  int32 actorType = 12;
  int32 commonIntValue1 = 13;
  int32 commonIntValue2 = 14;
  int32 commonIntValue3 = 15;
  int32 commonIntValue4 = 16;
  int32 commonIntValue5 = 17;
  int32 commonIntValue6 = 18;
  int32 commonIntValue7 = 19;
  string commonStrValue1 = 20;
  int64 commonInt64Value1 = 21;
}

message VKeySyncQuality {
  int32 quality = 1; // 当前品质
}


message VKeyBattleLoadingProgress{
  int32 progress = 1; // *100
}

message VKeyHeartBeat{
  int32 send_svrFrameId = 1; // *100
  int64 send_time = 2;
  int32 recv_svrFrameId = 3;
  int64 recv_time = 4;
}


message VKeyQTEStart{
  enum Type {
    Ordinary = 0; //普通QTE
    Wrestling   = 1;  // 角力QTE
    Diagnosis = 2; // 诊断QTE
  }
  Type type = 1; //点击次数
  bool bEnableForceFeedback = 2;//启用力反馈
}

message VKeySetSharedVariable{
  int32 sharedVariableId = 1;
  int32 sharedVariableValue = 2;
  bool bAutoCreate = 3;       //是否自动创建变量
}

message VKeyPlayGraph{
  string graph = 1;
}


//改变角色，练习场和镜中世界会用;只在单人本用
message ChangePlayerVkeyDetail{
    int32 team_id = 1;
    int32 vkey = 2;
    bool sameLocation = 3;
    corepb.FightPlayerInfo playerInfo = 4;
    bool isMainPlayer = 5;
    bool createWhenOldNull = 6;
}

// 结算通道定义
message JinFenBattleAutoBattle {
  int32 Groupid=1; //组员id
  string BlackBoard=2; //黑板名字
  int32 SetValue=3; //设置值
}


message PingDirect {
  uint32 PingToken = 1;
  uint32 runtime = 2;
  uint32 recvTime = 3;
}



message Quaternion{
  int32 x = 1;// 除以1024
  int32 y = 2;// 除以1024
  int32 z = 3;// 除以1024
  int32 w = 4;// 除以1024
}



message VKeyPerformRot{
  Quaternion rotation = 1;
}


message VKeyRefreshBattle{
  enum  RefreshBattleType
  {
    SyncDTAIOpTypeNONE = 0;
    SyncDTAIOpTypeRefresh = 1;
    SyncDTAIOpTypeReset = 2;
  };
  message ClientExtraParam {
    string clientExtraParamKey = 1;
    string clientExtraParamValue  = 2;
  }

  RefreshBattleType opType = 1;
  corepb.GameStartMessage startmsg = 2;
  int64 myGid =3;
  repeated ClientExtraParam param = 4;
}


message VKeySetViewInt{
  string key = 1;
  int32 value = 2;
}

message VKeySetMapCameraInfo{
  bool reset = 1; //是否是重置
  Vector3 offset = 2; //偏移
  int32 Pitch = 3; //俯仰角
}

message VkeyBullet{

}

message VKeyCRModePlayCard {
  int32 card_id = 1;
  Vector3 pos = 2; // 卡牌生效位置
  int32 index_in_hand = 3; // 在手牌序列中的索引（1-indexed，0为忽略）
}

message ClientStampedeItem {
  int32 op_type   = 1;  // 操作类型
  int32 item_uid = 2;  // 操作道具sid
  repeated int64 custom_data = 3; //自定义数据 
}

// 夺宝行动操作物品相关
message VKeyStampedeItemOpSync {
  repeated ClientStampedeItem items = 1;  // 操作物品列表
}

// 夺宝行动任务相关, 仅客户端表现层与逻辑层通信
message VKeyStampedeTaskOp {
  int32 buff_id   = 2;  // buff id
  int32 op_type   = 3;  // 操作类型,0-添加，1-移除
}

// 夺宝行动传送门状态变化
// vkey: GP_STAMPEDE_UPDATE_PORTAL(6353)，服务器纯透传
message VKeyStampedeUpdatePortalInfo {
  repeated int64 block_id      = 1;  // 传送点ID
}

//------------------------------------跨回合vkey--------------------------

message VkeyCrossRoundPlayerInfoAttr{
  int32 attr = 1;
	int32 value = 2;
}

message VkeyCrossRoundPlayerInfoVar{
  string name = 1;
  int32 type = 2;
	int32 intValue = 3;
  string stringValue = 4;
}

message VkeyCrossRoundPlayerInfo{
  int32 playerIndex = 1;
	int32 buddy_index = 2;
	int64 HP = 3; //下一回合的初始血量
	int64 LeftHP = 4; //当前回合结束时的血量
	int32 Energy = 5;
	int32 ReviveTimes = 6;
	int32 recordEnergyType = 7;	//记录修改后的能量类型（过局传递用）
	int32 LeftHpPercentRaw = 8;
	repeated int32 CrossRoundBuffs = 9;
  repeated VkeyCrossRoundPlayerInfoAttr AttributeValues = 10;		// 属性值,援护次数等在这里
  int32 status = 11;
  repeated VkeyCrossRoundPlayerInfoVar CustomVariables = 12; // 实体自定义属性
}


message VkeyCrossRoundInfo{
  uint32 roundIndex = 1;
  int32 winTeamId = 2;
  repeated VkeyCrossRoundPlayerInfo playerInfo = 3;
  int32 startMapSid = 4;
}

message VkeyCrossRoundSharedData{
  string key = 1;
	int32 m_storedValue = 2;
  int32 key_int = 3;
}

message VkeyCrossRoundSharedDataInfo{
  uint32 roundIndex = 1;
  repeated VkeyCrossRoundSharedData sharedData = 2;
}



//------------------------------------跨回合end--------------------------
