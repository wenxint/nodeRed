// cs protocol
syntax = "proto3";

package zonepb.voyagepb.logbookpb;
option go_package = "git.code.oa.com/red/zonsvr/pkg/proto/zonepb/voyagepb/logbookpb";

import "corepb/common.proto";

service LogbookService {
  // 拉取一个章节内所有任务信息
  rpc GetLogbookInfosByChapter(GetLogbookInfosByChapterRequest) returns (GetLogbookInfosByChapterReply);

  // 拉取一个海域内所有任务信息
  rpc GetLogbookInfosByArea(GetLogbookInfosByAreaRequest) returns (GetLogbookInfosByAreaReply);

  // 领取某个成就的奖励
  rpc ReceiveAchAward(ReceiveAchAwardRequest) returns (ReceiveAchAwardReply);

  // 上报任务已经非新开启
  rpc RemoveNewTaskTag(RemoveNewTaskTagRequest) returns (RemoveNewTaskTagReply);

  // 拉取某个任务的状态
  rpc GetLogbookTaskInfo(GetLogbookTaskInfoRequest) returns (GetLogbookTaskInfoReply);

  // 拉取特定类型成就的状态信息
  rpc GetAchvInfosByType(GetAchvInfosByTypeRequest) returns (GetAchvInfosByTypeReply);

  // 按照海域拉取故事信息
  rpc GetStoryInfosByArea(GetStoryInfosByAreaRequest) returns (GetStoryInfosByAreaReply);

  // 按照海域拉取岛屿信息
  rpc GetIslandInfosByArea(GetIslandInfosByAreaRequest) returns (GetIslandInfosByAreaReply);

  // 拉取物品状态信息
  rpc GetItemInfos(GetItemInfosRequest) returns (GetItemInfosReply);

  // 按照海域拉取宝藏信息
  rpc GetTreasureInfosByArea(GetTreasureInfosByAreaRequest) returns (GetTreasureInfosByAreaReply);

  // 拉取人物状态信息
  rpc GetNPCInfos(GetNPCInfosRequest) returns (GetNPCInfosReply);

  // 拉取动物状态信息
  rpc GetAnimalInfos(GetAnimalInfosRequest) returns (GetAnimalInfosReply);

  // 上报图鉴元素已经非新开启
  rpc RemoveNewElementTag(RemoveNewElementTagRequest) returns (RemoveNewElementTagReply);

  // 拉取鱼类状态信息
  rpc GetFishInfos(GetFishInfosRequest) returns (GetFishInfosReply);

  // 解锁鱼类状态信息
  rpc UnlockFishInfo(UnlockFishInfoRequest) returns (UnlockFishInfoReply);
}

service LogbookSSService {
  // 拉取某个任务的状态
  rpc GetTaskInfo(GetTaskInfoRequest) returns (GetTaskInfoReply);
}

message TaskBeginNotify {
  map<int64, LogbookInfo> new_tasks = 1;  // 新开启的任务
}

message TaskExpireNotify {
  repeated int64 expired_tasks = 2;  // 过期的任务
}

message ItemUnlockNotify {
  map<int64, LogbookElementInfo> new_items = 1;  // 新解锁的道具
}

message GetLogbookInfosByChapterRequest {
  repeated int64 chap_ids = 1;  //  章节ID，若置空，则返回所有章节内任务信息
}

message GetLogbookInfosByChapterReply {
  map<int64, ChapterLogbookInfo> chapter_infos = 1;  // 区域航海日志信息(chapter id -> chapter logbook info)
}

message GetLogbookInfosByAreaRequest {
  repeated int64 area_ids = 1;  //  海域ID，若置空，则返回所有海域内任务信息
}

message GetLogbookInfosByAreaReply {
  map<int64, AreaLogbookInfo> area_task_infos = 1;  // 区域航海日志信息(area id -> area logbook info)
}

message ReceiveAchAwardRequest {
  int64 achv_id = 1;  // 成就奖励ID
}

message ReceiveAchAwardReply {
  repeated corepb.Item items = 1;  // 获得的奖励
}

message RemoveNewTaskTagRequest {
  int64 task_id = 1;  // 任务ID
}

message RemoveNewTaskTagReply {
  LogbookInfo logbook_info = 1;  // 更新后的航海日志信息
}

message GetLogbookTaskInfoRequest {
  int64 task_id = 1;
}

message GetLogbookTaskInfoReply {
  LogbookInfo info = 1;
}

message GetTaskInfoRequest {
  int64 task_id = 1;
}

message GetTaskInfoReply {
  LogbookInfo info = 1;
}

message GetAchvInfosByTypeRequest {
  repeated AchievementType types = 1;  // 成就类型,若为空则表示查询全部类型的成就信息
}

message GetAchvInfosByTypeReply {
  repeated AchvInfos achvs = 1;  // 成就信息集合，按照类型分类
}

message GetStoryInfosByAreaRequest {
  repeated int64 area_ids = 1;  // 海域id, 若为空则表示查询全部海域
}

message GetStoryInfosByAreaReply {
  map<int64, AreaStoryInfo> area_story_infos = 1;  // 海域故事信息
}

message GetIslandInfosByAreaRequest {
  repeated int64 area_ids = 1;  // 海域id, 若为空则表示查询全部海域
}

message GetIslandInfosByAreaReply {
  map<int64, AreaLogbookElementInfo> area_island_infos = 1;  // 海域岛屿信息(area id ----> logbook element)
}

message GetItemInfosRequest {
  repeated int64 item_ids = 1;  // 物品配置id列表(logbook.xlsx中ItemConfig页签中的ID), 若为空则表示查询所有道具
}

message GetItemInfosReply {
  map<int64, LogbookElementInfo> item_infos = 1;  // 物品状态信息
}

message GetTreasureInfosByAreaRequest {
  repeated int64 area_ids = 1;  // 海域id, 若为空则表示查询全部海域
}

message GetTreasureInfosByAreaReply {
  map<int64, AreaLogbookElementInfo> area_treasure_infos = 1;  // 海域宝藏信息(area id ----> logbook element)
}

message GetNPCInfosRequest {
  repeated int64 npc_ids = 1;  // npc id列表, 若为空则表示查询所有npc
}

message GetNPCInfosReply {
  map<int64, LogbookElementInfo> npc_infos = 1;  // npc状态信息
}

message GetAnimalInfosRequest {
  repeated int64 animal_ids = 1;  // animal id列表, 若为空则表示查询所有animal
}

message GetAnimalInfosReply {
  map<int64, LogbookElementInfo> animal_infos = 1;  // animal状态信息
}

message RemoveNewElementTagRequest {
  int64 elem_id                = 1;  // 图鉴元素ID
  LogbookElementType elem_type = 2;  // 图鉴元素类型
}

message RemoveNewElementTagReply {
  LogbookElementInfo elem_info = 1;  // 更新后的图鉴元素信息
}

message GetFishInfosRequest {}

message GetFishInfosReply {
  map<int64, LogbookFishInfo> fish_infos = 1;  // fish状态信息
}

message UnlockFishInfoRequest {
  int64 fish_id = 1;  // 鱼类ID
}

message UnlockFishInfoReply {
  repeated corepb.Item items = 1;  // 获得的奖励
}

message LogbookInfo {
  int64 task_id               = 1;  // 航海日志任务ID
  bool began                  = 2;  // 是否已经开启
  bool new                    = 3;  // 若已开启，是否是新任务（玩家没有点击过）
  bool finished               = 4;  // 是否已经完成
  bool awarded                = 5;  // 是否已经发奖
  int64 curr_step             = 6;  // 当前任务步骤，仅在任务为进行中状态时有意义
  bool meet_step_condition    = 7;  // 是否满足当前步骤条件，仅在任务为进行中状态时有意义
  map<int64, bool> conditions = 8;  // 若任务未开启，各个条件的满足情况(key为条件ID)
  TaskType type               = 9;  // 任务类型
}

message AchvInfo {
  int64 achv_id           = 1;  // 成就ID
  bool achieved           = 2;  // 是否达成
  AchievementType type    = 3;  //成就类型
  bool awarded            = 4;  // 是否领奖
  int64 progress          = 5;  // 若未完成，其进度多少（完成了多少任务）
  repeated int64 task_ids = 6;  //已完成任务id数组
}

message AchvInfos {
  AchievementType type            = 1;  // 成就类型
  map<int64, AchvInfo> achv_infos = 2;  // 成就信息（achv id ---> achv info）
}

message ChapterLogbookInfo {
  int64 chap_id                         = 1;  // 章节ID
  map<int64, LogbookInfo> logbook_infos = 2;  // 航海日志信息(task id -> logbook info)
}

message AreaLogbookInfo {
  int64 area_id                         = 1;  // 海域ID
  map<int64, LogbookInfo> logbook_infos = 2;  // 航海日志信息(task id -> logbook info)
}

message AreaStoryInfo {
  int64 area_id                     = 1;  // 海域ID
  map<int64, StoryInfo> story_infos = 2;  // 故事信息(story id -> story info)
}

message StoryInfo {
  int64 story_id                = 1;  // 故事ID
  int64 area_id                 = 2;  // 区域ID
  bool achieved                 = 3;  // 是否完成
  int64 progress                = 4;  // 故事进度
  TaskGroupInfo task_group_info = 5;  // 任务组信息
}

message TaskGroupInfo {
  repeated int64 finish_task_ids = 1;  //已完成任务组id（任务组序号 -> 组内已经完成的任务id）
  repeated int64 begin_task_ids  = 2;  //已开始未完成任务组id（任务组序号 -> 组内进行中的任务id）
}

// 航海日志图鉴基本元素信息（适用于带有解锁状态的元素，包括物品、岛屿、宝藏、人物、动物）
message LogbookElementInfo {
  int64 id                = 1;  // ID
  bool un_lock            = 2;  // 是否解锁
  bool new                = 3;  // 是否为新标记
  LogbookElementType type = 4;  //图鉴元素类型
}

message AreaLogbookElementInfo {
  int64 area_id                                = 1;  // 海域ID
  map<int64, LogbookElementInfo> element_infos = 2;  // 图鉴基本元素信息(element id -> story info)
}

enum AchievementType {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  TYPENONE     = 0;   // 无
  BIOGRAPHY    = 1;   // 传记
  STORYS       = 2;   // 故事
  WORLD        = 3;   // 世界
  BIOLOGY      = 4;   // 生物
  FOOD         = 5;   // 美食
  ISLAND       = 6;   // 岛屿
  ITEM         = 7;   // 物品
  TREASURE     = 8;   // 宝藏
  NPC          = 9;   // 人物
  ANIMAL       = 10;  // 动物
  LOGBOOK_FISH = 11;  // 钓鱼
  FISH_COUNT   = 12;  // 海产数
  FISH_CROWN   = 13;  // 皇冠
}

enum TaskType {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  MAIN    = 0;  // 主线任务
  STORY   = 1;  //  支线任务
  RANDOM  = 2;  // 随机任务
  EXPLORE = 3;  // 探索任务
}

enum LogbookElementType {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  LOGBOOK_ELEMENT_TYPE_NONE = 0;  // 无
  ISLAND_ELEMENT            = 1;  // 岛屿
  ITEM_ELEMENT              = 2;  // 贸易品
  TREASURE_ELEMENT          = 3;  // 宝藏
  NPC_ELEMENT               = 4;  // 人物
  ANIMAL_ELEMENT            = 5;  // 动物
  FISH_ELEMENT              = 6;  // 鱼类（目前只供钓鱼经分使用）
}

// 鱼类元素信息
message LogbookFishInfo {
  int64 id            = 1;  // 鱼ID
  bool un_lock        = 2;  // 是否解锁
  bool captured       = 3;  // 是否捕获
  int64 min_size      = 4;  // 最小尺寸
  int64 max_size      = 5;  // 最大尺寸
  bool min_size_crown = 6;  // 最小尺寸是否达到皇冠级别
  bool max_size_crown = 7;  // 最大尺寸是否达到皇冠级别
  int64 capture_time  = 8;  // 捕获时间
  int64 capture_count = 9;  // 捕获次数
}