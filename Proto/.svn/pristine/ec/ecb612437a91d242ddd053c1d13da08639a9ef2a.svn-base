// cs protocol
syntax = "proto3";

package scenepb;
option go_package = "git.code.oa.com/red/scenepb/pkg/proto/scenepb";

import "corepb/loadout_comm.proto";
import "corepb/scene_common.proto";

// 用于客户端调用的服务接口
// 需要在 metadata 里带上 "x-sceneid: routerid"
// routerid由EnterScene/CreateScene协议获得，该协议在mesh层被劫持。
service CSService {
  rpc LoadReady(LoadReadyRequest) returns (LoadReadyReply);     // 由于客户端监听通知包的时机问题，加一条协议
  rpc LeaveScene(LeaveSceneRequest) returns (LeaveSceneReply);  // 退出场景
  rpc RoleOpt(RoleOptRequest) returns (RoleOptReply);           // 玩家操作
  rpc Ping(PingRequest) returns (PingReply);                    // 来自客户端的心跳协议
}

message LoadReadyRequest {}
message LoadReadyReply {}

message LeaveSceneRequest {}
message LeaveSceneReply {}

message RoleOptRequest {
  corepb.SceneRoleOptUnit opt = 1;
}
message RoleOptReply {}

message StopRequest {}
message StopReply {}

message RoleOptInfo {
  corepb.SceneRoleBasicInfo basic_info  = 1;  // 玩家基础信息
  corepb.Loadout loadout                = 2;  // 阵容， 不同的场景可能有不同的阵容
  repeated corepb.SceneRoleOptUnit opts = 3;  // 操作信息
}

message SceneRoleOptNTF {
  repeated RoleOptInfo opt_list = 1;
  corepb.SceneType scene_type   = 2;  // 场景类型
}

message PingRequest {}
message PingReply {}