// cs protocol
syntax = "proto3";

package actpb.act0080pb;
option go_package = "git.woa.com/red/actsvr/pkg/proto/actpb/act0080pb";

import "corepb/common.proto";

service CSAct0080Service {
  // Betting 竞猜
  rpc Betting(BettingRequest) returns (BettingReply);

  rpc SeenVideo(SeenVideoRequest) returns (SeenVideoReply);
  // BettingReward 发奖励邮件
  rpc BettingReward(BettingRewardRequest) returns (BettingRewardReply);
  // BettingRecord 竞猜记录
  rpc BettingRecord(BettingRecordRequest) returns (BettingRecordReply);
}

message BettingRewardRequest {}

message BettingRewardReply {}

message SeenVideoRequest {
  bool is_whole_video = 1;
}

message SeenVideoReply {
  bool is_whole_video = 1;
}

enum GamePeriod {
  GAME_PERIOD_UNKNOWN       = 0;
  GAME_PERIOD_NOT_START     = 1;
  GAME_PERIOD_BETTING       = 2;
  GAME_PERIOD_PUBLIC_NOTICE = 3;
  GAME_PERIOD_OVER          = 4;
}

message ActGetDetailRequest {}

message ActGetDetailReply {
  GameRecord game                  = 1;
  int64 now_time                   = 6;
  int64 next_public_notice_time    = 7;
  int64 next_betting_time          = 8;
  bool is_seen_preview_video       = 9;   // 是否看过预览视频
  bool is_seen_result_video        = 10;  // 是否看过结果视频
  bool is_rewarded                 = 11;  // 是否已领取奖励
  repeated corepb.Item win_awards  = 12;
  repeated corepb.Item lose_awards = 13;
  bool is_seen_whole_video         = 14;  // 是否看过完整视频
}

message BettingRequest {
  int64 game_id = 1;
  int64 team_id = 2;
}

message BettingReply {}

message BettingRecordRequest {}

message BettingRecordReply {
  repeated GameRecord records = 1;
}

message GameRecord {
  int64 game_id       = 1;
  int64 betting_team  = 3;  // 0是未竞猜
  int64 win_team      = 4;  // 0是未开始
  int64 betting_time  = 5;  // 玩家竞猜时间
  repeated Team teams = 6;
  string video_url    = 7;  // 按状态判断返回预览视频或结果视频
  GamePeriod period   = 8;
}

message Team {
  int64 team_id         = 1;
  int64 support_percent = 2;  // 支持率
}