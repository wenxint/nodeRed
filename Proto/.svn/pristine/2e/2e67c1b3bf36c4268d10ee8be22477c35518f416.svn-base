// cs protocol
syntax = "proto3";

package actpb.act0050pb;
option go_package = "git.woa.com/red/actsvr/pkg/proto/actpb/act0050pb";

import "corepb/common.proto";
import "google/protobuf/any.proto";

// rpc ActGetDetail 活动详情使用通用协议
message ActGetDetailRequest {}
message ActGetDetailReply {
  SecretaryGiftInfo secretary_gift_info = 1;  // 秘书赠礼信息
  JointBattleInfo joint_battle_info     = 2;  // 特别服务 - 小队冒险信息
  SecretFieldInfo secret_field_info     = 3;  // 特别服务 - 秘宝试炼信息
  repeated ApprovalInfo approval_infos  = 4;  // 快速审批信息
  AdventureInfo adventure_info          = 5;  // 特别服务 - 主线信息
  VoyageExploreInfo voyage_explore_info = 6;  // 特别服务 - 海域探险信息
  MirrorWorldInfo mirror_world_info     = 7;  // 特别服务 - 镜中世界信息
  BuffInfo buff_info                    = 8;  // 属性增益
}

// 秘书赠礼信息
message SecretaryGiftInfo {
  bool is_unlocked             = 1;  // 是否解锁
  bool is_rewarded             = 2;  // 是否已领取
  repeated corepb.Item rewards = 3;  // 奖励
}

// 特别服务 - 小队冒险信息
message JointBattleInfo {
  int64 sweep_ticket_reward_num = 1;  // 可领取扫荡券数量
  int64 sweep_ticket_remain_num = 2;  // 剩余扫荡券数量
  int64 can_challenge_times     = 3;  // 剩余挑战次数
  bool is_selected_triple       = 4;  // 是否已选择三倍奖励
  bool is_system_open           = 5;  // 是否系统开启
}

// 特别服务 - 秘宝试炼信息
message SecretFieldInfo {
  int64 sweep_ticket_reward_num = 1;  // 可领取扫荡券数量
  int64 sweep_ticket_remain_num = 2;  // 剩余扫荡券数量
  int64 can_challenge_times     = 3;  // 剩余挑战次数
  int64 current_level           = 4;  // 当前层数
  bool is_system_open           = 5;  // 是否系统开启
}

// 特别服务 - 主线信息
message AdventureInfo {
  bool is_unlocked                   = 1;  // 是否解锁，未解锁不展示
  int64 max_fast_pass_quest_id       = 2;  // 可速通关卡id上限
  int64 last_completed_quest_id      = 3;  // 已通关关卡id
  int64 available_fast_pass_quest_id = 4;  // 可速通关卡id （如果大于last_completed_quest_id，则表示有关卡可以速通）
  int64 collected_treasure_amount    = 5;  // 已收集藏品数量
  int64 total_treasure_amount        = 6;  // 总藏品数量
  bool is_system_open                = 7;  // 是否系统开启
}

// 特别服务 - 海域探险信息
message VoyageExploreInfo {
  bool is_unlocked        = 1;  // 是否解锁，未解锁不展示
  int64 map_id            = 2;  // 地图id
  int64 explore_progress  = 3;  // 探索进度,0-10000
  int64 rebate_auto_power = 4;  // 返还自动探索能量
  bool claimed            = 5;  // 是否已领取
  bool is_system_open     = 6;  // 是否系统开启
}

// 特别服务 - 镜中世界信息
message MirrorWorldInfo {
  bool is_unlocked    = 1;  // 是否解锁，未解锁不展示
  int64 chapter_id    = 2;  // 解锁章节id
  int64 rebate_coin   = 3;  // 返还速通币数量
  bool claimed        = 4;  // 是否已领取
  bool is_system_open = 5;  // 是否系统开启
}

// 快速审批信息
message ApprovalInfo {
  int64 approval_id       = 1;  // 审批 ID
  int64 approval_type     = 2;  // 审批事项(关联配置表中ApprovalType枚举)
  int64 related_system_id = 3;  // 关联系统ID

  message ApprovalState {
    bool is_approved = 1;  // 是否已审批
  }
  ApprovalState approval_state = 4;  // 审批状态

  google.protobuf.Any approval_info = 11;  // 审批信息(根据AppApprovalType使用具体的msg解包)
}

// 属性增益
message BuffDetail {
  int64 id                        = 1;  // Buff ID
  repeated int64 params           = 2;  // Buff 参数
  corepb.FightAttr bonus_attr     = 3;  // Buff 属性加成
  repeated corepb.Item attr_items = 4;  // 属性道具
}

message BuffInfo {
  bool is_unlocked                 = 1;  // 是否解锁
  repeated BuffDetail buff_details = 2;  // Buff 列表
}

service CSAct0050Service {
  // 秘书赠礼
  rpc RewardSecretaryGift(RewardSecretaryGiftRequest) returns (RewardSecretaryGiftReply);  // 领取秘书赠礼

  // 特别服务
  rpc RewardSweepTicket(RewardSweepTicketRequest) returns (RewardSweepTicketReply);           // 领取扫荡券
  rpc SetJointBattleTriple(SetJointBattleTripleRequest) returns (SetJointBattleTripleReply);  // 设置小队三倍奖励

  // 快速审批
  rpc Approval(ApprovalRequest) returns (ApprovalReply);

  // 设置贝里购买次数
  rpc SetBellyBuyTimes(SetBellyBuyTimesRequest) returns (SetBellyBuyTimesReply);
  // 设置排行榜点赞玩家
  rpc SetRankLikeGid(SetRankLikeGidRequest) returns (SetRankLikeGidReply);
  // 设置祈福类型
  rpc SetGuildBlessType(SetGuildBlessTypeRequest) returns (SetGuildBlessTypeReply);

  // 查询主线奖励
  rpc QueryAdventureReward(QueryAdventureRewardRequest) returns (QueryAdventureRewardReply) {}
  // 速通主线
  rpc FastPassAdventure(FastPassAdventureRequest) returns (FastPassAdventureReply) {}
  // 速通奖励领取
  // RewardType
  // 0 - 领取海域探险
  // 1 - 领取镜像世界
  // 使用actbasepb.ActDeliverReward
}

message QueryAdventureRewardRequest {
  int64 to_quest_id = 1;  // 到指定关卡
}

message QuestInfo {
  int64 quest_id                        = 1;  // 关卡id
  repeated corepb.Item first_time_drops = 2;  // 首通奖励
  repeated corepb.Item treasure_items   = 3;  // 藏品列表
}

message QueryAdventureRewardReply {
  repeated QuestInfo quest_infos = 1;  // 关卡信息
}

message FastPassAdventureRequest {
  int64 to_quest_id = 1;  // 通关主线到指定关卡
}

message FastPassAdventureReply {
  int64 last_completed_quest_id  = 1;  // 已通关关卡id
  repeated QuestInfo quest_infos = 2;  // 关卡信息
}

message RewardSecretaryGiftRequest {}
message RewardSecretaryGiftReply {
  repeated corepb.Item rewards = 1;  // 奖励
}

message RewardSweepTicketRequest {
  enum Type {
    TYPE_UNKNOWN      = 0;  // 未知
    TYPE_SECRET_FIELD = 1;  // 秘宝试炼
    TYPE_JOINT_BATTLE = 2;  // 小队冒险
  }
  Type sweep_type = 1;  // 扫荡类型
}
message RewardSweepTicketReply {
  repeated corepb.Item rewards = 1;  // 奖励
}

message SetJointBattleTripleRequest {
  bool is_selected = 1;  // 是否选择三倍奖励
}
message SetJointBattleTripleReply {}

message ApprovalRequest {
  int64 approval_id                 = 1;  // 审批ID
  int64 approval_type               = 2;  // 审批类型
  google.protobuf.Any approval_info = 3;  // 审批数据(主要是用于后台校验客户端认为的状态是否和后台实际的一致，如果不一致，抛出数据已刷新错误码)
  google.protobuf.Any extra_data    = 4;  // 额外校验数据

  bool is_super_captain = 11;  // 是否是超级船长
}

message ApprovalReply {
  repeated corepb.Item rewards = 1;  // 审批奖励
}

// +--------------------------------------------------------------------------------------------------------------------+
// | 下面是快速审批中 对应各子系统的设置接口msg
// +--------------------------------------------------------------------------------------------------------------------+

message SetBellyBuyTimesRequest {
  int64 set_buy_times = 1;  // 设置的购买次数
}
message SetBellyBuyTimesReply {
  BuyBellyInfo buy_belly_info = 1;  // 购买贝里审批条目信息
}

message SetRankLikeGidRequest {
  int64 gid = 1;  // 点赞的玩家gid
}
message SetRankLikeGidReply {
  RankLikeInfo rank_like_info = 1;  // 点赞玩家审批条目信息
}

message SetGuildBlessTypeRequest {
  enum BlessType {
    BLESS_TYPE_UNKNOWN       = 0;  // 未知
    BLESS_TYPE_SMALL_REGARDS = 1;  // 略表心意
    BLESS_TYPE_BEST_WISHES   = 2;  // 虔诚祈福
  }
  BlessType bless_type = 1;  // 祈福类型
}
message SetGuildBlessTypeReply {
  GuildBlessInfo guild_bless_info = 1;  // 祈福类型审批条目信息
}

// +--------------------------------------------------------------------------------------------------------------------+
// | 下面是快速审批中 对应各子系统的自定义显示信息
// +--------------------------------------------------------------------------------------------------------------------+

// 海域巡航
message CruiseRewardInfo {
  int64 cruise_duration       = 1;  // 当前的巡航时间（秒）
  int64 cruise_duration_limit = 2;  // 巡航时间限制（秒）
  int64 sailing_power         = 3;  // 当前的航行力
  int64 sailing_power_limit   = 4;  // 航行力限制
}

// 镜中世界
message MirrorRewardInfo {
  int64 can_award_days    = 1;  // 剩余可领取奖励天数
  int64 max_award_days    = 2;  // 最大可领取奖励天数
  bool is_exist_new_quest = 3;  // 是否存在新关卡
}

// 贝里购买
message BuyBellyInfo {
  int64 set_buy_times             = 1;  // 设置购买次数
  int64 already_buy_times         = 2;  // 已购买次数
  repeated corepb.Item cost_items = 3;  // 消耗物品
  int64 max_buy_times_limit       = 4;  // 最大购买次数
}

// 排行榜点赞
message RankLikeInfo {
  int64 like_gid                           = 1;  // 点赞的玩家gid
  corepb.PersonalDisplayInfo personal_info = 2;  // 点赞的玩家个人信息
  bool is_anonymous                        = 3;  // 玩家是否匿名
  bool is_already_liked                    = 4;  // 是否已点赞
}

// 工场扫荡
message FactorySweepInfo {
  int64 remain_fatigue = 1;  // 剩余体力
  int64 max_fatigue    = 2;  // 最大体力
}

// 情报订阅
message IntelOfferInfo {
  int64 seagull_coin_num = 1;  // 海鸥币数量
}

// 赏金大赛
message BountyGameRewardInfo {
  int64 can_challenge_times = 1;  // 剩余挑战次数
}

// 每日分享
message DailyShareInfo {
  bool is_already_shared = 1;  // 是否已分享
}

// 同盟祈福
message GuildBlessInfo {
  enum BlessType {
    BLESS_TYPE_UNKNOWN       = 0;  // 未知
    BLESS_TYPE_SMALL_REGARDS = 1;  // 略表心意
    BLESS_TYPE_BEST_WISHES   = 2;  // 虔诚祈福
  }

  int64 bless_players_num         = 1;  // 祈福人数
  BlessType bless_type            = 2;  // 祈福类型
  repeated corepb.Item cost_items = 3;  // 消耗物品
  bool is_already_blessed         = 4;  // 是否已祈福
}

message ReturningPrivilegeNotify {
  int64 available_fast_pass_quest_id = 1;  // 可速通关卡id
}
