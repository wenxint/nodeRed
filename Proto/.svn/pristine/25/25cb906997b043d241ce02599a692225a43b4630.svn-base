// cs protocol
syntax = "proto3";

package corepb;
option go_package = "git.woa.com/red/game-proto/corepb";

import "corepb/common.proto";

enum StampedeItemStatus {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  ITEM_STATUS_UNEQUIPPED = 0;  // 未装备状态
  ITEM_STATUS_IN_BAG     = 1;  // 背包状态
  ITEM_STATUS_EQUIPPED   = 2;  // 装备状态
  ITEM_STATUS_UNUSE      = 3;  // 不可用状态（护甲/药品已用完）
}

enum StampedeItemType {
  ITEM_TYPE_UNKNOWN  = 0;  // 未知类型
  ITEM_TYPE_ARMOR    = 1;  // 护甲类型
  ITEM_TYPE_MEDICINE = 2;  // 药品类型
  ITEM_TYPE_BAG      = 3;  // 背包类型
  ITEM_TYPE_BADGE    = 4;  // 徽章类型
  ITEM_TYPE_TREASURE = 5;  // 宝物类型
  ITEM_TYPE_COMMON   = 6;  // 通用类型
}

enum StampedeTradingStatus {
  TRADING_STATUS_UNKNOWN = 0;  // 未知类型
  TRADING_STATUS_ON_SALE = 1;  // 正在出售状态
  TRADING_STATUS_SOLD    = 2;  // 已经出售状态
  TRADING_STATUS_EXPIRED = 3;  // 已经过期状态
}

message StampedeTradingInfo {
  StampedeTradingStatus trading_status = 1;  // 上架交易状态
  int64 price                          = 2;  // 上架价格
  int64 count                          = 3;  // 上架数量
  int64 timestamp                      = 4;  // 上架时间戳
  string order_id                      = 5;  // 上架订单ID
}

message StampedeItem {
  message TaskInfo {
    int64 owner_buff_id = 1;  // 归属任务buffID
    int64 gid           = 2;  // 玩家gid
  }

  StampedeItemStatus item_status   = 1;  // 道具状态
  int64 item_uid                   = 2;  // 局内唯一ID
  corepb.Item item                 = 3;  // 常规道具信息
  repeated int64 metadata          = 4;  // meta 数据，用于展示一些额外信息，比如剩余护甲值/药品剩余血量
  bool is_sell_by_shop             = 5;  // 是否为商店售卖道具
  int64 owner_id                   = 6;  // 归属ID（玩家=gid，怪物=怪物ID*100+idx，0=关卡）
  StampedeTradingInfo trading_info = 7;  // 交易行数据
  TaskInfo task_info               = 8;  // 任务信息
}

// 玩家位置，目前夺宝行动用
message PlayerPosition {
  int64 type     = 1;  // 类型，0-不生效，1-出生点，2-位置
  int64 born_idx = 2;  // 出生点索引
  int64 pos_x    = 3;  // 位置x
  int64 pos_y    = 4;  // 位置y
  bool is_mirror = 5;  // 朝向
}

// 夺宝行动玩家信息，序列化后存入FightPlayerInfo的ext_info字段
message PlayerExtInfoStampede {
  PlayerPosition position = 1;  // 玩家位置
  // TODO 装备信息，背包数据等
}

// 夺宝行动战斗开始自定义数据，GameStartMessage中的custom_data字段
message StampedeGameStartData {
  // TODO 开始数据
  repeated StampedeItem act_items      = 1;  // 局内道具列表
  StampedeFightMapInfo fight_map_info  = 2;  // 战斗地图信息
  map<int64, StampedeBagInfo> bag_info = 3;  // 玩家 Gid -> 背包信息
  int64 end_time                       = 4;  // 结束时间戳
}

message StampedeBagInfo {
  int64 init_equipment_size = 1;  // 初始装备格大小
  int64 init_treasure_size  = 2;  // 初始宝物格大小
}

// 夺宝行动整局战斗结算自定义数据，GameOverMessage中的custom_data字段
// 此数据由后台通过GameOverNtf下发给客户端
message StampedeGameLoseSettleData {
  int64 killed_by_monster_id               = 1;  // 被击杀怪物ID
  StampedePlayerInfo killed_by_player_info = 2;  // 被击杀玩家信息
  bool is_timeout                          = 3;  // 是否为超时失败
}

// 夺宝行动整局战斗结算自定义数据，GameOverMessage中的custom_data字段
// 此数据由后台通过GameOverNtf下发给客户端
message StampedeGameWinSettleData {
  // 战局内击败信息
  message BeatInfo {
    int64 player_num                        = 1;  // 击败玩家数量
    map<int64, int64> monster_type_kill_num = 2;  // 怪物类型 -> 击败数量, 怪物类型（1-大BOSS, 2-小BOSS, 3-精英, 4-普通, 5-物件）
  }

  int64 pass_time                               = 1;  // 通关时长
  int64 out_bag_total_value                     = 2;  // 该局带出背包的总价值
  BeatInfo beat_info                            = 3;  // 击败信息
  repeated StampedePlayerInfo beat_player_infos = 4;  // 击败玩家信息
  bool is_all_transfer                          = 5;  // 是否全部转移到仓库中
}

// 战局内玩家信息
message StampedePlayerInfo {
  int64 gid                                 = 1;  // 玩家gid
  PersonalDisplayInfo personal_display_info = 2;  // 玩家展示信息
}

enum StampedeItemDropStatus {
  ITEM_DROP_STATUS_UNKNOWN = 0;  // 未知状态
  ITEM_DROP_STATUS_NO_DROP = 1;  // 尚未掉落任何道具状态
  ITEM_DROP_STATUS_DROPPED = 2;  // 掉落道具，尚未拾取状态
  ITEM_DROP_STATUS_PICK_UP = 3;  // 掉落道具，拾取状态
}

message StampedeEscapePointInfo {
  reserved 1;
  bool is_escape_point = 2;  // 是否为逃离点房间
  int64 player_gid     = 3;  // 玩家gid
  int64 remain_times   = 4;  // 该撤离点剩余撤离次数次数,-1代表不限次

  // 条件撤离点才需要下面这些字段
  int64 cond_type                 = 5;  // 撤离条件：0-无条件，1-提交指定物品，2-丢弃背包（即背包为空）,3-限时撤离点
  repeated corepb.Item cond_items = 6;  // 提交指定物品列表（cond_type=1时有效）
  int64 limit_active_ts           = 7;  // 限时撤离点激活后，实际生效的时间戳（cond_type=3时有效），0表示限时撤离点未激活
}

message StampedeBlockInfo {
  int64 block_id      = 1;  // 传送点ID
  int64 next_level_id = 2;  // 下一关卡ID
}

message StampedeFightMapInfo {
  repeated StampedeEscapePointInfo escape_point_infos = 1;  // 逃离点信息
  repeated StampedeBlockInfo block_infos              = 2;  // 传送点信息
  StampedeItemDropStatus is_drop_status               = 3;  // 道具掉落状态
}

// 战斗结束的玩家动态数据
message StampedePlayerDynamicInfo {
  int64 gid        = 1;  // 玩家gid
  int64 hp         = 2;
  int64 mp         = 3;
  int32 position_x = 4;
  int32 position_y = 5;
  bool is_mirror   = 6;  // 主角朝向
}

message StampedeMosterDynamicInfo {
  int64 id         = 1;
  int32 idx        = 2;
  int64 init_hp    = 3;  // 初始生命
  int32 position_x = 4;
  int32 position_y = 5;
  bool is_mirror   = 6;  // 怪物朝向
  bool is_dead     = 7;  // 怪物是否死亡
  int32 quadrant   = 8;  // 象限
}

// 夺宝行动战斗结束自定义数据，GameOverMessage或GameEventMessage中的custom_data字段
// 后台内部单局结算时使用（不涉及客户端）
message StampedeGameOverData {
  message MonsterInfo {
    int64 monster_id  = 1;  // 怪物ID
    int32 monster_idx = 2;  // 怪物索引
  }
  message KillMonsterInfos {
    repeated MonsterInfo kill_monster_infos = 1;  // 击杀怪物信息
  }

  map<int64, int64> player_block_id                         = 1;  // 离开时的传送点，gid->block_id
  repeated StampedeItem act_items                           = 2;  // 局内道具列表
  map<int64, StampedePlayerDynamicInfo> player_dynamic_info = 3;  // 玩家动态数据
  repeated StampedeMosterDynamicInfo monster_dynamic_info   = 4;  // 怪物动态数据，只有GameOverMessage有
  map<int64, int64> kill_players                            = 5;  // killer gid(如果被怪物击杀，则这里是怪物ID) -> killed gid
  map<int64, KillMonsterInfos> kill_monster_info            = 6;  // 击杀怪物信息，gid -> 击杀怪物信息
  StampedeItemDropStatus item_drop_status                   = 7;  // 该副本中宝箱的状态
  repeated int64 settle_player_gids                         = 8;  // 本次实际结算的玩家gid列表
}
