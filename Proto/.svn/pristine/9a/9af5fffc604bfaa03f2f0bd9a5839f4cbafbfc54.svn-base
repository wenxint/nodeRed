// cs protocol
syntax = "proto3";

package zonepb.shiproguepb;
option go_package = "git.woa.com/red/zonesvr/pkg/proto/zonepb/shiproguepb";


// import "corepb/common.proto";

service ShipRogueCSService {
  // 最开始选择船只
  rpc SelectShips(SelectShipsRequest) returns (SelectShipsReply);
  // 拉取商店信息，每过一个波次都要拉一下商品信息
  rpc GetShopItems(GetShopItemsRequest) returns (GetShopItemsReply);
  // 刷新商品信息
  rpc RefreshShopItems(RefreshShopItemsRequest) returns (RefreshShopItemsReply);
  // 购买商品
  rpc BuyShopItem(BuyShopItemRequest) returns (BuyShopItemReply);
  // 锁定商品
  rpc LockShopItem(LockShopItemRequest) returns (LockShopItemReply);
  // 解锁商品
  rpc UnLockShopItem(UnLockShopItemRequest) returns (UnLockShopItemReply);
  // 武器升级
  rpc WeaponUpgrade(WeaponUpgradeRequest) returns (WeaponUpgradeReply);
  // 武器售卖
  rpc WeaponSold(WeaponSoldRequest) returns (WeaponSoldReply);
  // 回收宝箱
  rpc TreasurePackSold(TreasurePackSoldRequest) returns (TreasurePackSoldReply);
  // 收下宝箱
  rpc TreasurePackAccept(TreasurePackAcceptRequest) returns (TreasurePackAcceptReply);
  // 是否有存档
  rpc InAnyChapterProcess(InAnyChapterProcessRequest) returns (InAnyChapterProcessReply);
}

enum ShopItemState {
  SHOP_ITEM_STATE_UNKNOWN = 0;  // 默认状态
  SHOP_ITEM_STATE_BOUGHT  = 1;  // 已购买
  SHOP_ITEM_STATE_LOCKED  = 2;  // 锁定
}

message TreasurePackSoldRequest {
  int64 chapter_id        = 1;  // 章节id
  int64 treasure_pack_idx = 2;  // 索引
  int64 treasure_pack_id  = 3;  // 宝箱id
}

message TreasurePackSoldReply {
  int64 coin      = 1;  // 金币
  int64 pack_coin = 2;  // 储藏金币
}

message TreasurePackAcceptRequest {
  int64 chapter_id        = 1;  // 章节id
  int64 treasure_pack_idx = 2;  // 索引
  int64 treasure_pack_id  = 3;  // 宝箱id
}

message TreasurePackAcceptReply {
  bool is_auto_upgrade = 1;  // 是否自动升级
}

message TreasurePack {
  int64 id         = 1;
  int64 sold_price = 2;
}

message SelectShipsRequest {
  int64 chapter_id        = 1;  // 章节id
  repeated int64 ship_ids = 2;  // 船只id
}

message SelectShipsReply {
  int64 chapter_id    = 1;  // 章节id
  int64 current_level = 2;  // 当前波次，为0则表示第一次进入
}

message GameStartRequest {
  int64 chapter_id = 1;  // 章节id
}

message GameStartReply {
  int64 level                    = 1;  // 要挑战的波次
  int64 pack_coin                = 2;  // 储藏货币
  repeated Weapon bought_weapons = 3;  // 已装备的武器
  repeated Props bought_props    = 4;  // 已购买的道具
}

message GameEndRequest {
  int64 chapter_id                   = 1;  // 章节id
  int64 coin                         = 2;  // 金币
  int64 pack_coin                    = 3;  // 储藏货币
  int64 treasure_pack_count          = 4;  // 宝箱个数
  int64 gold_treasure_pack_count     = 5;  // 金宝箱个数
  int64 defeated_monster_count       = 6;  // 击败怪物个数
  map<int64, int64> increment_attrs  = 7;  // 增量属性信息
  repeated WeaponGameEndInfo weapons = 8;  // 武器信息
}

message WeaponGameEndInfo {
  int64 id                = 1;
  int64 weapon_idx        = 2;  // 武器索引
  int64 last_level_damage = 3;  // 上一波次的伤害
  int64 last_kill_count   = 4;  // 上一波次的击杀数
}

message GameEndReply {
  repeated TreasurePack treasure_packs    = 1;  // 宝箱
  int64 level                             = 2;  // 当前波次
  repeated Weapon bought_weapons          = 3;  // 已装备的武器
  repeated Props bought_props             = 4;  // 已购买的道具
  repeated AttrInfo attr_info             = 5;
  int64 accumulate_coin                   = 6;  // 累计金币
  int64 accumulate_defeated_monster_count = 7;  // 累计击败怪物个数
  int64 coin                              = 8;  // 当前金币
}

message AttrInfo {
  int64 attr = 1;  // 属性ID
  int64 val  = 2;  // 属性值
}

message WeaponSoldRequest {
  int64 chapter_id = 1;  // 章节id
  int64 weapon_idx = 2;  // 武器索引
  int64 weapon_id  = 3;  // 武器id
}

message WeaponSoldReply {
  repeated Weapon bought_weapons = 1;  // 已装备的武器
  int64 coin                     = 2;  // 金币
  int64 pack_coin                = 3;  // 储藏金币
}

message WeaponUpgradeRequest {
  int64 chapter_id = 1;  // 章节id
  int64 weapon_idx = 2;  // 武器索引
  int64 weapon_id  = 3;  // 武器id
}

message WeaponUpgradeReply {
  repeated Weapon bought_weapons = 1;  // 已装备的武器
}

message LockShopItemRequest {
  int64 chapter_id = 1;  // 章节id
  int64 item_idx   = 2;  // 物品索引
  int64 item_id    = 3;  // 物品id
}

message LockShopItemReply {}

message UnLockShopItemRequest {
  int64 chapter_id = 1;  // 章节id
  int64 item_idx   = 2;  // 物品索引
  int64 item_id    = 3;  // 物品id
}

message UnLockShopItemReply {}

message BuyShopItemRequest {
  int64 chapter_id = 1;  // 章节id
  int64 item_idx   = 2;  // 物品索引
  int64 item_id    = 3;  // 物品id
}

message BuyShopItemReply {
  repeated ShopItem items        = 1;  // 商店物品
  int64 coin                     = 2;  // 金币
  int64 pack_coin                = 3;  // 储藏金币
  repeated Weapon bought_weapons = 4;  // 已购买的武器
  repeated Props bought_props    = 5;  // 已购买的道具
  repeated AttrInfo attr_info    = 6;
  int64 new_refresh_price        = 7;  // 刷新价格
  bool is_auto_upgrade           = 8;  // 是否自动升级
}

message RefreshShopItemsRequest {
  int64 chapter_id = 1;  // 章节id
}

message RefreshShopItemsReply {
  int64 new_refresh_price = 1;  // 刷新价格
  repeated ShopItem items = 2;  // 商店物品
  int64 coin              = 3;  // 金币
  int64 pack_coin         = 4;  // 储藏金币
}

message GetShopItemsRequest {
  int64 chapter_id = 1;  // 章节id
}

message GetShopItemsReply {
  int64 refresh_price                     = 1;  // 刷新价格
  repeated ShopItem items                 = 2;  // 商店物品
  repeated Weapon bought_weapons          = 3;  // 已购买的武器
  repeated Props bought_props             = 4;  // 已购买的道具
  int64 coin                              = 5;  // 金币
  int64 pack_coin                         = 6;  // 储藏金币
  int64 current_level                     = 7;  // 当前波次，为0则表示第一次进入，直接开战
  repeated AttrInfo attr_info             = 8;
  repeated int64 ship_ids                 = 9;   // 船只id
  int64 accumulate_defeated_monster_count = 10;  // 累计击败怪物个数
}

message ShopItem {
  int64 id            = 1;
  int64 price         = 2;
  ShopItemState state = 3;
  bool is_recommend   = 4;
}

message Weapon {
  int64 id                = 1;
  bool can_upgrade        = 2;
  int64 sold_price        = 3;
  int64 last_level_damage = 4;  // 上一波次的伤害
  int64 total_kill_count  = 5;  // 总击杀数
}

message Props {
  int64 id    = 1;
  int64 count = 2;
}

message ChapterInfo {
  int64 chapter_id                       = 1;  // 章节id
  int64 level                            = 2;  // 当前波次
  repeated Warship warships              = 3;  // 战船列表
  repeated int64 in_drive_ships          = 4;  // 使用的战船
  bool is_end                            = 5;  // 是否结束
  int64 max_level                        = 6;  // 最大波次
  bool enable_multi_genre                = 7;  // 是否开启多流派
  repeated int64 last_select_warship_ids = 8;  // 上次选择的战船
}

message Warship {
  int64 ship_id = 1;  // 船只id
  bool enable   = 2;  // 是否可用
}

message InAnyChapterProcessRequest {}

message InAnyChapterProcessReply {
  bool is_in_process = 1;  // 是否在战斗中
}
