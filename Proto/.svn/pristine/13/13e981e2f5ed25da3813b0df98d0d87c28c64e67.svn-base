// cs protocol
syntax = "proto3";

package actpb.act0153pb;
option go_package = "git.woa.com/red/actsvr/pkg/proto/actpb/act0153pb";


import "corepb/fight_common.proto";
import "corepb/loadout_comm.proto";
import "pkg/proto/actpb/commonpb/common.proto";

service CSAct0153Service {

  rpc GameStart(GameStartRequest) returns (GameStartReply);
  rpc GameEnd(GameEndRequest) returns (GameEndReply);
  rpc LeaveAct(LeaveActRequest) returns (LeaveActReply);
  rpc UnlockShowPlay(UnlockShowPlayRequest) returns (UnlockShowPlayReply);

  // 阵容协议复刻
  rpc LoadoutInfo(LoadoutInfoRequest) returns (LoadoutInfoReply);     // 获取阵容信息
  rpc ApplyLoadout(ApplyLoadoutRequest) returns (ApplyLoadoutReply);  // 设置阵容
}

enum QuestStatus {
  QUEST_STATUS_UNKNOWN = 0;  // 默认值 不使用
  QUEST_STATUS_UNLOCK  = 1;  // 关卡已解锁(未通关)
  QUEST_STATUS_LOCK    = 2;  // 关卡未解锁
  QUEST_STATUS_PASS    = 3;  // 关卡已通关
}

enum LockReason {
  REASON_UNKNOWN           = 0;  // 默认值 不使用
  REASON_PRE_QUEST_LOCK    = 1;  // 前置关卡未通过
  REASON_OPEN_TIME_UNREACH = 2;  // 开放时间未到
}

// rpc ActGetDetail 活动详情使用通用协议
message ActGetDetailRequest {}

message ActGetDetailReply {
  repeated QuestInfo quest_infos = 1;  // 关卡详情
}

message QuestInfo {
  int64 quest_id                     = 1;   // 关卡ID
  string quest_name                  = 2;   // 关卡名字
  QuestStatus quest_status           = 3;   // 关卡状态
  LockReason lock_reason             = 4;   // 关卡锁定原因
  int64 quest_star                   = 5;   // 关卡星级 0 1 2 3
  int64 share_varibale               = 6;   // 共享变量
  string quest_tips                  = 7;   // 试炼提示
  int64 fixed_support_buddy_id       = 8;   // 固定的援护ID
  string fixed_support_buddy_name    = 9;   // 固定的援护名称
  repeated actpb.commonpb.Task tasks = 10;  // 星级信息以及奖励
  int64 unlock_time                  = 11;  // 解锁时间 秒级时间戳
  bool unlock_show_play              = 12;  // 解锁动画是否播放
}

message GameStartRequest {
  int64 quest_id = 1;  // 关卡ID
}

message GameStartReply {
  corepb.GameStartMessage start_msg = 1;  // 通用战斗开始消息
}

message GameEndRequest {
  int64 quest_id                = 1;  // 关卡ID
  corepb.FightResultType result = 2;  // 战斗结果
  int32 reason                  = 3;  // 结算原因:EGameResultReason
  int64 share_variable_val      = 4;  // 共享变量的值
}

message GameEndReply {
  corepb.GameOverMessage over_message = 1;  // 通用战斗结算消息
  int64 star                          = 2;  // 关卡星级
  repeated actpb.commonpb.Task tasks  = 3;  // 通关奖励信息
}

message LeaveActRequest {}
message LeaveActReply {}

message LoadoutInfoRequest {
  string loadout_type = 1;  // 阵容类型。具体有哪些值由玩法系统确定
  int64 quest_id      = 2;  // 关卡ID
}
message LoadoutInfoReply {
  corepb.LoadoutProfile profile = 1;  // 阵容配置
  corepb.Loadout loadout        = 2;  // 阵容
  bool valid                    = 3;  // 当前阵容是否合法
  bool adjusted                 = 4;  // 当前阵容检验时是否有过不合法的项目但已经被自动调整
}

message ApplyLoadoutRequest {
  string loadout_type    = 1;  // 阵容类型。具体有哪些值由玩法系统确定
  corepb.Loadout loadout = 2;  // 阵容
}
message ApplyLoadoutReply {
  // 若要设置的阵容不合法，会通过 rpc 错误告知。
}

message UnlockShowPlayRequest {
  int64 quest_id = 1;  // 关卡ID
}

message UnlockShowPlayReply {}
