// cs protocol
syntax = "proto3";

package zonepb.fametitlepb;
option go_package = "git.code.oa.com/red/zonesvr/pkg/proto/zonepb/fametitlepb";

import "corepb/common.proto";
import "pkg/proto/zonepb/dressingpb/dressing.proto";

// Service 是称号系统服务
service Service {
  // FameTitleInfos 获取称号信息
  rpc FameTitleInfos(FameTitleInfosRequest) returns (FameTitleInfosReply);
  // FameTitleInfoByItemID 获取单个称号信息
  rpc FameTitleInfoByItemID(FameTitleInfoByItemIDRequest) returns (FameTitleInfoByItemIDReply);

  // UseFameTitle 使用称号
  rpc UseFameTitle(UseFameTitleRequest) returns (UseFameTitleReply);

  // RemoveNewTags 移除称号的「新」标识
  rpc RemoveNewTags(RemoveNewTagsRequest) returns (RemoveNewTagsReply);
}

message FameTitleInfosRequest {}

message FameTitleInfosReply {
  repeated FameTitleInfo fame_title_infos = 1;  // 玩家拥有的称号列表
  int64 in_use_fame_title_id              = 2;  // 玩家正在使用的称号ID
}

message FameTitleInfoByItemIDRequest {
  int64 fame_title_item_id = 1;  // 称号道具ID
}

message FameTitleInfoByItemIDReply {
  FameTitleInfo fame_title      = 1;  // 称号信息
  zonepb.dressingpb.TimeInfo time_info = 2;  // 配置限时信息
}

message FameTitleInfo {
  int64 id              = 1;  // 称号ID
  bool unlocked         = 2;  // 是否获得
  int64 expire_at       = 3;  // 到期时间(unix second)，若为0则表示永久
  bool new_tag          = 4;  // 「新」标识
  corepb.FightAttr attr = 5;  // 属性加成
}

message UseFameTitleRequest {
  int64 id = 1;  // 称号ID，若传 0 则表示卸下当前正在使用的称号
}

message UseFameTitleReply {
  repeated FameTitleInfo fame_title_infos = 1;  // 玩家拥有的称号列表
  int64 in_use_fame_title_id              = 2;  // 玩家正在使用的称号ID
}

message RemoveNewTagsRequest {
  repeated int64 ids = 1;  // 称号ID列表
}

message RemoveNewTagsReply {
  repeated FameTitleInfo fame_title_infos = 1;  // 玩家拥有的称号列表
  int64 in_use_fame_title_id              = 2;  // 玩家正在使用的称号ID
  repeated int64 removed_ids              = 3;  // 移除「新」标识的称号ID列表
}

message TransformReason {
  enum Reason {
    REASON_UNKNOWN = 0;  // 未指定
    DUPLICATED     = 1;  // 重复获得
    EXPIRED        = 2;  // 过期
  }
  Reason reason = 1;  // 分解原因
}