// cs protocol
syntax = "proto3";

package zonepb.rankingpb;
option go_package = "git.code.oa.com/red/zonesvr/pkg/proto/zonepb/rankingpb";

import "corepb/common.proto";
import "pkg/proto/zonepb/user_service.proto";
import "pkg/proto/zonepb/basic_info.proto";

// 排行榜查询服务
service RankingService {
  // Ranking 获取排行榜核心数据
  rpc Ranking(RankingRequest) returns (RankingReply);
  // PlayerView 获取玩家展示类数据
  rpc PlayerView(PlayerViewRequest) returns (PlayerViewReply);
}

message RankID {
  string rank_type = 1;  // 排行榜类型，定义在Rank配置里
  string instance  = 2;  // 实例，由业务定义，如不需要可不填
  int64 zone_id    = 3;  // 小区id
}

message RankData {
  int64 gid         = 1;  // 玩家gid
  int64 rank        = 2;  // 排行 0-未进排行榜  其他为具体的排名
  int64 w1          = 3;  // 用于排行的分数1
  int64 w2          = 4;  // 用于排行的分数2
  int64 w3          = 5;  // 用于排行的分数3
  int64 like_count  = 6;  // 点赞数
  bytes payload     = 7;  // 存储额外数据
  int64 modify_time = 8;  // 上榜时间(需要注意各榜单配置的时间粒度)
}

message RankingRequest {
  RankID rank_id   = 1;  // 排行榜ID
  int64 rank_begin = 2;  // 指定开始的排名 从1开始。
  int64 count      = 3;  // 指定的查询个数
}

message RankingReply {
  repeated RankData rank_list = 1;  // 排行信息
  RankData my_rank_info       = 2;  // 查询者自己的排名信息 不在榜上排名为0
  int64 total_rank_count      = 3;  // 当前榜单总数
  LikeInfo like_info          = 4;  // 点赞数据
}

message LikeInfo {
  int64 like_count = 1;  // 还可以点赞的次数
  int64 like_gid   = 2;  // 被点赞的玩家gid
}

message PlayerView {
  zonepb.BasicInfo basic_info           = 1;  // 基础信息
  corepb.FightAttr fight_attr           = 2;  // 战斗属性
  zonepb.BountyGameInfo bountygame_info = 3;  // 赏金大赛信息
  zonepb.GuildInfo guild_info           = 4;  // 工会信息
  zonepb.BuddiesInfo buddies_info       = 5;  // 伙伴信息
  zonepb.FashionInfo fashion_info       = 6;  // 时髦信息
}

message PlayerViewRequest {
  repeated int64 gids = 1;  // 需要查询的玩家列表
  string rank_type    = 2;  // 排行榜类型
}

message PlayerViewReply {
  map<int64, PlayerView> views = 1;  // 查询到的玩家展示类数据(gid -> view 数据)
}
