// cs protocol
syntax = "proto3";

package actpb.act0011pb;
option go_package = "git.woa.com/red/actsvr/pkg/proto/actpb/act0011pb";

import "corepb/common.proto";
import "pkg/proto/actpb/commonpb/common.proto";

service CSAct0011Service {
  // 领取活动奖励
  rpc Reward(RewardRequest) returns (RewardReply);
  // 购买双倍权益
  rpc BuyDouble(BuyDoubleRequest) returns (BuyDoubleReply);
}

message RewardRequest {
  int64 type                                          = 1;  // 0-领取任务奖励，这时需要填task_id，1-领进度奖励，只需填该字段即可
  int64 task_id                                       = 2;  // 领任务奖励时需指定任务ID
  repeated corepb.GiftSelectedItem gift_selected_item = 3;  // 可选礼包选中道具信息
}

message RewardReply {
  repeated corepb.Item awards = 1;  // 领取到的奖励
}

message ActGetDetailRequest {}

message ActGetDetailReply {
  int64 total_item_count           = 1;  // 当前已获得的重燃点数
  repeated Task task_list          = 2;  // 任务列表
  repeated ProcessAward award_list = 3;  // 进度奖励
  bool is_task_award_double        = 4;  // 是否已经开启奖励双倍
  corepb.Item buy_double_item      = 5;  // 购买双倍需要的道具
  int64 act_lost_day               = 6;  // 回流活动流失天数
  int64 will_add_fc                = 7;  // 预估可提升的赏金（如果是旧版本的回流活动，这里会下发0，客户端不需要展示）
}

message Task {
  actpb.commonpb.Task task = 1;  // 复用commonpb.Task.Task，其中Condition中的desc没用，客户端自己读配置即可
  int64 award_times        = 2;  // 当前该任务可领奖次数
  bool is_weekly_clear     = 3;  // true: 周清; false: 常驻
}

// 进度奖励
message ProcessAward {
  int64 id                         = 1;
  int64 need_count                 = 2;  // 需要的重燃点数
  repeated corepb.Item awards      = 3;
  actpb.commonpb.TaskStatus status = 4;  // 领奖状态
}

message BuyDoubleRequest {}
message BuyDoubleReply {
  repeated corepb.Item awards = 1;  // 补发的双倍奖励
  int64 total_item_count      = 2;  // 当前已获得的重燃点数
}