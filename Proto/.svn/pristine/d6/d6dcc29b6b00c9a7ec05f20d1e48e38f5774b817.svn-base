// cs protocol
syntax = "proto3";

package zonepb.islandsiegepb;

option go_package = "git.code.oa.com/red/zonesvr/pkg/proto/zonepb/islandsiegepb";

import "corepb/common.proto";

// IslandSiegeService 为海岛争夺战系统
service IslandSiegeService {
  // 查询伙伴复活信息
  rpc RevivalInfo(RevivalInfoRequest) returns (RevivalInfoReply);
  // 复活伙伴
  rpc ReviveBuddy(ReviveBuddyRequest) returns (ReviveBuddyReply);
  // 查询荣誉任务信息
  rpc QueryHonorTaskInfo(QueryHonorTaskInfoRequest) returns (QueryHonorTaskInfoReply);
  // 领取荣誉宝箱奖励
  rpc ClaimHonorBoxReward(ClaimHonorBoxRewardRequest) returns (ClaimHonorBoxRewardReply);
  // 批量领取荣誉宝箱奖励
  rpc BatchClaimHonorBoxReward(BatchClaimHonorBoxRewardRequest) returns (BatchClaimHonorBoxRewardReply);
}

message RevivalInfoRequest {
  int64 buddy_id = 1;  // 查询伙伴ID的复活信息
}

message RevivalInfoReply {
  RevivalInfo revival_info = 1;  // 复活信息
}

message ReviveBuddyRequest {
  int64 buddy_id = 1;  // 复活的伙伴
}

message ReviveBuddyReply {
  RevivalInfo revival_info = 1;  // 更新后的数据
}

message RevivalInfo {
  int64 buddy_id                     = 1;  // 伙伴ID
  int64 revival_count                = 2;  // 已经复活次数
  int64 max_revival_count            = 3;  // 最大复活次数
  repeated corepb.Item revival_items = 4;  // 本次复活的道具消耗
}

message QueryHonorTaskInfoRequest {}

message HonorTaskInfo {
  int64 id             = 1;  // 任务id
  int64 progress       = 2;  // 任务进度
  int64 total_progress = 3;  // 任务总进度
  int64 progress_score = 4;  // 荣誉值奖励
  bool is_finish       = 5;  // 是否完成
  int64 finished_count = 6;  // 已完成次数
  string name          = 7;  // 任务名称
  string desc          = 8;  // 任务描述
}

enum RewardStatus {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  // 未完成
  UNDONE = 0;
  // 可领取
  AVAILABLE = 1;
  // 已领取
  RECEIVED = 2;
}

message HonorBoxInfo {
  int64 id                     = 1;  // 宝箱id
  int64 score                  = 2;  // 宝箱需要的荣誉值
  RewardStatus status          = 3;  // 宝箱状态 // 0-未完成 1-可领取 2-已领取
  repeated corepb.Item rewards = 4;  // 宝箱奖励
}

message QueryHonorTaskInfoReply {
  int64 honor_score            = 1;  // 当前荣誉值
  repeated HonorTaskInfo tasks = 2;  // 任务列表
  repeated HonorBoxInfo boxes  = 3;  // 宝箱列表
}

message ClaimHonorBoxRewardRequest {
  int64 id = 1;  // 宝箱id
}

message ClaimHonorBoxRewardReply {
  int64 id                     = 1;  // 宝箱id
  repeated corepb.Item rewards = 2;  // 宝箱奖励
}

message BatchClaimHonorBoxRewardRequest {
  repeated int64 ids = 1;  // 宝箱id列表
}

message BatchClaimHonorBoxRewardReply {
  repeated int64 success_ids   = 1;  // 成功领取的宝箱id列表
  repeated corepb.Item rewards = 2;  // 宝箱奖励
}

message GameOverCustomData {
  map<int64, int64> successive_wins = 1;  // 各玩家连胜次数(gid -> 连胜次数)
}
